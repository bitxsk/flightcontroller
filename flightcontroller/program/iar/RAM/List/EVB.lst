###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       18/Jun/2018  19:47:55
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\EVB.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW108A.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\EVB.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\EVB.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\EVB.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\EVB.c
      1          /*
      2          * @EVB_car.c
      3          * @version 1.00
      4          * @date 2016-5
      5          * @brief EverythingViaBluetooth的配套代码，版本号与labview程序对应
      6          *
      7          ** @Revision History
      8          *    version 0.99
      9          *      --第一版库文件
     10          *      --刘导 QQ:875978009
     11          *
     12          **    version 1.00
     13          *      --刘导 QQ:875978009
     14          */
     15          
     16          #include "common.h"

   \                                 In section .text, align 4
   \   __interwork __softfp bool DMA_isOccupying(uint8)
   \                     DMA_isOccupying: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x4803             LDR.N    R0,??DMA_isOccupying_0  ;; 0x4000800c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x40C8             LSRS     R0,R0,R1
   \   00000008   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000C   0x4770             BX       LR               ;; return
   \   0000000E   0xBF00             Nop      
   \                     ??DMA_isOccupying_0:
   \   00000010   0x4000800C         DC32     0x4000800c
     17          #include "EVB.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void EVB_::TX_::add(char)
   \                     _ZN4EVB_3TX_3addEc: (+1)
   \   00000000   0x6E42             LDR      R2,[R0, #+100]
   \   00000002   0x1C53             ADDS     R3,R2,#+1
   \   00000004   0x6643             STR      R3,[R0, #+100]
   \   00000006   0x5481             STRB     R1,[R0, R2]
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void EVB_::TX_::clear()
   \                     _ZN4EVB_3TX_5clearEv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x2564             MOVS     R5,#+100
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6660             STR      R0,[R4, #+100]
   \   00000016   0xBD70             POP      {R4-R6,PC}       ;; return
     18          #include "includes.h"
     19          

   \                                 In section .bss, align 4
     20          int TT1, TT1_max, TT1_min;
   \                     TT1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     TT1_max:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     TT1_min:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     21          EVB_ EVB;
   \                     EVB:
   \   00000000                      DS8 2012
     22          
     23          

   \                                 In section .text, align 4, keep-with-next
     24          void EVB_Init(__EVB_InitTypeDef EVB_InitStruct)
     25          {
   \                     _Z8EVB_Init17__EVB_InitTypeDef: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
     26            EVB.RXD_PackageLength[EVB_Servo]                  = 18;
   \   00000002   0x2012             MOVS     R0,#+18
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000008   0xF8C1 0x0604      STR      R0,[R1, #+1540]
     27            EVB.RXD_PackageLength[EVB_Spd]                    = 20;
   \   0000000C   0x2014             MOVS     R0,#+20
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000012   0xF8C1 0x0608      STR      R0,[R1, #+1544]
     28            EVB.RXD_PackageLength[EVB_KpTable]                = 149;
   \   00000016   0x2095             MOVS     R0,#+149
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000001C   0xF8C1 0x060C      STR      R0,[R1, #+1548]
     29            EVB.RXD_PackageLength[EVB_KdTable]                = 149;
   \   00000020   0x2095             MOVS     R0,#+149
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000026   0xF8C1 0x0610      STR      R0,[R1, #+1552]
     30            EVB.RXD_PackageLength[EVB_SpdTable]               = 149;
   \   0000002A   0x2095             MOVS     R0,#+149
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000030   0xF8C1 0x0614      STR      R0,[R1, #+1556]
     31            EVB.RXD_PackageLength[EVB_OffsetBoundTable]       = 86;
   \   00000034   0x2056             MOVS     R0,#+86
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000003A   0xF8C1 0x0618      STR      R0,[R1, #+1560]
     32            EVB.RXD_PackageLength[EVB_Sensor]                 = 2;
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000044   0xF8C1 0x061C      STR      R0,[R1, #+1564]
     33            EVB.RXD_PackageLength[EVB_Battle]                 = 4;
   \   00000048   0x2004             MOVS     R0,#+4
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000004E   0xF8C1 0x0620      STR      R0,[R1, #+1568]
     34            EVB.RXD_PackageLength[EVB_RemoteControl]          = 22;
   \   00000052   0x2016             MOVS     R0,#+22
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000058   0xF8C1 0x0624      STR      R0,[R1, #+1572]
     35            EVB.RXD_PackageLength[EVB_Command]                = 2;
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000062   0xF8C1 0x0628      STR      R0,[R1, #+1576]
     36            EVB.RXD_PackageLength[EVB_FullBrake]              = 2;
   \   00000066   0x2002             MOVS     R0,#+2
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000006C   0xF8C1 0x062C      STR      R0,[R1, #+1580]
     37            
     38            EVB.SystemPeriod     = (int)(EVB_InitStruct.SystemPeriod * 1000); //小数变为整数     
   \   00000070   0xED9D 0x0A01      VLDR     S0,[SP, #+4]
   \   00000074   0xEDDF 0x....      VLDR.W   S1,??DataTable1  ;; 0x447a0000
   \   00000078   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000007C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000084   0xED80 0x0A05      VSTR     S0,[R0, #+20]
     39            EVB.TransmitInterval = (int)(EVB_InitStruct.TransmitInterval * 1000); 
   \   00000088   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   0000008C   0xEDDF 0x....      VLDR.W   S1,??DataTable1  ;; 0x447a0000
   \   00000090   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000094   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000009C   0xED80 0x0A01      VSTR     S0,[R0, #+4]
     40            
     41            EVB.AngleMax         = EVB_InitStruct.AngleMax;
   \   000000A0   0x980B             LDR      R0,[SP, #+44]
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000A6   0xF8C1 0x0724      STR      R0,[R1, #+1828]
     42            EVB.AngleMid         = EVB_InitStruct.AngleMid;
   \   000000AA   0x980A             LDR      R0,[SP, #+40]
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000B0   0xF8C1 0x0720      STR      R0,[R1, #+1824]
     43            EVB.AngleMin         = EVB_InitStruct.AngleMin;
   \   000000B4   0x9809             LDR      R0,[SP, #+36]
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000BA   0xF8C1 0x071C      STR      R0,[R1, #+1820]
     44            EVB.SpdKd            = EVB_InitStruct.SpdKd;
   \   000000BE   0x9805             LDR      R0,[SP, #+20]
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000C4   0xF8C1 0x0718      STR      R0,[R1, #+1816]
     45            EVB.SpdKi            = EVB_InitStruct.SpdKi;
   \   000000C8   0x9804             LDR      R0,[SP, #+16]
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000CE   0xF8C1 0x0714      STR      R0,[R1, #+1812]
     46            EVB.SpdKp            = EVB_InitStruct.SpdKp;
   \   000000D2   0x9803             LDR      R0,[SP, #+12]
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000D8   0xF8C1 0x0710      STR      R0,[R1, #+1808]
     47            EVB.SupplyVoltage    = EVB_InitStruct.SupplyVoltage;
   \   000000DC   0x980C             LDR      R0,[SP, #+48]
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000E2   0xF8C1 0x0728      STR      R0,[R1, #+1832]
     48            EVB.uartSend         = EVB_InitStruct.uartSend;
   \   000000E6   0x9802             LDR      R0,[SP, #+8]
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000EC   0x61C8             STR      R0,[R1, #+28]
     49            EVB.KpTable          = EVB_InitStruct.KpTable;
   \   000000EE   0x9806             LDR      R0,[SP, #+24]
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000F4   0xF8C1 0x072C      STR      R0,[R1, #+1836]
     50            EVB.KdTable          = EVB_InitStruct.KdTable;
   \   000000F8   0x9807             LDR      R0,[SP, #+28]
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000000FE   0xF8C1 0x0730      STR      R0,[R1, #+1840]
     51            EVB.SpdTable         = EVB_InitStruct.SpdTable;
   \   00000102   0x9808             LDR      R0,[SP, #+32]
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000108   0xF8C1 0x0734      STR      R0,[R1, #+1844]
     52          //  int i;
     53          //  for(i = 0; EVB_InitStruct.Parameter[i] != NULL; i++)
     54          //  {
     55          //    EVB.Parameter[i]        = EVB_InitStruct.Parameter[i];
     56          //    EVB.ParameterNum[i]     = EVB_InitStruct.ParameterNum[i];
     57          //  }
     58          //  EVB.functionNum = i;
     59          //  
     60            EVB.FunctionMode     = EVB_Spd;
   \   0000010C   0x2002             MOVS     R0,#+2
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000112   0x7648             STRB     R0,[R1, #+25]
     61            EVB.InitFlag         = true;
   \   00000114   0x2001             MOVS     R0,#+1
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000011A   0x6008             STR      R0,[R1, #+0]
     62          
     63          }
   \   0000011C   0xB004             ADD      SP,SP,#+16
   \   0000011E   0x4770             BX       LR               ;; return
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void EVB_TimerUpdate()
     66          {
     67            EVB.SysTime += EVB.SystemPeriod;
   \                     _Z15EVB_TimerUpdatev: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000004   0x6901             LDR      R1,[R0, #+16]
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000000A   0x6940             LDR      R0,[R0, #+20]
   \   0000000C   0x1841             ADDS     R1,R0,R1
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000012   0x6101             STR      R1,[R0, #+16]
     68          }
   \   00000014   0x4770             BX       LR               ;; return
     69          

   \                                 In section .text, align 4, keep-with-next
     70          void EVB_::send()
     71          {
   \                     _ZN4EVB_4sendEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
     72            if(EVB.InitFlag == false)
     73            {
     74            }
     75            if(1)
     76            {
     77              if(EVB.SysTime >= EVB.TransmitTimestamp + 2*1000 && t >= 5000)
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000000C   0x6900             LDR      R0,[R0, #+16]
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000012   0x6889             LDR      R1,[R1, #+8]
   \   00000014   0xF511 0x61FA      ADDS     R1,R1,#+2000
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xF0C0 0x8304      BCC.W    ??send_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF241 0x3188      MOVW     R1,#+5000
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xF2C0 0x82FC      BLT.W    ??send_0
     78              {
     79                if(!DMA_isOccupying(DMA_CH2))
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x.... 0x....      BL       DMA_isOccupying
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xF040 0x82ED      BNE.W    ??send_1
     80                {
     81                  EVB.TX.clear();
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000003E   0x.... 0x....      BL       _ZN4EVB_3TX_5clearEv
     82                  
     83                  int16 timeS = t/2;
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x2102             MOVS     R1,#+2
   \   0000004A   0xFB90 0xF5F1      SDIV     R5,R0,R1
     84          
     85                  EVB.TX.add(MPU6000_Raw.BUF[0]);
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000052   0x7801             LDRB     R1,[R0, #+0]
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000058   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     86                  EVB.TX.add(MPU6000_Raw.BUF[1]);
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000060   0x7841             LDRB     R1,[R0, #+1]
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000066   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     87                  EVB.TX.add(MPU6000_Raw.BUF[2]);
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000006E   0x7881             LDRB     R1,[R0, #+2]
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000074   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     88                  EVB.TX.add(MPU6000_Raw.BUF[3]);
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000007C   0x78C1             LDRB     R1,[R0, #+3]
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000082   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     89                  EVB.TX.add(MPU6000_Raw.BUF[4]);
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000008A   0x7901             LDRB     R1,[R0, #+4]
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000090   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     90                  EVB.TX.add(MPU6000_Raw.BUF[5]);
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000098   0x7941             LDRB     R1,[R0, #+5]
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000009E   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     91                      
     92                  EVB.TX.add(MPU6000_Raw.BUF[8]);
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000A6   0x7A01             LDRB     R1,[R0, #+8]
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000000AC   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     93                  EVB.TX.add(MPU6000_Raw.BUF[9]);
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000B4   0x7A41             LDRB     R1,[R0, #+9]
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000000BA   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     94                  EVB.TX.add(MPU6000_Raw.BUF[10]);
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000C2   0x7A81             LDRB     R1,[R0, #+10]
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000000C8   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     95                  EVB.TX.add(MPU6000_Raw.BUF[11]);
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000D0   0x7AC1             LDRB     R1,[R0, #+11]
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000000D6   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     96                  EVB.TX.add(MPU6000_Raw.BUF[12]);
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000DE   0x7B01             LDRB     R1,[R0, #+12]
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000000E4   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     97                  EVB.TX.add(MPU6000_Raw.BUF[13]);
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000EC   0x7B41             LDRB     R1,[R0, #+13]
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000000F2   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
     98                  
     99                  EVB.TX.add(MPU6000.BUF[0]);
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   000000FA   0x7801             LDRB     R1,[R0, #+0]
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000100   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    100                  EVB.TX.add(MPU6000.BUF[1]);
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000108   0x7841             LDRB     R1,[R0, #+1]
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000010E   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    101                  EVB.TX.add(MPU6000.BUF[2]);
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000116   0x7881             LDRB     R1,[R0, #+2]
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000011C   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    102                  EVB.TX.add(MPU6000.BUF[3]);
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000124   0x78C1             LDRB     R1,[R0, #+3]
   \   00000126   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000012A   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    103                  EVB.TX.add(MPU6000.BUF[4]);
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000132   0x7901             LDRB     R1,[R0, #+4]
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000138   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    104                  EVB.TX.add(MPU6000.BUF[5]);
   \   0000013C   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000140   0x7941             LDRB     R1,[R0, #+5]
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000146   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    105                      
    106                  EVB.TX.add(MPU6000.BUF[8]);
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000014E   0x7A01             LDRB     R1,[R0, #+8]
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000154   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    107                  EVB.TX.add(MPU6000.BUF[9]);
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000015C   0x7A41             LDRB     R1,[R0, #+9]
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000162   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    108                  EVB.TX.add(MPU6000.BUF[10]);
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000016A   0x7A81             LDRB     R1,[R0, #+10]
   \   0000016C   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000170   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    109                  EVB.TX.add(MPU6000.BUF[11]);
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000178   0x7AC1             LDRB     R1,[R0, #+11]
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000017E   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    110                  EVB.TX.add(MPU6000.BUF[12]);
   \   00000182   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000186   0x7B01             LDRB     R1,[R0, #+12]
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000018C   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    111                  EVB.TX.add(MPU6000.BUF[13]);
   \   00000190   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000194   0x7B41             LDRB     R1,[R0, #+13]
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000019A   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    112                  
    113                  EVB.TX.add((int16)(roll1 * 100) >> 8);
   \   0000019E   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   000001A2   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000001A6   0xEDDF 0x0ADF      VLDR.W   S1,??send_2      ;; 0x42c80000
   \   000001AA   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001AE   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000001B2   0xEE10 0x0A10      VMOV     R0,S0
   \   000001B6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000001B8   0x1200             ASRS     R0,R0,#+8
   \   000001BA   0x0001             MOVS     R1,R0
   \   000001BC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001BE   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000001C2   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    114                  EVB.TX.add((int16)(roll1 * 100));
   \   000001C6   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   000001CA   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000001CE   0xEDDF 0x0AD5      VLDR.W   S1,??send_2      ;; 0x42c80000
   \   000001D2   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001D6   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000001DA   0xEE10 0x0A10      VMOV     R0,S0
   \   000001DE   0x0001             MOVS     R1,R0
   \   000001E0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001E2   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000001E6   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    115                  EVB.TX.add((int16)(pitch1 * 100) >> 8);
   \   000001EA   0x.... 0x....      LDR.W    R0,??DataTable13
   \   000001EE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000001F2   0xEDDF 0x0ACC      VLDR.W   S1,??send_2      ;; 0x42c80000
   \   000001F6   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001FA   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000001FE   0xEE10 0x0A10      VMOV     R0,S0
   \   00000202   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000204   0x1200             ASRS     R0,R0,#+8
   \   00000206   0x0001             MOVS     R1,R0
   \   00000208   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000020A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000020E   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    116                  EVB.TX.add((int16)(pitch1 * 100));
   \   00000212   0x.... 0x....      LDR.W    R0,??DataTable13
   \   00000216   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000021A   0xEDDF 0x0AC2      VLDR.W   S1,??send_2      ;; 0x42c80000
   \   0000021E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000222   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000226   0xEE10 0x0A10      VMOV     R0,S0
   \   0000022A   0x0001             MOVS     R1,R0
   \   0000022C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000022E   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000232   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    117                  EVB.TX.add((int16)(yaw1 * 100) >> 8);
   \   00000236   0x.... 0x....      LDR.W    R0,??DataTable14
   \   0000023A   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000023E   0xEDDF 0x0AB9      VLDR.W   S1,??send_2      ;; 0x42c80000
   \   00000242   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000246   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000024A   0xEE10 0x0A10      VMOV     R0,S0
   \   0000024E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000250   0x1200             ASRS     R0,R0,#+8
   \   00000252   0x0001             MOVS     R1,R0
   \   00000254   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000256   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000025A   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    118                  EVB.TX.add((int16)(yaw1 * 100));
   \   0000025E   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000262   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000266   0xEDDF 0x0AAF      VLDR.W   S1,??send_2      ;; 0x42c80000
   \   0000026A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000026E   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000272   0xEE10 0x0A10      VMOV     R0,S0
   \   00000276   0x0001             MOVS     R1,R0
   \   00000278   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000027A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000027E   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    119                  
    120                  
    121                  EVB.TX.add((int16)Compass.X >> 8);
   \   00000282   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   00000286   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000028A   0x1200             ASRS     R0,R0,#+8
   \   0000028C   0x0001             MOVS     R1,R0
   \   0000028E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000290   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000294   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    122                  EVB.TX.add((int16)Compass.X);
   \   00000298   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   0000029C   0x6800             LDR      R0,[R0, #+0]
   \   0000029E   0x0001             MOVS     R1,R0
   \   000002A0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002A2   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000002A6   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    123                  EVB.TX.add((int16)Compass.Y >> 8);
   \   000002AA   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000002AE   0xF9B0 0x0004      LDRSH    R0,[R0, #+4]
   \   000002B2   0x1200             ASRS     R0,R0,#+8
   \   000002B4   0x0001             MOVS     R1,R0
   \   000002B6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002B8   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000002BC   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    124                  EVB.TX.add((int16)Compass.Y);
   \   000002C0   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000002C4   0x6840             LDR      R0,[R0, #+4]
   \   000002C6   0x0001             MOVS     R1,R0
   \   000002C8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002CA   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000002CE   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    125                  EVB.TX.add((int16)Compass.Z >> 8);
   \   000002D2   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000002D6   0xF9B0 0x0008      LDRSH    R0,[R0, #+8]
   \   000002DA   0x1200             ASRS     R0,R0,#+8
   \   000002DC   0x0001             MOVS     R1,R0
   \   000002DE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002E0   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000002E4   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    126                  EVB.TX.add((int16)Compass.Z);
   \   000002E8   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000002EC   0x6880             LDR      R0,[R0, #+8]
   \   000002EE   0x0001             MOVS     R1,R0
   \   000002F0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002F2   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000002F6   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    127                  
    128          
    129                  float delta_gyro = 150, delta_angle = 10;
   \   000002FA   0xED9F 0x....      VLDR.W   S16,??DataTable2  ;; 0x43160000
   \   000002FE   0xEEF2 0x8A04      VMOV.F32 S17,#10.0
    130                  if(
    131                      (abs(MPU6000.gyro_x - EVB.EventTrigger.wx0) > delta_gyro ||abs(MPU6000.gyro_y - EVB.EventTrigger.wy0) > delta_gyro || abs(MPU6000.gyro_z - EVB.EventTrigger.wz0) > delta_gyro) &&
    132                      (abs(roll1 - EVB.EventTrigger.roll0) > delta_angle || abs(pitch1 - EVB.EventTrigger.pitch0) > delta_angle ||abs(yaw1 - EVB.EventTrigger.yaw0) > delta_angle)
    133                     )
   \   00000302   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000306   0xED90 0x0A0F      VLDR     S0,[R0, #+60]
   \   0000030A   0x.... 0x....      LDR.W    R0,??DataTable16
   \   0000030E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000312   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000316   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   0000031A   0xEEB4 0x8A60      VCMP.F32 S16,S1
   \   0000031E   0xEEF1 0xFA10      FMSTAT   
   \   00000322   0xD421             BMI.N    ??send_3
   \   00000324   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000328   0xED90 0x0A10      VLDR     S0,[R0, #+64]
   \   0000032C   0x.... 0x....      LDR.W    R0,??DataTable17
   \   00000330   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000334   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000338   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   0000033C   0xEEB4 0x8A60      VCMP.F32 S16,S1
   \   00000340   0xEEF1 0xFA10      FMSTAT   
   \   00000344   0xD410             BMI.N    ??send_3
   \   00000346   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000034A   0xED90 0x0A11      VLDR     S0,[R0, #+68]
   \   0000034E   0x.... 0x....      LDR.W    R0,??DataTable18
   \   00000352   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000356   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   0000035A   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   0000035E   0xEEB4 0x8A60      VCMP.F32 S16,S1
   \   00000362   0xEEF1 0xFA10      FMSTAT   
   \   00000366   0xD538             BPL.N    ??send_4
   \                     ??send_3: (+1)
   \   00000368   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   0000036C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000370   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000374   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000378   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   0000037C   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   00000380   0xEEF4 0x8A60      VCMP.F32 S17,S1
   \   00000384   0xEEF1 0xFA10      FMSTAT   
   \   00000388   0xD421             BMI.N    ??send_5
   \   0000038A   0x.... 0x....      LDR.W    R0,??DataTable13
   \   0000038E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000392   0x.... 0x....      LDR.W    R0,??DataTable18_2
   \   00000396   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000039A   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   0000039E   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   000003A2   0xEEF4 0x8A60      VCMP.F32 S17,S1
   \   000003A6   0xEEF1 0xFA10      FMSTAT   
   \   000003AA   0xD410             BMI.N    ??send_5
   \   000003AC   0x.... 0x....      LDR.W    R0,??DataTable14
   \   000003B0   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000003B4   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000003B8   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000003BC   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   000003C0   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   000003C4   0xEEF4 0x8A60      VCMP.F32 S17,S1
   \   000003C8   0xEEF1 0xFA10      FMSTAT   
   \   000003CC   0xD505             BPL.N    ??send_4
    134                  {
    135                    EVB.EventTrigger.gamma = 3; //均满足
   \                     ??send_5: (+1)
   \   000003CE   0x2003             MOVS     R0,#+3
   \   000003D0   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000003D4   0xF8C1 0x06DC      STR      R0,[R1, #+1756]
   \   000003D8   0xE076             B.N      ??send_6
    136                  }
    137                  else if(abs(MPU6000.gyro_x - EVB.EventTrigger.wx0) > delta_gyro ||abs(MPU6000.gyro_y - EVB.EventTrigger.wy0) > delta_gyro || abs(MPU6000.gyro_z - EVB.EventTrigger.wz0) > delta_gyro)
   \                     ??send_4: (+1)
   \   000003DA   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   000003DE   0xED90 0x0A0F      VLDR     S0,[R0, #+60]
   \   000003E2   0x.... 0x....      LDR.W    R0,??DataTable16
   \   000003E6   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000003EA   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   000003EE   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   000003F2   0xEEB4 0x8A60      VCMP.F32 S16,S1
   \   000003F6   0xEEF1 0xFA10      FMSTAT   
   \   000003FA   0xD421             BMI.N    ??send_7
   \   000003FC   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000400   0xED90 0x0A10      VLDR     S0,[R0, #+64]
   \   00000404   0x.... 0x....      LDR.W    R0,??DataTable17
   \   00000408   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000040C   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000410   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   00000414   0xEEB4 0x8A60      VCMP.F32 S16,S1
   \   00000418   0xEEF1 0xFA10      FMSTAT   
   \   0000041C   0xD410             BMI.N    ??send_7
   \   0000041E   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   00000422   0xED90 0x0A11      VLDR     S0,[R0, #+68]
   \   00000426   0x.... 0x....      LDR.W    R0,??DataTable18
   \   0000042A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000042E   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000432   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   00000436   0xEEB4 0x8A60      VCMP.F32 S16,S1
   \   0000043A   0xEEF1 0xFA10      FMSTAT   
   \   0000043E   0xD505             BPL.N    ??send_8
    138                  {
    139                    EVB.EventTrigger.gamma = 2; //角速度满足
   \                     ??send_7: (+1)
   \   00000440   0x2002             MOVS     R0,#+2
   \   00000442   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000446   0xF8C1 0x06DC      STR      R0,[R1, #+1756]
   \   0000044A   0xE03D             B.N      ??send_6
    140                  }
    141                  else if(abs(roll1 - EVB.EventTrigger.roll0) > delta_angle || abs(pitch1 - EVB.EventTrigger.pitch0) > delta_angle || abs(yaw1 - EVB.EventTrigger.yaw0) > delta_angle)
   \                     ??send_8: (+1)
   \   0000044C   0x.... 0x....      LDR.W    R0,??DataTable12_5
   \   00000450   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000454   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000458   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000045C   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000460   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   00000464   0xEEF4 0x8A60      VCMP.F32 S17,S1
   \   00000468   0xEEF1 0xFA10      FMSTAT   
   \   0000046C   0xD421             BMI.N    ??send_9
   \   0000046E   0x.... 0x....      LDR.W    R0,??DataTable13
   \   00000472   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000476   0x.... 0x....      LDR.W    R0,??DataTable18_2
   \   0000047A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000047E   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000482   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   00000486   0xEEF4 0x8A60      VCMP.F32 S17,S1
   \   0000048A   0xEEF1 0xFA10      FMSTAT   
   \   0000048E   0xD410             BMI.N    ??send_9
   \   00000490   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000494   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000498   0x.... 0x....      LDR.W    R0,??DataTable19
   \   0000049C   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000004A0   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   000004A4   0xEEF0 0x0AC0      VABS.F32 S1,S0
   \   000004A8   0xEEF4 0x8A60      VCMP.F32 S17,S1
   \   000004AC   0xEEF1 0xFA10      FMSTAT   
   \   000004B0   0xD505             BPL.N    ??send_10
    142                  {
    143                    EVB.EventTrigger.gamma = 1; //角度满足
   \                     ??send_9: (+1)
   \   000004B2   0x2001             MOVS     R0,#+1
   \   000004B4   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000004B8   0xF8C1 0x06DC      STR      R0,[R1, #+1756]
   \   000004BC   0xE004             B.N      ??send_6
    144                  }
    145                  else
    146                  {
    147                    EVB.EventTrigger.gamma = 0;
   \                     ??send_10: (+1)
   \   000004BE   0x2000             MOVS     R0,#+0
   \   000004C0   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000004C4   0xF8C1 0x06DC      STR      R0,[R1, #+1756]
    148                  }
    149          
    150                  if(EVB.EventTrigger.gamma != 0)
   \                     ??send_6: (+1)
   \   000004C8   0x.... 0x....      LDR.W    R0,??DataTable12
   \   000004CC   0xF8D0 0x06DC      LDR      R0,[R0, #+1756]
   \   000004D0   0x2800             CMP      R0,#+0
   \   000004D2   0xD02C             BEQ.N    ??send_11
    151                  {
    152                    EVB.EventTrigger.wx0 = MPU6000.gyro_x;
   \   000004D4   0x.... 0x....      LDR.W    R0,??DataTable12
   \   000004D8   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   000004DC   0x6BC9             LDR      R1,[R1, #+60]
   \   000004DE   0xF8C0 0x16C4      STR      R1,[R0, #+1732]
    153                    EVB.EventTrigger.wy0 = MPU6000.gyro_y;
   \   000004E2   0x.... 0x....      LDR.W    R0,??DataTable12
   \   000004E6   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   000004EA   0x6C09             LDR      R1,[R1, #+64]
   \   000004EC   0xF8C0 0x16C8      STR      R1,[R0, #+1736]
    154                    EVB.EventTrigger.wz0 = MPU6000.gyro_z;
   \   000004F0   0x.... 0x....      LDR.W    R0,??DataTable12
   \   000004F4   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   000004F8   0x6C49             LDR      R1,[R1, #+68]
   \   000004FA   0xF8C0 0x16CC      STR      R1,[R0, #+1740]
    155                    EVB.EventTrigger.roll0 = roll1;
   \   000004FE   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000502   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   00000506   0x6809             LDR      R1,[R1, #+0]
   \   00000508   0xF8C0 0x16D0      STR      R1,[R0, #+1744]
    156                    EVB.EventTrigger.pitch0 = pitch1;
   \   0000050C   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000510   0x.... 0x....      LDR.W    R1,??DataTable13
   \   00000514   0x6809             LDR      R1,[R1, #+0]
   \   00000516   0xF8C0 0x16D4      STR      R1,[R0, #+1748]
    157                    EVB.EventTrigger.yaw0 = yaw1;
   \   0000051A   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000051E   0x.... 0x....      LDR.W    R1,??DataTable14
   \   00000522   0xE001             B.N      ??send_12
   \                     ??send_2:
   \   00000524   0x42C80000         DC32     0x42c80000
   \                     ??send_12: (+1)
   \   00000528   0x6809             LDR      R1,[R1, #+0]
   \   0000052A   0xF8C0 0x16D8      STR      R1,[R0, #+1752]
    158                  }
    159                  
    160                  EVB.TX.add((int16)EVB.EventTrigger.gamma >> 8);
   \                     ??send_11: (+1)
   \   0000052E   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000532   0xF9B0 0x06DC      LDRSH    R0,[R0, #+1756]
   \   00000536   0x1200             ASRS     R0,R0,#+8
   \   00000538   0x0001             MOVS     R1,R0
   \   0000053A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000053C   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000540   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    161                  EVB.TX.add((int16)EVB.EventTrigger.gamma);
   \   00000544   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000548   0xF8D0 0x06DC      LDR      R0,[R0, #+1756]
   \   0000054C   0x0001             MOVS     R1,R0
   \   0000054E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000550   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000554   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    162                 
    163                //  EVB.TX.add((int16)(roll * 100) >> 8);
    164                //  EVB.TX.add((int16)(roll * 100));
    165                //  EVB.TX.add((int16)(pitch * 100) >> 8);
    166                //  EVB.TX.add((int16)(pitch * 100));
    167                //  EVB.TX.add((int16)(yaw * 100) >> 8);
    168                //  EVB.TX.add((int16)(yaw * 100));
    169                  
    170          #if SENSOR_ULTRASOUND_ANALOG == SENSOR_USED
    171                  EVB.TX.add((int16)(Ultrasound->dis * 10000) >> 8);
   \   00000558   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   0000055C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000560   0xEDDF 0x....      VLDR.W   S1,??DataTable7  ;; 0x461c4000
   \   00000564   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000568   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000056C   0xEE10 0x0A10      VMOV     R0,S0
   \   00000570   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000572   0x1200             ASRS     R0,R0,#+8
   \   00000574   0x0001             MOVS     R1,R0
   \   00000576   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000578   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000057C   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    172                  EVB.TX.add((int16)(Ultrasound->dis * 10000));
   \   00000580   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   00000584   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000588   0xEDDF 0x....      VLDR.W   S1,??DataTable7  ;; 0x461c4000
   \   0000058C   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000590   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000594   0xEE10 0x0A10      VMOV     R0,S0
   \   00000598   0x0001             MOVS     R1,R0
   \   0000059A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000059C   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000005A0   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    173          #else   
    174                  EVB.TX.add((int16)(0) >> 8);
    175                  EVB.TX.add((int16)(0));
    176          #endif        
    177          
    178          #if SENSOR_NVIDIATX1 == SENSOR_USED
    179                  EVB.TX.add((int16)(NvidiaTX1->velX_raw) >> 8);
    180                  EVB.TX.add((int16)(NvidiaTX1->velX_raw));
    181                
    182                  EVB.TX.add((int16)(NvidiaTX1->velY_raw) >> 8);
    183                  EVB.TX.add((int16)(NvidiaTX1->velY_raw));
    184          #else
    185                  EVB.TX.add((int16)(0) >> 8);
   \   000005A4   0x2100             MOVS     R1,#+0
   \   000005A6   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000005AA   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    186                  EVB.TX.add((int16)(0));
   \   000005AE   0x2100             MOVS     R1,#+0
   \   000005B0   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000005B4   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    187                  EVB.TX.add((int16)(0) >> 8);
   \   000005B8   0x2100             MOVS     R1,#+0
   \   000005BA   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000005BE   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    188                  EVB.TX.add((int16)(0));
   \   000005C2   0x2100             MOVS     R1,#+0
   \   000005C4   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000005C8   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    189          #endif     
    190                  /*****************************************/
    191                  EVB.TX.add((int16)timeS >> 8);
   \   000005CC   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000005CE   0x0028             MOVS     R0,R5
   \   000005D0   0x1200             ASRS     R0,R0,#+8
   \   000005D2   0x0001             MOVS     R1,R0
   \   000005D4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000005D6   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000005DA   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    192                  EVB.TX.add((int16)timeS);
   \   000005DE   0x0028             MOVS     R0,R5
   \   000005E0   0x0001             MOVS     R1,R0
   \   000005E2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000005E4   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000005E8   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    193                   
    194          
    195                  
    196                  
    197                  //  EVB.TX.add((int16)(15098) >> 8);
    198                  //  EVB.TX.add((int16)(15098));
    199                  EVB.TransmitTimestamp = EVB.SysTime;
   \   000005EC   0x.... 0x....      LDR.W    R0,??DataTable12
   \   000005F0   0x6900             LDR      R0,[R0, #+16]
   \   000005F2   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000005F6   0x6088             STR      R0,[R1, #+8]
    200                  EVB.TX.startDMA_Transmit();
   \   000005F8   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   000005FC   0x.... 0x....      BL       _ZN4EVB_3TX_17startDMA_TransmitEv
    201                  EVB.TX.sendPackageCnt++;
   \   00000600   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000604   0xF8D0 0x06C0      LDR      R0,[R0, #+1728]
   \   00000608   0x1C40             ADDS     R0,R0,#+1
   \   0000060A   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000060E   0xF8C1 0x06C0      STR      R0,[R1, #+1728]
   \   00000612   0xE008             B.N      ??send_0
    202                    
    203                }
    204                else
    205                {
    206                  EVB.EventTrigger.dropPackage++;
   \                     ??send_1: (+1)
   \   00000614   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000618   0xF8D0 0x06E4      LDR      R0,[R0, #+1764]
   \   0000061C   0x1C40             ADDS     R0,R0,#+1
   \   0000061E   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000622   0xF8C1 0x06E4      STR      R0,[R1, #+1764]
    207                }
    208              }
    209            }
    210            else
    211            {
    212              if(EVB.SysTime > EVB.TransmitInterval + EVB.TransmitTimestamp &&
    213              !DMA_isOccupying(DMA_CH2))
    214              {
    215                EVB.makeOnePackge();
    216                EVB.TransmitTimestamp = EVB.SysTime;
    217                EVB.TX.startDMA_Transmit();
    218                EVB.TX.sendPackageCnt++;
    219              }
    220            }
    221          }
   \                     ??send_0: (+1)
   \   00000626   0xECBD 0x8B02      VPOP     {D8}
   \   0000062A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    222          

   \                                 In section .text, align 2, keep-with-next
    223          void EVB_SendUNum_3(int num)
    224          {
   \                     _Z14EVB_SendUNum_3i: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    225            EVB.TX.add(num/1000000);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable22_2  ;; 0xf4240
   \   00000008   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   0000000C   0x0001             MOVS     R1,R0
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000014   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    226            EVB.TX.add(num/10000%100);
   \   00000018   0xF242 0x7010      MOVW     R0,#+10000
   \   0000001C   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   00000020   0x2164             MOVS     R1,#+100
   \   00000022   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000026   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000002A   0x0001             MOVS     R1,R0
   \   0000002C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000032   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    227            EVB.TX.add(num/100%100);
   \   00000036   0x2064             MOVS     R0,#+100
   \   00000038   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   0000003C   0x2164             MOVS     R1,#+100
   \   0000003E   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000042   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000046   0x0001             MOVS     R1,R0
   \   00000048   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000004E   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    228          }
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
    229          

   \                                 In section .text, align 2, keep-with-next
    230          void EVB_SendUNum_2(int num)
    231          {
   \                     _Z14EVB_SendUNum_2i: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    232            EVB.TX.add(num/100);
   \   00000004   0x2064             MOVS     R0,#+100
   \   00000006   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000012   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    233            EVB.TX.add(num%100);
   \   00000016   0x2064             MOVS     R0,#+100
   \   00000018   0xFB94 0xF1F0      SDIV     R1,R4,R0
   \   0000001C   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   00000020   0x0001             MOVS     R1,R0
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000028   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    234          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    235          

   \                                 In section .text, align 2, keep-with-next
    236          void EVB_SendUNum_1(int num)
    237          {
   \                     _Z14EVB_SendUNum_1i: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    238            EVB.TX.add(num);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x0001             MOVS     R1,R0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000000E   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    239          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    240          

   \                                 In section .text, align 2, keep-with-next
    241          void EVB_SendSNum_3(int num)
    242          {
   \                     _Z14EVB_SendSNum_3i: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    243            if(num < -9999) num = -9999;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable22_4  ;; 0xffffd8f1
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xDA03             BGE.N    ??EVB_SendSNum_3_0
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable22_4  ;; 0xffffd8f1
   \   00000010   0x0004             MOVS     R4,R0
   \   00000012   0xE006             B.N      ??EVB_SendSNum_3_1
    244            else if(num > 9999) num = 9999;
   \                     ??EVB_SendSNum_3_0: (+1)
   \   00000014   0xF242 0x7010      MOVW     R0,#+10000
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xDB02             BLT.N    ??EVB_SendSNum_3_1
   \   0000001C   0xF242 0x700F      MOVW     R0,#+9999
   \   00000020   0x0004             MOVS     R4,R0
    245            if(num<0)
   \                     ??EVB_SendSNum_3_1: (+1)
   \   00000022   0x2C00             CMP      R4,#+0
   \   00000024   0xD506             BPL.N    ??EVB_SendSNum_3_2
    246            {
    247              num = -num;
   \   00000026   0x4264             RSBS     R4,R4,#+0
    248              EVB.TX.add('-');
   \   00000028   0x212D             MOVS     R1,#+45
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000002E   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
   \   00000032   0xE004             B.N      ??EVB_SendSNum_3_3
    249            }
    250            else
    251            {
    252              EVB.TX.add('+');
   \                     ??EVB_SendSNum_3_2: (+1)
   \   00000034   0x212B             MOVS     R1,#+43
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000003A   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    253            }
    254            EVB.TX.add(num/100);
   \                     ??EVB_SendSNum_3_3: (+1)
   \   0000003E   0x2064             MOVS     R0,#+100
   \   00000040   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   00000044   0x0001             MOVS     R1,R0
   \   00000046   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000004C   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    255            EVB.TX.add(num%100);
   \   00000050   0x2064             MOVS     R0,#+100
   \   00000052   0xFB94 0xF1F0      SDIV     R1,R4,R0
   \   00000056   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   0000005A   0x0001             MOVS     R1,R0
   \   0000005C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000062   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
    256          }
   \   00000066   0xBD10             POP      {R4,PC}          ;; return
    257          

   \                                 In section .text, align 2, keep-with-next
    258          void EVB_SendTable(int16* Table, __SendMode mode)
    259          {
   \                     _Z13EVB_SendTablePs10__SendMode: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    260            char TmpString[4];
    261            EVB_SendUNum_1(EVB_Command);
   \   00000008   0x200A             MOVS     R0,#+10
   \   0000000A   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
    262            EVB_SendUNum_1(mode);
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
    263            for(int i = 0; i < NUM * NUM; i++)
   \   00000016   0x2600             MOVS     R6,#+0
   \                     ??EVB_SendTable_0: (+1)
   \   00000018   0x2E31             CMP      R6,#+49
   \   0000001A   0xDA12             BGE.N    ??EVB_SendTable_1
    264            {
    265            //  sprintf (TmpString, "%03d", *(Table + i));
    266              EVB_SendStr((u8 *)TmpString);
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x.... 0x....      BL       _Z11EVB_SendStrPh
    267              if(i % NUM == NUM - 1)
   \   00000022   0x2007             MOVS     R0,#+7
   \   00000024   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   00000028   0xFB00 0x6011      MLS      R0,R0,R1,R6
   \   0000002C   0x2806             CMP      R0,#+6
   \   0000002E   0xD103             BNE.N    ??EVB_SendTable_2
    268              {
    269                EVB_SendUNum_1(13);//回车
   \   00000030   0x200D             MOVS     R0,#+13
   \   00000032   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
   \   00000036   0xE002             B.N      ??EVB_SendTable_3
    270              }
    271              else
    272              {
    273                EVB_SendUNum_1(32);//空格
   \                     ??EVB_SendTable_2: (+1)
   \   00000038   0x2020             MOVS     R0,#+32
   \   0000003A   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
    274              }
    275            }
   \                     ??EVB_SendTable_3: (+1)
   \   0000003E   0x1C76             ADDS     R6,R6,#+1
   \   00000040   0xE7EA             B.N      ??EVB_SendTable_0
    276          }
   \                     ??EVB_SendTable_1: (+1)
   \   00000042   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    277          
    278          

   \                                 In section .text, align 2, keep-with-next
    279          void EVB_SendStr(u8 *str)
    280          {
   \                     _Z11EVB_SendStrPh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    281              while(*str)
   \                     ??EVB_SendStr_0: (+1)
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD006             BEQ.N    ??EVB_SendStr_1
    282              {
    283                 EVB.TX.add(*str++);
   \   0000000A   0x7821             LDRB     R1,[R4, #+0]
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000010   0x.... 0x....      BL       _ZN4EVB_3TX_3addEc
   \   00000014   0x1C64             ADDS     R4,R4,#+1
   \   00000016   0xE7F5             B.N      ??EVB_SendStr_0
    284              }
    285          }
   \                     ??EVB_SendStr_1: (+1)
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    286          

   \                                 In section .text, align 2, keep-with-next
    287          void EVB_::makeOnePackge()
    288          {
   \                     _ZN4EVB_13makeOnePackgeEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    289            EVB.TX.clear();
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000008   0x.... 0x....      BL       _ZN4EVB_3TX_5clearEv
    290            if(EVB.SendMode == EVB_SendMode_Normal)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000010   0x7E00             LDRB     R0,[R0, #+24]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xF040 0x809C      BNE.W    ??makeOnePackge_0
    291            {
    292              switch(EVB.FunctionMode)
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   0000001C   0x7E40             LDRB     R0,[R0, #+25]
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD00D             BEQ.N    ??makeOnePackge_1
   \   00000022   0xD32C             BCC.N    ??makeOnePackge_2
   \   00000024   0x2803             CMP      R0,#+3
   \   00000026   0xD012             BEQ.N    ??makeOnePackge_3
   \   00000028   0xD30D             BCC.N    ??makeOnePackge_4
   \   0000002A   0x2805             CMP      R0,#+5
   \   0000002C   0xD013             BEQ.N    ??makeOnePackge_5
   \   0000002E   0xD30E             BCC.N    ??makeOnePackge_3
   \   00000030   0x2807             CMP      R0,#+7
   \   00000032   0xD018             BEQ.N    ??makeOnePackge_6
   \   00000034   0xD313             BCC.N    ??makeOnePackge_7
   \   00000036   0x2809             CMP      R0,#+9
   \   00000038   0xD01D             BEQ.N    ??makeOnePackge_8
   \   0000003A   0xD318             BCC.N    ??makeOnePackge_9
   \   0000003C   0xE01F             B.N      ??makeOnePackge_2
    293              {
    294                case EVB_Servo:           EVB_SendUNum_1(1);  break;
   \                     ??makeOnePackge_1: (+1)
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
   \   00000044   0xE01E             B.N      ??makeOnePackge_10
    295                case EVB_Spd:             EVB_SendUNum_1(2);  break;
   \                     ??makeOnePackge_4: (+1)
   \   00000046   0x2002             MOVS     R0,#+2
   \   00000048   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
   \   0000004C   0xE01A             B.N      ??makeOnePackge_10
    296                case EVB_KpTable:
    297                case EVB_KdTable:         EVB_SendUNum_1(3);  break;
   \                     ??makeOnePackge_3: (+1)
   \   0000004E   0x2003             MOVS     R0,#+3
   \   00000050   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
   \   00000054   0xE016             B.N      ??makeOnePackge_10
    298                case EVB_SpdTable:        EVB_SendUNum_1(5);  break;
   \                     ??makeOnePackge_5: (+1)
   \   00000056   0x2005             MOVS     R0,#+5
   \   00000058   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
   \   0000005C   0xE012             B.N      ??makeOnePackge_10
    299                case EVB_OffsetBoundTable:EVB_SendUNum_1(6);  break;
   \                     ??makeOnePackge_7: (+1)
   \   0000005E   0x2006             MOVS     R0,#+6
   \   00000060   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
   \   00000064   0xE00E             B.N      ??makeOnePackge_10
    300                case EVB_Sensor:          EVB_SendUNum_1(7);  break;
   \                     ??makeOnePackge_6: (+1)
   \   00000066   0x2007             MOVS     R0,#+7
   \   00000068   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
   \   0000006C   0xE00A             B.N      ??makeOnePackge_10
    301                case EVB_Battle:          EVB_SendUNum_1(8);  break;
   \                     ??makeOnePackge_9: (+1)
   \   0000006E   0x2008             MOVS     R0,#+8
   \   00000070   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
   \   00000074   0xE006             B.N      ??makeOnePackge_10
    302                case EVB_RemoteControl:   EVB_SendUNum_1(9);  break;
   \                     ??makeOnePackge_8: (+1)
   \   00000076   0x2009             MOVS     R0,#+9
   \   00000078   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
   \   0000007C   0xE002             B.N      ??makeOnePackge_10
    303                default:                  EVB_SendUNum_1(0);
   \                     ??makeOnePackge_2: (+1)
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
    304              }
    305          
    306              
    307            ///////////////////////变量需要修改///////////////////////
    308              extern int myYaw, myYaw1, myYaw2;
    309          
    310          //  EVB_SendSNum_3((int)(MPU6000.gyro_z*10));
    311          //  EVB_SendSNum_3(angleY.output);
    312          //  EVB_SendSNum_3(gyroY.output * 10);
    313          //  EVB_SendSNum_3(MPU6000.accel_z);
    314          //  EVB_SendSNum_3(roror4);
    315          extern float compensation;
    316          
    317          
    318          //    EVB_SendSNum_3(Navigation->angleToScreenJumpF * 100);
    319          //    EVB_SendSNum_3(UltrasoundUART->distance1 * 1000);
    320           //     EVB_SendSNum_3(videoStation->positionX_raw);
    321           //     EVB_SendSNum_3(videoStation->positionY_raw);
    322            //  EVB_SendSNum_3(UltrasoundUART->position.z * 100);
    323            //  EVB_SendSNum_3(UltrasoundUART->vel.z * 100);
    324          //    EVB_SendSNum_3(UltrasoundUART->distance1 * 1000);
    325          //    EVB_SendSNum_3(UltrasoundUART->distance2 * 1000);
    326          ////    EVB_SendSNum_3(flightMode->takeOff.state * 100);
    327          //    EVB_SendSNum_3(UltrasoundUART->distance3 * 1000);
    328           //   EVB_SendSNum_3(UltrasoundUART->distanceRaw1 * 1000);
    329           //   EVB_SendSNum_3(UWB->dis[0] * 100);
    330             // EVB_SendSNum_3(UWB->position.y * 100);
    331             // EVB_SendSNum_3(UWB->vel.y * 100);
    332             // EVB_SendSNum_3(UWB->positionF.y * 100);
    333              //EVB_SendSNum_3(t - UWB->byte_lastTime);
    334          //   EVB_SendSNum_3(UltrasoundUART->distanceRaw2 * 1000);
    335           //  EVB_SendSNum_3(UltrasoundUART->distanceRaw3 * 1000);
    336          //    EVB_SendSNum_3(videoStation->valid * 1000);
    337           //   EVB_SendSNum_3(videoStation->positionX_A * 1000);
    338           //   EVB_SendSNum_3(videoStation->positionY_A * 1000);
    339           //   EVB_SendSNum_3(videoStation->position.y * 1000);
    340            //  EVB_SendSNum_3(videoStation->position.z * 1000);
    341            //  EVB_SendSNum_3(dis_set_hight * 100);
    342          
    343          //    EVB_SendSNum_3(GPS->position.x * 100);
    344          //    EVB_SendSNum_3(GPS->position.y * 100);
    345           //   EVB_SendSNum_3(EKF_AHRS1->fusion.position.z * 100);
    346          //    EVB_SendSNum_3(EKF_AHRS1->fusion.vel.x * 100);
    347          //    EVB_SendSNum_3(EKF_AHRS1->fusion.vel.y * 100);
    348          //    EVB_SendSNum_3(positionX.referance * 100);
    349          //    EVB_SendSNum_3(positionY.referance * 100);
    350            //  EVB_SendSNum_3(positionX_vel.referance * 100);
    351            //  EVB_SendSNum_3(positionY_vel.referance * 100);
    352          //    EVB_SendSNum_3(GPS->vel.x * 100);
    353            //  EVB_SendSNum_3(GPS->vel.y * 100);
    354              EVB_SendSNum_3(angleX.referance * 10);
   \                     ??makeOnePackge_10: (+1)
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable22_6
   \   00000088   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000008C   0xEEF2 0x0A04      VMOV.F32 S1,#10.0
   \   00000090   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000094   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000098   0xEE10 0x0A10      VMOV     R0,S0
   \   0000009C   0x.... 0x....      BL       _Z14EVB_SendSNum_3i
    355              EVB_SendSNum_3(angleY.referance * 10);
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable22_7
   \   000000A4   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000A8   0xEEF2 0x0A04      VMOV.F32 S1,#10.0
   \   000000AC   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000000B0   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000B4   0xEE10 0x0A10      VMOV     R0,S0
   \   000000B8   0x.... 0x....      BL       _Z14EVB_SendSNum_3i
    356              
    357          //    EVB_SendSNum_3((GPS->status - '0') * 100);
    358          //    EVB_SendSNum_3((GPS->positionFilterX.valid + GPS->positionFilterY.valid) * 100);
    359              
    360          //    EVB_SendSNum_3(roll1 * 10);
    361          // //   EVB_SendSNum_3(roll3 * 10);
    362          ////    EVB_SendSNum_3(pitch1 * 10);
    363          //    EVB_SendSNum_3(pitch1 * 10);
    364          //        EVB_SendSNum_3(yaw2 * 10);
    365          //        EVB_SendSNum_3(yaw1 * 10);
    366          //    EVB_SendSNum_3(yaw3 * 10);
    367          //    EVB_SendSNum_3(yaw4 * 10);
    368           //   EVB_SendSNum_3(gyroY.referance * 10);
    369            //  EVB_SendSNum_3(gyroY.outputP * 100);
    370          //    EVB_SendSNum_3(MPU6000.gyro_x * 100);
    371          //    EVB_SendSNum_3(MPU6000.gyro_y * 100);
    372          //    EVB_SendSNum_3(MPU6000.gyro_x_f * 100);
    373           //   EVB_SendSNum_3(gyroY.outputI * 100);
    374             // EVB_SendSNum_3(gyroY.outputD * 100);
    375          //    EVB_SendSNum_3(GPS->vel.y * 1000);
    376          //    EVB_SendSNum_3(Navigation->angleToScreen * 100);
    377          //    EVB_SendSNum_3(Navigation->angleToScreen_CF * 100);
    378            //    EVB_SendSNum_3(UltrasoundUART->distanceFilter2.valid * 100);
    379            //    EVB_SendSNum_3(UltrasoundUART->distanceFilter3.valid * 100);
    380               //EVB_SendSNum_3(positionX.output * 100);
    381             //   EVB_SendSNum_3(positionX.outputP * 100);
    382             //   EVB_SendSNum_3(positionX.outputD * 100);
    383          //    EVB_SendSNum_3(IMU_acc_E.y * 100);
    384          //    EVB_SendSNum_3(waterGun->servoControl2);
    385          //    EVB_SendSNum_3(accel_E_H_y.sum * 100);
    386          //    EVB_SendSNum_3(UltrasoundUART->byteInterval);
    387           //   EVB_SendSNum_3(t - UltrasoundUART->lastValidTime1);
    388          //    EVB_SendSNum_3(t - UltrasoundUART->lastValidTime2);
    389          //    EVB_SendSNum_3(t - UltrasoundUART->lastValidTime3);
    390              
    391          //  EVB_SendSNum_3(pitch1 * 100);
    392          //  EVB_SendSNum_3(roll1 * 100);
    393            //EVB_SendSNum_3(positionX_vel.output * 100);
    394            //EVB_SendSNum_3(positionY_vel.output * 100);
    395          //  EVB_SendSNum_3(yaw1 * 10);
    396          
    397            EVB_SendSNum_3(roror1);
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable22_8
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0x.... 0x....      BL       _Z14EVB_SendSNum_3i
    398            EVB_SendSNum_3(roror2);
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable22_9
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0x.... 0x....      BL       _Z14EVB_SendSNum_3i
    399            EVB_SendSNum_3(roror3);
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable22_10
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0x.... 0x....      BL       _Z14EVB_SendSNum_3i
    400            EVB_SendSNum_3(roror4);
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable22_11
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0x.... 0x....      BL       _Z14EVB_SendSNum_3i
    401          
    402          //  EVB_SendSNum_3(0);
    403          //  EVB_SendSNum_3(0);
    404          
    405              for(int i = 0; i < 10; i++)
   \   000000E4   0x2000             MOVS     R0,#+0
   \                     ??makeOnePackge_11: (+1)
   \   000000E6   0x280A             CMP      R0,#+10
   \   000000E8   0xDA01             BGE.N    ??makeOnePackge_12
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0xE7FB             B.N      ??makeOnePackge_11
    406              {
    407              //  EVB_SendSNum_3(-10000 + t * 5 + i);
    408              }
    409          //  EVB_SendSNum_3(MPU6000.gyro_x * 10);
    410          //  EVB_SendSNum_3(pitch * 10);
    411          //  EVB_SendSNum_3(yaw * 10);
    412          
    413          //  EVB_SendSNum_3(angleX.output);
    414          //  EVB_SendSNum_3(gyroX.output);
    415          //  
    416          //  EVB_SendSNum_3(gyroX.outputD);
    417          //  EVB_SendSNum_3(gyroX.outputP);
    418            //EVB_SendSNum_3(roror4);
    419            
    420          //  EVB_SendSNum_3(roror3);
    421          //  EVB_SendSNum_3(roror4);
    422            
    423          //  EVB_SendSNum_3(controlOutput.D1);
    424          //  EVB_SendSNum_3(controlOutput.D2);
    425          //  EVB_SendSNum_3(controlOutput.D3);
    426          //  EVB_SendSNum_3(Diffa.diff);
    427            
    428          //  EVB_SendSNum_3(EVB.Pitch);
    429          //  EVB_SendSNum_3(angleY.output);
    430          //  EVB_SendSNum_3(gyroY.output);
    431          //  EVB_SendSNum_3(gyroY.D);
    432            
    433            
    434            
    435            EVB_SendUNum_1(0);
   \                     ??makeOnePackge_12: (+1)
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
    436            EVB_SendUNum_1(EVB.Row_FuzzyTable);
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000000F8   0xF8D0 0x0708      LDR      R0,[R0, #+1800]
   \   000000FC   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
    437            EVB_SendUNum_1(EVB.Column_FuzzyTable);
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000104   0xF8D0 0x070C      LDR      R0,[R0, #+1804]
   \   00000108   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
    438            EVB_SendUNum_1(0); //忽略两位!!
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
    439            EVB_SendUNum_1(0);
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
    440          
    441            
    442            if(EVB.FunctionMode==7)
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   0000011C   0x7E40             LDRB     R0,[R0, #+25]
   \   0000011E   0x2807             CMP      R0,#+7
   \   00000120   0xD10E             BNE.N    ??makeOnePackge_13
    443            {
    444               EVB_SendUNum_2(0);
   \   00000122   0x2000             MOVS     R0,#+0
   \   00000124   0x.... 0x....      BL       _Z14EVB_SendUNum_2i
    445               EVB_SendUNum_2(0);
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x.... 0x....      BL       _Z14EVB_SendUNum_2i
    446               EVB_SendUNum_2(0);
   \   0000012E   0x2000             MOVS     R0,#+0
   \   00000130   0x.... 0x....      BL       _Z14EVB_SendUNum_2i
    447               EVB_SendUNum_2(0);
   \   00000134   0x2000             MOVS     R0,#+0
   \   00000136   0x.... 0x....      BL       _Z14EVB_SendUNum_2i
    448               EVB_SendUNum_2(0); 
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x.... 0x....      BL       _Z14EVB_SendUNum_2i
    449            }  
    450            ///////////////////////--------///////////////////////
    451            
    452            EVB_SendUNum_2(*EVB.SupplyVoltage);
   \                     ??makeOnePackge_13: (+1)
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000144   0xF8D0 0x0728      LDR      R0,[R0, #+1832]
   \   00000148   0x6800             LDR      R0,[R0, #+0]
   \   0000014A   0x.... 0x....      BL       _Z14EVB_SendUNum_2i
   \   0000014E   0xE03B             B.N      ??makeOnePackge_14
    453            }
    454            else if(EVB.SendMode == EVB_SendMode_KpTable)
   \                     ??makeOnePackge_0: (+1)
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000154   0x7E00             LDRB     R0,[R0, #+24]
   \   00000156   0x2801             CMP      R0,#+1
   \   00000158   0xD10B             BNE.N    ??makeOnePackge_15
    455            {
    456              EVB_SendTable(EVB.KpTable, EVB_SendMode_KpTable);
   \   0000015A   0x2101             MOVS     R1,#+1
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000160   0xF8D0 0x072C      LDR      R0,[R0, #+1836]
   \   00000164   0x.... 0x....      BL       _Z13EVB_SendTablePs10__SendMode
    457              EVB.SendMode = EVB_SendMode_Normal;
   \   00000168   0x2000             MOVS     R0,#+0
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   0000016E   0x7608             STRB     R0,[R1, #+24]
   \   00000170   0xE02A             B.N      ??makeOnePackge_14
    458            }
    459            else if(EVB.SendMode == EVB_SendMode_KdTable)
   \                     ??makeOnePackge_15: (+1)
   \   00000172   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000176   0x7E00             LDRB     R0,[R0, #+24]
   \   00000178   0x2802             CMP      R0,#+2
   \   0000017A   0xD10B             BNE.N    ??makeOnePackge_16
    460            {
    461              EVB_SendTable(EVB.KdTable, EVB_SendMode_KdTable);
   \   0000017C   0x2102             MOVS     R1,#+2
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000182   0xF8D0 0x0730      LDR      R0,[R0, #+1840]
   \   00000186   0x.... 0x....      BL       _Z13EVB_SendTablePs10__SendMode
    462              EVB.SendMode = EVB_SendMode_Normal;
   \   0000018A   0x2000             MOVS     R0,#+0
   \   0000018C   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000190   0x7608             STRB     R0,[R1, #+24]
   \   00000192   0xE019             B.N      ??makeOnePackge_14
    463            }
    464            else if(EVB.SendMode == EVB_SendMode_SpdTable)
   \                     ??makeOnePackge_16: (+1)
   \   00000194   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000198   0x7E00             LDRB     R0,[R0, #+24]
   \   0000019A   0x2803             CMP      R0,#+3
   \   0000019C   0xD10B             BNE.N    ??makeOnePackge_17
    465            {
    466              EVB_SendTable(EVB.SpdTable, EVB_SendMode_SpdTable);
   \   0000019E   0x2103             MOVS     R1,#+3
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000001A4   0xF8D0 0x0734      LDR      R0,[R0, #+1844]
   \   000001A8   0x.... 0x....      BL       _Z13EVB_SendTablePs10__SendMode
    467              EVB.SendMode =EVB_SendMode_Normal;
   \   000001AC   0x2000             MOVS     R0,#+0
   \   000001AE   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   000001B2   0x7608             STRB     R0,[R1, #+24]
   \   000001B4   0xE008             B.N      ??makeOnePackge_14
    468            }
    469            else if(EVB.SendMode == EVB_SendMode_VERSION)
   \                     ??makeOnePackge_17: (+1)
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000001BA   0x7E00             LDRB     R0,[R0, #+24]
   \   000001BC   0x2804             CMP      R0,#+4
   \   000001BE   0xD103             BNE.N    ??makeOnePackge_18
    470            {
    471              EVB_SendUNum_1(EVB_VERSION);
   \   000001C0   0x2064             MOVS     R0,#+100
   \   000001C2   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
   \   000001C6   0xE7FF             B.N      ??makeOnePackge_14
    472            }
    473            else if(EVB.SendMode == EVB_SendMode_FnINIT)
    474            {
    475              
    476            }
    477            EVB_SendUNum_1(EVB_END);
   \                     ??makeOnePackge_18: (+1)
   \                     ??makeOnePackge_14: (+1)
   \   000001C8   0x2065             MOVS     R0,#+101
   \   000001CA   0x.... 0x....      BL       _Z14EVB_SendUNum_1i
    478          
    479          }
   \   000001CE   0xBD10             POP      {R4,PC}          ;; return
    480          

   \                                 In section .text, align 2, keep-with-next
    481          void EVB_::TX_::startDMA_Transmit()
    482          {
    483            //DMA_changeLength(DMA_CH2, EVB.TX.index);
    484            
    485            //主的计数次数（major iteration count）达到后，重新调整源地址
    486            //DMA0->TCD[chx].SLAST = DMA_SLAST_SLAST(-length);
    487            
    488            //调整源地址
    489            DMA0->TCD[DMA_CH2].SADDR = DMA_SADDR_SADDR(EVB.TX.data);
   \                     _ZN4EVB_3TX_17startDMA_TransmitEv: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable12_2
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable22_12  ;; 0x40009040
   \   00000006   0x6011             STR      R1,[R2, #+0]
    490            
    491            //设置主循环计数器 current major loop count
    492            DMA0->TCD[DMA_CH2].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(EVB.TX.index);
   \   00000008   0x....             LDR.N    R1,??DataTable12
   \   0000000A   0xF8D1 0x16BC      LDR      R1,[R1, #+1724]
   \   0000000E   0x0449             LSLS     R1,R1,#+17       ;; ZeroExtS R1,R1,#+17,#+17
   \   00000010   0x0C49             LSRS     R1,R1,#+17
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable22_13  ;; 0x40009056
   \   00000016   0x8011             STRH     R1,[R2, #+0]
    493            
    494            //起始循环计数器，当主循环计数器为零的时候，将装载起始循环计数器的值
    495            DMA0->TCD[DMA_CH2].BITER_ELINKNO = DMA_CITER_ELINKNO_CITER(EVB.TX.index);
   \   00000018   0x....             LDR.N    R1,??DataTable12
   \   0000001A   0xF8D1 0x16BC      LDR      R1,[R1, #+1724]
   \   0000001E   0x0449             LSLS     R1,R1,#+17       ;; ZeroExtS R1,R1,#+17,#+17
   \   00000020   0x0C49             LSRS     R1,R1,#+17
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable22_14  ;; 0x4000905e
   \   00000026   0x8011             STRH     R1,[R2, #+0]
    496            
    497            DMA_EnableReq(DMA_CH2);
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable22_15  ;; 0x4000800c
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0xF051 0x0104      ORRS     R1,R1,#0x4
   \   00000032   0x.... 0x....      LDR.W    R2,??DataTable22_15  ;; 0x4000800c
   \   00000036   0x6011             STR      R1,[R2, #+0]
    498          }
   \   00000038   0x4770             BX       LR               ;; return
    499          
    500          

   \                                 In section .text, align 2, keep-with-next
    501          void EVB_ReceiveOneByte(char dataTmp)
    502          {
   \                     _Z18EVB_ReceiveOneBytec: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    503            EVB.RXD[EVB.RXD_Iterator] = dataTmp;
   \   00000004   0x....             LDR.N    R0,??DataTable12
   \   00000006   0x....             LDR.N    R1,??DataTable12
   \   00000008   0xF8D1 0x15FC      LDR      R1,[R1, #+1532]
   \   0000000C   0x4408             ADD      R0,R0,R1
   \   0000000E   0xF880 0x4020      STRB     R4,[R0, #+32]
    504            if(EVB.RXD[EVB.RXD_Iterator] == EVB_END)
   \   00000012   0x....             LDR.N    R0,??DataTable12
   \   00000014   0x....             LDR.N    R1,??DataTable12
   \   00000016   0xF8D1 0x15FC      LDR      R1,[R1, #+1532]
   \   0000001A   0x4408             ADD      R0,R0,R1
   \   0000001C   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   00000020   0x2865             CMP      R0,#+101
   \   00000022   0xD11A             BNE.N    ??EVB_ReceiveOneByte_0
    505            {
    506              if(EVB_RX_Check(0) == true)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       _Z12EVB_RX_Checki
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xD101             BNE.N    ??EVB_ReceiveOneByte_1
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??EVB_ReceiveOneByte_2
   \                     ??EVB_ReceiveOneByte_1: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \                     ??EVB_ReceiveOneByte_2: (+1)
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD003             BEQ.N    ??EVB_ReceiveOneByte_3
    507              {
    508                EVB_Unpack(0);
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       _Z10EVB_Unpacki
   \   00000040   0xE012             B.N      ??EVB_ReceiveOneByte_4
    509              }
    510              else
    511              {
    512                EVB.RxError++;
   \                     ??EVB_ReceiveOneByte_3: (+1)
   \   00000042   0x....             LDR.N    R0,??DataTable12
   \   00000044   0xF8D0 0x0654      LDR      R0,[R0, #+1620]
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x....             LDR.N    R1,??DataTable12
   \   0000004C   0xF8C1 0x0654      STR      R0,[R1, #+1620]
    513                EVB.RXD_Iterator = 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             LDR.N    R1,??DataTable12
   \   00000054   0xF8C1 0x05FC      STR      R0,[R1, #+1532]
   \   00000058   0xE006             B.N      ??EVB_ReceiveOneByte_4
    514              }
    515            }
    516            else
    517            {
    518              EVB.RXD_Iterator++;
   \                     ??EVB_ReceiveOneByte_0: (+1)
   \   0000005A   0x....             LDR.N    R0,??DataTable12
   \   0000005C   0xF8D0 0x05FC      LDR      R0,[R0, #+1532]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \   00000062   0x....             LDR.N    R1,??DataTable12
   \   00000064   0xF8C1 0x05FC      STR      R0,[R1, #+1532]
    519            }
    520          }
   \                     ??EVB_ReceiveOneByte_4: (+1)
   \   00000068   0xBD10             POP      {R4,PC}          ;; return
    521          

   \                                 In section .text, align 2, keep-with-next
    522          void EVB_DMA_Receive()
    523          {
   \                     _Z15EVB_DMA_Receivev: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    524            int i0 = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    525            int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    526            int address0 = (DMA0->TCD[DMA_CH1].DADDR) - (uint32)&(EVB.RXD[0]);
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable22_16  ;; 0x40009030
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      LDR.W    R6,??DataTable22_17
   \   00000010   0x1B86             SUBS     R6,R0,R6
    527            int moveLength = 0;
   \   00000012   0x2700             MOVS     R7,#+0
    528            static int address00;
    529            if(address0 - address00 > 0)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable22_18
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x1A30             SUBS     R0,R6,R0
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xDB06             BLT.N    ??EVB_DMA_Receive_0
    530            {
    531              address00 = address0;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable22_18
   \   00000024   0x6006             STR      R6,[R0, #+0]
    532              EVB.LastPackageTime = t;
   \   00000026   0x....             LDR.N    R0,??DataTable12_1
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x....             LDR.N    R1,??DataTable12
   \   0000002C   0x60C8             STR      R0,[R1, #+12]
    533            }
    534            for(; i < address0 ;i++)
   \                     ??EVB_DMA_Receive_0: (+1)
   \   0000002E   0x42B5             CMP      R5,R6
   \   00000030   0xDA28             BGE.N    ??EVB_DMA_Receive_1
    535            {
    536              for(; EVB.RXD[i] != EVB_END && i < address0; i++)
   \                     ??EVB_DMA_Receive_2: (+1)
   \   00000032   0x....             LDR.N    R0,??DataTable12
   \   00000034   0x4428             ADD      R0,R0,R5
   \   00000036   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   0000003A   0x2865             CMP      R0,#+101
   \   0000003C   0xD003             BEQ.N    ??EVB_DMA_Receive_3
   \   0000003E   0x42B5             CMP      R5,R6
   \   00000040   0xDA01             BGE.N    ??EVB_DMA_Receive_3
   \   00000042   0x1C6D             ADDS     R5,R5,#+1
   \   00000044   0xE7F5             B.N      ??EVB_DMA_Receive_2
    537              {
    538              }
    539              if( EVB.RXD[i] == EVB_END )
   \                     ??EVB_DMA_Receive_3: (+1)
   \   00000046   0x....             LDR.N    R0,??DataTable12
   \   00000048   0x4428             ADD      R0,R0,R5
   \   0000004A   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   0000004E   0x2865             CMP      R0,#+101
   \   00000050   0xD116             BNE.N    ??EVB_DMA_Receive_4
    540              {
    541                EVB.LastPackageTime = t;
   \   00000052   0x....             LDR.N    R0,??DataTable12_1
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x....             LDR.N    R1,??DataTable12
   \   00000058   0x60C8             STR      R0,[R1, #+12]
    542                EVB.RXD_Iterator = i;
   \   0000005A   0x....             LDR.N    R0,??DataTable12
   \   0000005C   0xF8C0 0x55FC      STR      R5,[R0, #+1532]
    543                if(EVB_RX_Check(i0) == true)
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x.... 0x....      BL       _Z12EVB_RX_Checki
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xD101             BNE.N    ??EVB_DMA_Receive_5
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE000             B.N      ??EVB_DMA_Receive_6
   \                     ??EVB_DMA_Receive_5: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \                     ??EVB_DMA_Receive_6: (+1)
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD002             BEQ.N    ??EVB_DMA_Receive_7
    544                {
    545                  EVB_Unpack(i0);
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0x.... 0x....      BL       _Z10EVB_Unpacki
    546                }
    547                i0 = i + 1;
   \                     ??EVB_DMA_Receive_7: (+1)
   \   0000007C   0x1C68             ADDS     R0,R5,#+1
   \   0000007E   0x0004             MOVS     R4,R0
    548              }
    549            }
   \                     ??EVB_DMA_Receive_4: (+1)
   \   00000080   0x1C6D             ADDS     R5,R5,#+1
   \   00000082   0xE7D4             B.N      ??EVB_DMA_Receive_0
    550            moveLength = (DMA0->TCD[DMA_CH1].DADDR - (uint32)&(EVB.RXD[0])) - i0;
   \                     ??EVB_DMA_Receive_1: (+1)
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable22_16  ;; 0x40009030
   \   00000088   0x6801             LDR      R1,[R0, #+0]
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable22_17
   \   0000008E   0x1A08             SUBS     R0,R1,R0
   \   00000090   0x1B00             SUBS     R0,R0,R4
    551          
    552            if(moveLength < 0) moveLength = 0;
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD501             BPL.N    ??EVB_DMA_Receive_8
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x0008             MOVS     R0,R1
    553            DMA_LoadDstAddr(DMA_CH1, (uint32)(&(EVB.RXD[0]) + moveLength) );
   \                     ??EVB_DMA_Receive_8: (+1)
   \   0000009A   0x....             LDR.N    R1,??DataTable12
   \   0000009C   0x4401             ADD      R1,R1,R0
   \   0000009E   0x3120             ADDS     R1,R1,#+32
   \   000000A0   0x.... 0x....      LDR.W    R2,??DataTable22_16  ;; 0x40009030
   \   000000A4   0x6011             STR      R1,[R2, #+0]
    554            for(i = 0; i < moveLength; i++)
   \   000000A6   0x2100             MOVS     R1,#+0
   \                     ??EVB_DMA_Receive_9: (+1)
   \   000000A8   0x4281             CMP      R1,R0
   \   000000AA   0xDA0A             BGE.N    ??EVB_DMA_Receive_10
    555            {
    556              EVB.RXD[i] = EVB.RXD[i0 + i];
   \   000000AC   0x....             LDR.N    R2,??DataTable12
   \   000000AE   0x190B             ADDS     R3,R1,R4
   \   000000B0   0x441A             ADD      R2,R2,R3
   \   000000B2   0xF892 0x2020      LDRB     R2,[R2, #+32]
   \   000000B6   0x....             LDR.N    R3,??DataTable12
   \   000000B8   0x440B             ADD      R3,R3,R1
   \   000000BA   0xF883 0x2020      STRB     R2,[R3, #+32]
    557            }
   \   000000BE   0x1C49             ADDS     R1,R1,#+1
   \   000000C0   0xE7F2             B.N      ??EVB_DMA_Receive_9
    558            for(i = DMA0->TCD[DMA_CH1].DADDR - (uint32)&(EVB.RXD[0]); i < address0; i++) //1、地址4字节 但是uart本身是单字节接收 每次接收+1     2、换成 memset(uartData + moveLength, 0, 150 * sizeof(char));
   \                     ??EVB_DMA_Receive_10: (+1)
   \   000000C2   0x.... 0x....      LDR.W    R2,??DataTable22_16  ;; 0x40009030
   \   000000C6   0x6813             LDR      R3,[R2, #+0]
   \   000000C8   0x.... 0x....      LDR.W    R2,??DataTable22_17
   \   000000CC   0x1A9A             SUBS     R2,R3,R2
   \                     ??EVB_DMA_Receive_11: (+1)
   \   000000CE   0x42B2             CMP      R2,R6
   \   000000D0   0xDA06             BGE.N    ??EVB_DMA_Receive_12
    559            {
    560              EVB.RXD[i] = 0;
   \   000000D2   0x2100             MOVS     R1,#+0
   \   000000D4   0x....             LDR.N    R3,??DataTable12
   \   000000D6   0x4413             ADD      R3,R3,R2
   \   000000D8   0xF883 0x1020      STRB     R1,[R3, #+32]
    561            }
   \   000000DC   0x1C52             ADDS     R2,R2,#+1
   \   000000DE   0xE7F6             B.N      ??EVB_DMA_Receive_11
    562          }
   \                     ??EVB_DMA_Receive_12: (+1)
   \   000000E0   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .bss, align 4
   \                     `EVB_DMA_Receive()::address00`:
   \   00000000                      DS8 4
    563          
    564          

   \                                 In section .text, align 2, keep-with-next
    565          bool EVB_RX_Check(int start)
    566          {
   \                     _Z12EVB_RX_Checki: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    567            if(EVB.RXD[0] > FUNCTION_NUM_MAX)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000006   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   0000000A   0x2815             CMP      R0,#+21
   \   0000000C   0xDB01             BLT.N    ??EVB_RX_Check_0
    568            {
    569              return false;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE013             B.N      ??EVB_RX_Check_1
    570            }
    571            else
    572            {
    573              if(EVB.RXD_Iterator - start == EVB.RXD_PackageLength[EVB.RXD[0]])
   \                     ??EVB_RX_Check_0: (+1)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000016   0xF8D0 0x05FC      LDR      R0,[R0, #+1532]
   \   0000001A   0x1A40             SUBS     R0,R0,R1
   \   0000001C   0x.... 0x....      LDR.W    R2,??DataTable22_5
   \   00000020   0x.... 0x....      LDR.W    R3,??DataTable22_5
   \   00000024   0xF893 0x3020      LDRB     R3,[R3, #+32]
   \   00000028   0xEB02 0x0283      ADD      R2,R2,R3, LSL #+2
   \   0000002C   0xF8D2 0x2600      LDR      R2,[R2, #+1536]
   \   00000030   0x4290             CMP      R0,R2
   \   00000032   0xD101             BNE.N    ??EVB_RX_Check_2
    574              {
    575                 return true;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xE000             B.N      ??EVB_RX_Check_1
    576              }
    577              else
    578              {
    579                return false;
   \                     ??EVB_RX_Check_2: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \                     ??EVB_RX_Check_1: (+1)
   \   0000003A   0x4770             BX       LR               ;; return
    580              }
    581            }
    582          }
    583          
    584          

   \                                 In section .text, align 2, keep-with-next
    585          void EVB_Unpack(int start)
    586          {
   \                     _Z10EVB_Unpacki: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
    587              int row    = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    588              int column = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    589              int i1     = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    590            //  int tmpNum = 0;
    591              
    592              if(EVB.RXD[start] == EVB_Servo)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   0000000E   0x4428             ADD      R0,R0,R5
   \   00000010   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD133             BNE.N    ??EVB_Unpack_0
    593              {
    594                EVB.FunctionMode       = EVB_Servo;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   0000001E   0x7648             STRB     R0,[R1, #+25]
    595          
    596                EVB.AngleDirectControl = EVB_atoi(EVB.RXD + 1 + start, 4);
   \   00000020   0x2104             MOVS     R1,#+4
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000026   0x4428             ADD      R0,R0,R5
   \   00000028   0x3021             ADDS     R0,R0,#+33
   \   0000002A   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000032   0xF8C1 0x06EC      STR      R0,[R1, #+1772]
    597                *EVB.AngleMin          = EVB_atoi(EVB.RXD + 5 + start, 4);
   \   00000036   0x2104             MOVS     R1,#+4
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   0000003C   0x4428             ADD      R0,R0,R5
   \   0000003E   0x3025             ADDS     R0,R0,#+37
   \   00000040   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000048   0xF8D1 0x171C      LDR      R1,[R1, #+1820]
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    598                *EVB.AngleMid          = EVB_atoi(EVB.RXD + 9 + start, 4);
   \   0000004E   0x2104             MOVS     R1,#+4
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000054   0x4428             ADD      R0,R0,R5
   \   00000056   0x3029             ADDS     R0,R0,#+41
   \   00000058   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000060   0xF8D1 0x1720      LDR      R1,[R1, #+1824]
   \   00000064   0x6008             STR      R0,[R1, #+0]
    599                *EVB.AngleMax          = EVB_atoi(EVB.RXD + 13 + start, 4);
   \   00000066   0x2104             MOVS     R1,#+4
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   0000006C   0x4428             ADD      R0,R0,R5
   \   0000006E   0x302D             ADDS     R0,R0,#+45
   \   00000070   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000078   0xF8D1 0x1724      LDR      R1,[R1, #+1828]
   \   0000007C   0x6008             STR      R0,[R1, #+0]
   \   0000007E   0xE14A             B.N      ??EVB_Unpack_1
    600              } 
    601              else if(EVB.RXD[start] == EVB_Spd)
   \                     ??EVB_Unpack_0: (+1)
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000084   0x4428             ADD      R0,R0,R5
   \   00000086   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   0000008A   0x2802             CMP      R0,#+2
   \   0000008C   0xD133             BNE.N    ??EVB_Unpack_2
    602              {
    603                EVB.FunctionMode = EVB_Spd;
   \   0000008E   0x2002             MOVS     R0,#+2
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000094   0x7648             STRB     R0,[R1, #+25]
    604          
    605                EVB.ConstSpd  = EVB_atoi(EVB.RXD + 1 + start, 4);
   \   00000096   0x2104             MOVS     R1,#+4
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   0000009C   0x4428             ADD      R0,R0,R5
   \   0000009E   0x3021             ADDS     R0,R0,#+33
   \   000000A0   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   000000A8   0xF8C1 0x06E8      STR      R0,[R1, #+1768]
    606               *EVB.SpdKp     = EVB_atoi(EVB.RXD + 5 + start, 6);
   \   000000AC   0x2106             MOVS     R1,#+6
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000000B2   0x4428             ADD      R0,R0,R5
   \   000000B4   0x3025             ADDS     R0,R0,#+37
   \   000000B6   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   000000BE   0xF8D1 0x1710      LDR      R1,[R1, #+1808]
   \   000000C2   0x6008             STR      R0,[R1, #+0]
    607               *EVB.SpdKi     = EVB_atoi(EVB.RXD + 11 + start, 5);
   \   000000C4   0x2105             MOVS     R1,#+5
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000000CA   0x4428             ADD      R0,R0,R5
   \   000000CC   0x302B             ADDS     R0,R0,#+43
   \   000000CE   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   000000D6   0xF8D1 0x1714      LDR      R1,[R1, #+1812]
   \   000000DA   0x6008             STR      R0,[R1, #+0]
    608               *EVB.SpdKd     = EVB_atoi(EVB.RXD + 16 + start, 3);
   \   000000DC   0x2103             MOVS     R1,#+3
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000000E2   0x4428             ADD      R0,R0,R5
   \   000000E4   0x3030             ADDS     R0,R0,#+48
   \   000000E6   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   000000EE   0xF8D1 0x1718      LDR      R1,[R1, #+1816]
   \   000000F2   0x6008             STR      R0,[R1, #+0]
   \   000000F4   0xE10F             B.N      ??EVB_Unpack_1
    609              }
    610              else if(EVB.RXD[start] == EVB_KpTable)
   \                     ??EVB_Unpack_2: (+1)
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000000FA   0x4428             ADD      R0,R0,R5
   \   000000FC   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   00000100   0x2803             CMP      R0,#+3
   \   00000102   0xD11B             BNE.N    ??EVB_Unpack_3
    611              {
    612                EVB.FunctionMode  = EVB_KpTable;
   \   00000104   0x2003             MOVS     R0,#+3
   \   00000106   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   0000010A   0x7648             STRB     R0,[R1, #+25]
    613                for(i1 = 0; i1 < 49; i1++)
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x0007             MOVS     R7,R0
   \                     ??EVB_Unpack_4: (+1)
   \   00000110   0x2F31             CMP      R7,#+49
   \   00000112   0xF280 0x8100      BGE.W    ??EVB_Unpack_1
    614                { 
    615                  *(EVB.KpTable + i1) = EVB_atoi(EVB.RXD + i1*3 + 1 + start, 3); 
   \   00000116   0x2103             MOVS     R1,#+3
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   0000011C   0x2203             MOVS     R2,#+3
   \   0000011E   0xFB02 0xF207      MUL      R2,R2,R7
   \   00000122   0x4410             ADD      R0,R0,R2
   \   00000124   0x4428             ADD      R0,R0,R5
   \   00000126   0x3021             ADDS     R0,R0,#+33
   \   00000128   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000130   0xF8D1 0x172C      LDR      R1,[R1, #+1836]
   \   00000134   0xF821 0x0017      STRH     R0,[R1, R7, LSL #+1]
    616                }
   \   00000138   0x1C7F             ADDS     R7,R7,#+1
   \   0000013A   0xE7E9             B.N      ??EVB_Unpack_4
    617              }
    618              else if(EVB.RXD[start] == EVB_KdTable)
   \                     ??EVB_Unpack_3: (+1)
   \   0000013C   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000140   0x4428             ADD      R0,R0,R5
   \   00000142   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   00000146   0x2804             CMP      R0,#+4
   \   00000148   0xD11B             BNE.N    ??EVB_Unpack_5
    619              {
    620                EVB.FunctionMode  = EVB_KdTable;
   \   0000014A   0x2004             MOVS     R0,#+4
   \   0000014C   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000150   0x7648             STRB     R0,[R1, #+25]
    621                for(i1 = 0; i1 < 49; i1++)
   \   00000152   0x2000             MOVS     R0,#+0
   \   00000154   0x0007             MOVS     R7,R0
   \                     ??EVB_Unpack_6: (+1)
   \   00000156   0x2F31             CMP      R7,#+49
   \   00000158   0xF280 0x80DD      BGE.W    ??EVB_Unpack_1
    622                { 
    623                  *(EVB.KdTable + i1) = EVB_atoi(EVB.RXD + i1*3 + 1 + start, 3); 
   \   0000015C   0x2103             MOVS     R1,#+3
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000162   0x2203             MOVS     R2,#+3
   \   00000164   0xFB02 0xF207      MUL      R2,R2,R7
   \   00000168   0x4410             ADD      R0,R0,R2
   \   0000016A   0x4428             ADD      R0,R0,R5
   \   0000016C   0x3021             ADDS     R0,R0,#+33
   \   0000016E   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   00000172   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000176   0xF8D1 0x1730      LDR      R1,[R1, #+1840]
   \   0000017A   0xF821 0x0017      STRH     R0,[R1, R7, LSL #+1]
    624                }
   \   0000017E   0x1C7F             ADDS     R7,R7,#+1
   \   00000180   0xE7E9             B.N      ??EVB_Unpack_6
    625              }
    626              else if(EVB.RXD[start] == EVB_SpdTable)
   \                     ??EVB_Unpack_5: (+1)
   \   00000182   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000186   0x4428             ADD      R0,R0,R5
   \   00000188   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   0000018C   0x2805             CMP      R0,#+5
   \   0000018E   0xD11B             BNE.N    ??EVB_Unpack_7
    627              {
    628                EVB.FunctionMode  = EVB_SpdTable;
   \   00000190   0x2005             MOVS     R0,#+5
   \   00000192   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000196   0x7648             STRB     R0,[R1, #+25]
    629                for(i1 = 0; i1 < 49; i1++)
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0x0007             MOVS     R7,R0
   \                     ??EVB_Unpack_8: (+1)
   \   0000019C   0x2F31             CMP      R7,#+49
   \   0000019E   0xF280 0x80BA      BGE.W    ??EVB_Unpack_1
    630                { 
    631                  *(EVB.SpdTable + i1) = EVB_atoi(EVB.RXD + i1*3 + 1 + start, 3); 
   \   000001A2   0x2103             MOVS     R1,#+3
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000001A8   0x2203             MOVS     R2,#+3
   \   000001AA   0xFB02 0xF207      MUL      R2,R2,R7
   \   000001AE   0x4410             ADD      R0,R0,R2
   \   000001B0   0x4428             ADD      R0,R0,R5
   \   000001B2   0x3021             ADDS     R0,R0,#+33
   \   000001B4   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   000001B8   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   000001BC   0xF8D1 0x1734      LDR      R1,[R1, #+1844]
   \   000001C0   0xF821 0x0017      STRH     R0,[R1, R7, LSL #+1]
    632                }
   \   000001C4   0x1C7F             ADDS     R7,R7,#+1
   \   000001C6   0xE7E9             B.N      ??EVB_Unpack_8
    633              }
    634              else if(EVB.RXD[start] == EVB_OffsetBoundTable)
   \                     ??EVB_Unpack_7: (+1)
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000001CC   0x4428             ADD      R0,R0,R5
   \   000001CE   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   000001D2   0x2806             CMP      R0,#+6
   \   000001D4   0xD111             BNE.N    ??EVB_Unpack_9
    635              {
    636                EVB.FunctionMode  = EVB_OffsetBoundTable;
   \   000001D6   0x2006             MOVS     R0,#+6
   \   000001D8   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   000001DC   0x7648             STRB     R0,[R1, #+25]
    637                for(i1=1;i1<84;i1+=3)
   \   000001DE   0x2001             MOVS     R0,#+1
   \   000001E0   0x0007             MOVS     R7,R0
   \                     ??EVB_Unpack_10: (+1)
   \   000001E2   0x2F54             CMP      R7,#+84
   \   000001E4   0xF280 0x8097      BGE.W    ??EVB_Unpack_1
    638                {
    639          //        if(column<3) 
    640          //          tmpNum = -((EVB.RXD[i1] - '0')*100 + (EVB.RXD[i1+1] - '0')*10 +(EVB.RXD[i1+2] - '0'));
    641          //        else
    642          //          tmpNum = ((EVB.RXD[i1] - '0')*100 + (EVB.RXD[i1+1] - '0')*10 +(EVB.RXD[i1+2] - '0'));
    643                  
    644                  if(row==0)
   \   000001E8   0x2C00             CMP      R4,#+0
    645                  {
    646                  }
    647                    //OffsetBound[column] = tmpNum;
    648                  else if(row==1)
    649                  {
    650                  }
    651                    //OffsetDBound[column] = tmpNum;
    652                  
    653                  column++;
   \                     ??EVB_Unpack_11: (+1)
   \   000001EA   0x1C76             ADDS     R6,R6,#+1
    654                  if(column==7)
   \   000001EC   0x2E07             CMP      R6,#+7
   \   000001EE   0xD102             BNE.N    ??EVB_Unpack_12
    655                  {
    656                    column = 0;
   \   000001F0   0x2000             MOVS     R0,#+0
   \   000001F2   0x0006             MOVS     R6,R0
    657                    row++;
   \   000001F4   0x1C64             ADDS     R4,R4,#+1
    658                  }            
    659                }
   \                     ??EVB_Unpack_12: (+1)
   \   000001F6   0x1CFF             ADDS     R7,R7,#+3
   \   000001F8   0xE7F3             B.N      ??EVB_Unpack_10
    660              }
    661              else if(EVB.RXD[start] == EVB_Sensor)
   \                     ??EVB_Unpack_9: (+1)
   \   000001FA   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000001FE   0x4428             ADD      R0,R0,R5
   \   00000200   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   00000204   0x2807             CMP      R0,#+7
   \   00000206   0xD104             BNE.N    ??EVB_Unpack_13
    662              {
    663                EVB.FunctionMode  = EVB_Sensor;
   \   00000208   0x2007             MOVS     R0,#+7
   \   0000020A   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   0000020E   0x7648             STRB     R0,[R1, #+25]
   \   00000210   0xE081             B.N      ??EVB_Unpack_1
    664              }
    665              else if(EVB.RXD[start] == EVB_Battle)
   \                     ??EVB_Unpack_13: (+1)
   \   00000212   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000216   0x4428             ADD      R0,R0,R5
   \   00000218   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   0000021C   0x2808             CMP      R0,#+8
   \   0000021E   0xD106             BNE.N    ??EVB_Unpack_14
    666              {
    667                EVB.FunctionMode  = EVB_Battle;
   \   00000220   0x2008             MOVS     R0,#+8
   \   00000222   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000226   0x7648             STRB     R0,[R1, #+25]
    668                //t_delay = EVB.RXD[1]*1000;
    669                //t_test =  EVB.RXD[3]*1000; 
    670                //t_test = 35000;
    671                EVB_ResetTime();
   \   00000228   0x.... 0x....      BL       _Z13EVB_ResetTimev
   \   0000022C   0xE073             B.N      ??EVB_Unpack_1
    672              }
    673              else if(EVB.RXD[start] == EVB_RemoteControl)
   \                     ??EVB_Unpack_14: (+1)
   \   0000022E   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000232   0x4428             ADD      R0,R0,R5
   \   00000234   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   00000238   0x2809             CMP      R0,#+9
   \   0000023A   0xD13D             BNE.N    ??EVB_Unpack_15
    674              {
    675                EVB.FunctionMode  = EVB_RemoteControl;
   \   0000023C   0x2009             MOVS     R0,#+9
   \   0000023E   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000242   0x7648             STRB     R0,[R1, #+25]
    676                if(!RemoteHub->valid)
   \   00000244   0x.... 0x....      LDR.W    R0,??DataTable22_19
   \   00000248   0x6800             LDR      R0,[R0, #+0]
   \   0000024A   0xF890 0x07F4      LDRB     R0,[R0, #+2036]
   \   0000024E   0x2800             CMP      R0,#+0
   \   00000250   0xD161             BNE.N    ??EVB_Unpack_1
    677                {
    678                  EVB.Yaw       = EVB_atoi(EVB.RXD + 1 + start, 4); 
   \   00000252   0x2104             MOVS     R1,#+4
   \   00000254   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000258   0x4428             ADD      R0,R0,R5
   \   0000025A   0x3021             ADDS     R0,R0,#+33
   \   0000025C   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   00000260   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000264   0xF8C1 0x06F0      STR      R0,[R1, #+1776]
    679                  EVB.Roll      = EVB_atoi(EVB.RXD + 5 + start, 4);
   \   00000268   0x2104             MOVS     R1,#+4
   \   0000026A   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   0000026E   0x4428             ADD      R0,R0,R5
   \   00000270   0x3025             ADDS     R0,R0,#+37
   \   00000272   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   00000276   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   0000027A   0xF8C1 0x06F4      STR      R0,[R1, #+1780]
    680                  EVB.Pitch     = EVB_atoi(EVB.RXD + 9 + start, 4);
   \   0000027E   0x2104             MOVS     R1,#+4
   \   00000280   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000284   0x4428             ADD      R0,R0,R5
   \   00000286   0x3029             ADDS     R0,R0,#+41
   \   00000288   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   0000028C   0x....             LDR.N    R1,??DataTable22_5
   \   0000028E   0xF8C1 0x06F8      STR      R0,[R1, #+1784]
    681                  EVB.ConstSpd  = EVB_atoi(EVB.RXD + 13 + start, 4);
   \   00000292   0x2104             MOVS     R1,#+4
   \   00000294   0x....             LDR.N    R0,??DataTable22_5
   \   00000296   0x4428             ADD      R0,R0,R5
   \   00000298   0x302D             ADDS     R0,R0,#+45
   \   0000029A   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   0000029E   0x....             LDR.N    R1,??DataTable22_5
   \   000002A0   0xF8C1 0x06E8      STR      R0,[R1, #+1768]
    682                  EVB.LeftKnob  = EVB_atoi(EVB.RXD + 17 + start, 4); //用遥控器直接连接
   \   000002A4   0x2104             MOVS     R1,#+4
   \   000002A6   0x....             LDR.N    R0,??DataTable22_5
   \   000002A8   0x4428             ADD      R0,R0,R5
   \   000002AA   0x3031             ADDS     R0,R0,#+49
   \   000002AC   0x.... 0x....      BL       _Z8EVB_atoiPci
   \   000002B0   0x....             LDR.N    R1,??DataTable22_5
   \   000002B2   0xF8C1 0x06FC      STR      R0,[R1, #+1788]
   \   000002B6   0xE02E             B.N      ??EVB_Unpack_1
    683                }
    684              }
    685              else if(EVB.RXD[start] == EVB_Command)
   \                     ??EVB_Unpack_15: (+1)
   \   000002B8   0x....             LDR.N    R0,??DataTable22_5
   \   000002BA   0x4428             ADD      R0,R0,R5
   \   000002BC   0xF890 0x0020      LDRB     R0,[R0, #+32]
   \   000002C0   0x280A             CMP      R0,#+10
   \   000002C2   0xD128             BNE.N    ??EVB_Unpack_16
    686              {
    687                if(EVB.RXD[1 + start] == 0)
   \   000002C4   0x....             LDR.N    R0,??DataTable22_5
   \   000002C6   0x4428             ADD      R0,R0,R5
   \   000002C8   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \   000002CC   0x2800             CMP      R0,#+0
   \   000002CE   0xD104             BNE.N    ??EVB_Unpack_17
    688                {
    689                  EVB.MotorSwitch = 0;
   \   000002D0   0x2000             MOVS     R0,#+0
   \   000002D2   0x....             LDR.N    R1,??DataTable22_5
   \   000002D4   0xF8C1 0x0700      STR      R0,[R1, #+1792]
   \   000002D8   0xE01D             B.N      ??EVB_Unpack_1
    690                 // writeAllParameter();      //策略号要远程更新?
    691                }
    692                else if(EVB.RXD[1 + start] == 1)
   \                     ??EVB_Unpack_17: (+1)
   \   000002DA   0x....             LDR.N    R0,??DataTable22_5
   \   000002DC   0x4428             ADD      R0,R0,R5
   \   000002DE   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \   000002E2   0x2801             CMP      R0,#+1
   \   000002E4   0xD103             BNE.N    ??EVB_Unpack_18
    693                  EVB.SendMode = EVB_SendMode_KpTable;
   \   000002E6   0x2001             MOVS     R0,#+1
   \   000002E8   0x....             LDR.N    R1,??DataTable22_5
   \   000002EA   0x7608             STRB     R0,[R1, #+24]
   \   000002EC   0xE013             B.N      ??EVB_Unpack_1
    694                else if(EVB.RXD[1 + start] == 2)
   \                     ??EVB_Unpack_18: (+1)
   \   000002EE   0x....             LDR.N    R0,??DataTable22_5
   \   000002F0   0x4428             ADD      R0,R0,R5
   \   000002F2   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \   000002F6   0x2802             CMP      R0,#+2
   \   000002F8   0xD103             BNE.N    ??EVB_Unpack_19
    695                  EVB.SendMode = EVB_SendMode_KdTable;
   \   000002FA   0x2002             MOVS     R0,#+2
   \   000002FC   0x....             LDR.N    R1,??DataTable22_5
   \   000002FE   0x7608             STRB     R0,[R1, #+24]
   \   00000300   0xE009             B.N      ??EVB_Unpack_1
    696                else if(EVB.RXD[1 + start] == 3)
   \                     ??EVB_Unpack_19: (+1)
   \   00000302   0x....             LDR.N    R0,??DataTable22_5
   \   00000304   0x4428             ADD      R0,R0,R5
   \   00000306   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \   0000030A   0x2803             CMP      R0,#+3
   \   0000030C   0xD103             BNE.N    ??EVB_Unpack_1
    697                  EVB.SendMode = EVB_SendMode_SpdTable;
   \   0000030E   0x2003             MOVS     R0,#+3
   \   00000310   0x....             LDR.N    R1,??DataTable22_5
   \   00000312   0x7608             STRB     R0,[R1, #+24]
   \   00000314   0xE7FF             B.N      ??EVB_Unpack_1
    698              }
    699              else if(EVB.RXD[start] == EVB_FullBrake)
    700              {
    701              }
    702              EVB.MotorSwitch = EVB.RXD[EVB.RXD_Iterator - 1] - 48;
   \                     ??EVB_Unpack_16: (+1)
   \                     ??EVB_Unpack_1: (+1)
   \   00000316   0x....             LDR.N    R0,??DataTable22_5
   \   00000318   0x....             LDR.N    R1,??DataTable22_5
   \   0000031A   0xF8D1 0x15FC      LDR      R1,[R1, #+1532]
   \   0000031E   0x4408             ADD      R0,R0,R1
   \   00000320   0x7FC0             LDRB     R0,[R0, #+31]
   \   00000322   0x3830             SUBS     R0,R0,#+48
   \   00000324   0x....             LDR.N    R1,??DataTable22_5
   \   00000326   0xF8C1 0x0700      STR      R0,[R1, #+1792]
    703              //EVB.LastPackageTime = t;
    704              EVB_Process();
   \   0000032A   0x.... 0x....      BL       _Z11EVB_Processv
    705              EVB.RXD_Iterator = 0;   
   \   0000032E   0x2000             MOVS     R0,#+0
   \   00000330   0x....             LDR.N    R1,??DataTable22_5
   \   00000332   0xF8C1 0x05FC      STR      R0,[R1, #+1532]
    706          }
   \   00000336   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    707          

   \                                 In section .text, align 2, keep-with-next
    708          void EVB_Process()
    709          {
   \                     _Z11EVB_Processv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    710            if(!EVB.MotorSwitchLast && EVB.MotorSwitch) 
   \   00000002   0x....             LDR.N    R0,??DataTable22_5
   \   00000004   0xF8D0 0x0704      LDR      R0,[R0, #+1796]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD106             BNE.N    ??EVB_Process_0
   \   0000000C   0x....             LDR.N    R0,??DataTable22_5
   \   0000000E   0xF8D0 0x0700      LDR      R0,[R0, #+1792]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD001             BEQ.N    ??EVB_Process_0
    711            {
    712              EVB_ResetTime();
   \   00000016   0x.... 0x....      BL       _Z13EVB_ResetTimev
    713            }  
    714            EVB.MotorSwitchLast = EVB.MotorSwitch;
   \                     ??EVB_Process_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable22_5
   \   0000001C   0xF8D0 0x0700      LDR      R0,[R0, #+1792]
   \   00000020   0x....             LDR.N    R1,??DataTable22_5
   \   00000022   0xF8C1 0x0704      STR      R0,[R1, #+1796]
    715          }
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    716          

   \                                 In section .text, align 4, keep-with-next
    717          void EVB_ResetTime()    //注意速度PID控制器的重置
    718          {
    719            angleZ.referance = 0;
   \                     _Z13EVB_ResetTimev: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable22_20
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
    720            EKF_AHRS->q0 = 1.0f, 
    721            EKF_AHRS->q1 = 0.0f, 
    722            EKF_AHRS->q2 = 0.0f, 
    723            EKF_AHRS->q3 = 0.0f;
   \   00000006   0x....             LDR.N    R0,??DataTable22_21
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   0000000E   0x6381             STR      R1,[R0, #+56]
   \   00000010   0x....             LDR.N    R0,??DataTable22_21
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x63C1             STR      R1,[R0, #+60]
   \   00000018   0x....             LDR.N    R0,??DataTable22_21
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6401             STR      R1,[R0, #+64]
   \   00000020   0x....             LDR.N    R0,??DataTable22_21
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x6441             STR      R1,[R0, #+68]
    724            gyroX.I = 0;
   \   00000028   0x....             LDR.N    R0,??DataTable22_22
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x6441             STR      R1,[R0, #+68]
    725            gyroY.I = 0;
   \   0000002E   0x....             LDR.N    R0,??DataTable22_23
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x6441             STR      R1,[R0, #+68]
    726            gyroZ.I = 0;
   \   00000034   0x....             LDR.N    R0,??DataTable22_24
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x6441             STR      R1,[R0, #+68]
    727            angleX.I = angleY.I = angleZ.I = 0;
   \   0000003A   0xED9F 0x....      VLDR.W   S0,??DataTable22  ;; 0x0
   \   0000003E   0x....             LDR.N    R0,??DataTable22_20
   \   00000040   0xED80 0x0A11      VSTR     S0,[R0, #+68]
   \   00000044   0x....             LDR.N    R0,??DataTable22_7
   \   00000046   0xED80 0x0A11      VSTR     S0,[R0, #+68]
   \   0000004A   0x....             LDR.N    R0,??DataTable22_6
   \   0000004C   0xED80 0x0A11      VSTR     S0,[R0, #+68]
    728          }
   \   00000050   0x4770             BX       LR               ;; return
    729          

   \                                 In section .text, align 2, keep-with-next
    730          void EVB_SetRow_FuzzyTable(int Tmp)
    731          {
    732            EVB.Row_FuzzyTable = Tmp;
   \                     _Z21EVB_SetRow_FuzzyTablei: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable22_5
   \   00000002   0xF8C1 0x0708      STR      R0,[R1, #+1800]
    733          }
   \   00000006   0x4770             BX       LR               ;; return
    734          

   \                                 In section .text, align 2, keep-with-next
    735          void EVB_SetColumn_FuzzyTable(int Tmp)
    736          {
    737            EVB.Column_FuzzyTable = Tmp;
   \                     _Z24EVB_SetColumn_FuzzyTablei: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable22_5
   \   00000002   0xF8C1 0x070C      STR      R0,[R1, #+1804]
    738          }
   \   00000006   0x4770             BX       LR               ;; return
    739          

   \                                 In section .text, align 2, keep-with-next
    740          int EVB_SetSpd(int tmp)
    741          {
   \                     _Z10EVB_SetSpdi: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    742            if(EVB.MotorSwitch == 2)
   \   00000002   0x....             LDR.N    R0,??DataTable22_5
   \   00000004   0xF8D0 0x0700      LDR      R0,[R0, #+1792]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD101             BNE.N    ??EVB_SetSpd_0
    743            {
    744              return tmp;
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0xE009             B.N      ??EVB_SetSpd_1
    745            }
    746            else if(EVB.MotorSwitch == 1)
   \                     ??EVB_SetSpd_0: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable22_5
   \   00000012   0xF8D0 0x0700      LDR      R0,[R0, #+1792]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD103             BNE.N    ??EVB_SetSpd_2
    747            {
    748              return EVB.ConstSpd;
   \   0000001A   0x....             LDR.N    R0,??DataTable22_5
   \   0000001C   0xF8D0 0x06E8      LDR      R0,[R0, #+1768]
   \   00000020   0xE000             B.N      ??EVB_SetSpd_1
    749            }
    750            else  //EVB.MotorSwitch == 0或3
    751            {
    752              return 0;
   \                     ??EVB_SetSpd_2: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \                     ??EVB_SetSpd_1: (+1)
   \   00000024   0x4770             BX       LR               ;; return
    753            }
    754          }
    755          

   \                                 In section .text, align 2, keep-with-next
    756          int EVB_SpdPWM(int tmp)
    757          {
   \                     _Z10EVB_SpdPWMi: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    758            if(EVB.MotorSwitch == 2 || EVB.MotorSwitch == 1)
   \   00000004   0x....             LDR.N    R0,??DataTable22_5
   \   00000006   0xF8D0 0x0700      LDR      R0,[R0, #+1792]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD004             BEQ.N    ??EVB_SpdPWM_0
   \   0000000E   0x....             LDR.N    R0,??DataTable22_5
   \   00000010   0xF8D0 0x0700      LDR      R0,[R0, #+1792]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD101             BNE.N    ??EVB_SpdPWM_1
    759            {
    760              return tmp;
   \                     ??EVB_SpdPWM_0: (+1)
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xE011             B.N      ??EVB_SpdPWM_2
    761            }
    762            else  if(EVB.MotorSwitch == 0)
   \                     ??EVB_SpdPWM_1: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable22_5
   \   0000001E   0xF8D0 0x0700      LDR      R0,[R0, #+1792]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD101             BNE.N    ??EVB_SpdPWM_3
    763            {
    764              return 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xE00A             B.N      ??EVB_SpdPWM_2
    765            }
    766            else  //EVB.MotorSwitch == 3
    767            {
    768              return (int)(EVB.ConstSpd*8.333);//常数随便改
   \                     ??EVB_SpdPWM_3: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable22_5
   \   0000002C   0xF8D0 0x06E8      LDR      R0,[R0, #+1768]
   \   00000030   0x.... 0x....      BL       __aeabi_i2d
   \   00000034   0x....             LDR.N    R2,??DataTable22_25  ;; 0xf9db22d1
   \   00000036   0x....             LDR.N    R3,??DataTable22_26  ;; 0x4020aa7e
   \   00000038   0x.... 0x....      BL       __aeabi_dmul
   \   0000003C   0x.... 0x....      BL       __aeabi_d2iz
   \                     ??EVB_SpdPWM_2: (+1)
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
    769            }
    770          }
    771          

   \                                 In section .text, align 2, keep-with-next
    772          int  EVB_AnglePWM(int tmp)
    773          {
   \                     _Z12EVB_AnglePWMi: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    774            if(EVB.MotorSwitch != 3)
   \   00000002   0x....             LDR.N    R0,??DataTable22_5
   \   00000004   0xF8D0 0x0700      LDR      R0,[R0, #+1792]
   \   00000008   0x2803             CMP      R0,#+3
   \   0000000A   0xD001             BEQ.N    ??EVB_AnglePWM_0
    775            {
    776              return tmp;
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0xE002             B.N      ??EVB_AnglePWM_1
    777            }
    778            else
    779            {
    780              return EVB.AngleDirectControl;
   \                     ??EVB_AnglePWM_0: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable22_5
   \   00000012   0xF8D0 0x06EC      LDR      R0,[R0, #+1772]
   \                     ??EVB_AnglePWM_1: (+1)
   \   00000016   0x4770             BX       LR               ;; return
    781            }
    782          }
    783          

   \                                 In section .text, align 2, keep-with-next
    784          bool EVB_FullBrakeStatus()
    785          {
    786            if(EVB.FunctionMode == EVB_FullBrake)
   \                     _Z19EVB_FullBrakeStatusv: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable22_5
   \   00000002   0x7E40             LDRB     R0,[R0, #+25]
   \   00000004   0x280B             CMP      R0,#+11
   \   00000006   0xD101             BNE.N    ??EVB_FullBrakeStatus_0
    787              return true;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??EVB_FullBrakeStatus_1
    788            else
    789              return false;
   \                     ??EVB_FullBrakeStatus_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \                     ??EVB_FullBrakeStatus_1: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    790          }
    791          

   \                                 In section .text, align 4, keep-with-next
    792          int EVB_atoi(char* data, int length)
    793          {
   \                     _Z8EVB_atoiPci: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0003             MOVS     R3,R0
    794            int result = 0, i;
   \   00000004   0x2200             MOVS     R2,#+0
    795            if(*data != '-')
   \   00000006   0x7818             LDRB     R0,[R3, #+0]
   \   00000008   0x282D             CMP      R0,#+45
   \   0000000A   0xD037             BEQ.N    ??EVB_atoi_0
    796            {
    797              for(i = 0; i < length; i++)
   \   0000000C   0x2400             MOVS     R4,#+0
   \                     ??EVB_atoi_1: (+1)
   \   0000000E   0x428C             CMP      R4,R1
   \   00000010   0xDA6C             BGE.N    ??EVB_atoi_2
    798              {
    799                result += (*(data + i) - '0') * pow(10.0f, length - i - 1);
   \   00000012   0x1B0D             SUBS     R5,R1,R4
   \   00000014   0x1E6D             SUBS     R5,R5,#+1
   \   00000016   0xEEB2 0x0A04      VMOV.F32 S0,#10.0
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD500             BPL.N    ??EVB_atoi_3
   \   00000020   0x4240             RSBS     R0,R0,#+0
   \                     ??EVB_atoi_3: (+1)
   \   00000022   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \                     ??EVB_atoi_4: (+1)
   \   00000026   0x07C6             LSLS     R6,R0,#+31
   \   00000028   0xD501             BPL.N    ??EVB_atoi_5
   \   0000002A   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \                     ??EVB_atoi_5: (+1)
   \   0000002E   0x0840             LSRS     R0,R0,#+1
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD002             BEQ.N    ??EVB_atoi_6
   \   00000034   0xEE20 0x0A00      VMUL.F32 S0,S0,S0
   \   00000038   0xE7F5             B.N      ??EVB_atoi_4
   \                     ??EVB_atoi_6: (+1)
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD50C             BPL.N    ??EVB_atoi_7
   \   0000003E   0xEEF5 0x0A40      VCMP.F32 S1,#0.0
   \   00000042   0xEEF1 0xFA10      FMSTAT   
   \   00000046   0xD102             BNE.N    ??EVB_atoi_8
   \   00000048   0xEDDF 0x....      VLDR.W   S1,??DataTable22_3  ;; 0x7f800000
   \   0000004C   0xE004             B.N      ??EVB_atoi_9
   \                     ??EVB_atoi_8: (+1)
   \   0000004E   0xEEB7 0x0A00      VMOV.F32 S0,#1.0
   \   00000052   0xEEC0 0x0A20      VDIV.F32 S1,S0,S1
   \   00000056   0xE7FF             B.N      ??EVB_atoi_9
    800              }
   \                     ??EVB_atoi_7: (+1)
   \                     ??EVB_atoi_9: (+1)
   \   00000058   0xEE00 0x2A10      VMOV     S0,R2
   \   0000005C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000060   0x5D18             LDRB     R0,[R3, R4]
   \   00000062   0x3830             SUBS     R0,R0,#+48
   \   00000064   0xEE01 0x0A10      VMOV     S2,R0
   \   00000068   0xEEB8 0x1AC1      VCVT.F32.S32 S2,S2
   \   0000006C   0xEE01 0x0A20      VMLA.F32 S0,S2,S1
   \   00000070   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000074   0xEE10 0x2A10      VMOV     R2,S0
   \   00000078   0x1C64             ADDS     R4,R4,#+1
   \   0000007A   0xE7C8             B.N      ??EVB_atoi_1
    801            }
    802            else
    803            {
    804              for(i = 1; i < length; i++)
   \                     ??EVB_atoi_0: (+1)
   \   0000007C   0x2401             MOVS     R4,#+1
   \                     ??EVB_atoi_10: (+1)
   \   0000007E   0x428C             CMP      R4,R1
   \   00000080   0xDA34             BGE.N    ??EVB_atoi_2
    805              {
    806                result -= (*(data + i) - '0') * pow(10.0f, length - i - 1);
   \   00000082   0x1B0D             SUBS     R5,R1,R4
   \   00000084   0x1E6D             SUBS     R5,R5,#+1
   \   00000086   0xEEB2 0x0A04      VMOV.F32 S0,#10.0
   \   0000008A   0x0028             MOVS     R0,R5
   \   0000008C   0x2D00             CMP      R5,#+0
   \   0000008E   0xD500             BPL.N    ??EVB_atoi_11
   \   00000090   0x4240             RSBS     R0,R0,#+0
   \                     ??EVB_atoi_11: (+1)
   \   00000092   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \                     ??EVB_atoi_12: (+1)
   \   00000096   0x07C6             LSLS     R6,R0,#+31
   \   00000098   0xD501             BPL.N    ??EVB_atoi_13
   \   0000009A   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \                     ??EVB_atoi_13: (+1)
   \   0000009E   0x0840             LSRS     R0,R0,#+1
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD002             BEQ.N    ??EVB_atoi_14
   \   000000A4   0xEE20 0x0A00      VMUL.F32 S0,S0,S0
   \   000000A8   0xE7F5             B.N      ??EVB_atoi_12
   \                     ??EVB_atoi_14: (+1)
   \   000000AA   0x2D00             CMP      R5,#+0
   \   000000AC   0xD50C             BPL.N    ??EVB_atoi_15
   \   000000AE   0xEEF5 0x0A40      VCMP.F32 S1,#0.0
   \   000000B2   0xEEF1 0xFA10      FMSTAT   
   \   000000B6   0xD102             BNE.N    ??EVB_atoi_16
   \   000000B8   0xEDDF 0x....      VLDR.W   S1,??DataTable22_3  ;; 0x7f800000
   \   000000BC   0xE004             B.N      ??EVB_atoi_17
   \                     ??EVB_atoi_16: (+1)
   \   000000BE   0xEEB7 0x0A00      VMOV.F32 S0,#1.0
   \   000000C2   0xEEC0 0x0A20      VDIV.F32 S1,S0,S1
   \   000000C6   0xE7FF             B.N      ??EVB_atoi_17
    807              }
   \                     ??EVB_atoi_15: (+1)
   \                     ??EVB_atoi_17: (+1)
   \   000000C8   0xEE00 0x2A10      VMOV     S0,R2
   \   000000CC   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000D0   0x5D18             LDRB     R0,[R3, R4]
   \   000000D2   0x3830             SUBS     R0,R0,#+48
   \   000000D4   0xEE01 0x0A10      VMOV     S2,R0
   \   000000D8   0xEEB8 0x1AC1      VCVT.F32.S32 S2,S2
   \   000000DC   0xEE01 0x0A60      VMLS.F32 S0,S2,S1
   \   000000E0   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000E4   0xEE10 0x2A10      VMOV     R2,S0
   \   000000E8   0x1C64             ADDS     R4,R4,#+1
   \   000000EA   0xE7C8             B.N      ??EVB_atoi_10
    808            }
    809            return result;
   \                     ??EVB_atoi_2: (+1)
   \   000000EC   0x0010             MOVS     R0,R2
   \   000000EE   0xBC70             POP      {R4-R6}
   \   000000F0   0x4770             BX       LR               ;; return
    810          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x43160000         DC32     0x43160000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x461C4000         DC32     0x461c4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     EVB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     EVB+0x658

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     MPU6000_Raw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     MPU6000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     roll1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     pitch1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     yaw1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     Compass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     EVB+0x6C4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     EVB+0x6C8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x........         DC32     EVB+0x6CC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     EVB+0x6D0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x........         DC32     EVB+0x6D4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     EVB+0x6D8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x........         DC32     _ZN12Ultrasound__3disE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x7F800000         DC32     0x7f800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_4:
   \   00000000   0xFFFFD8F1         DC32     0xffffd8f1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_5:
   \   00000000   0x........         DC32     EVB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_6:
   \   00000000   0x........         DC32     angleX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_7:
   \   00000000   0x........         DC32     angleY

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_8:
   \   00000000   0x........         DC32     roror1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_9:
   \   00000000   0x........         DC32     roror2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_10:
   \   00000000   0x........         DC32     roror3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_11:
   \   00000000   0x........         DC32     roror4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_12:
   \   00000000   0x40009040         DC32     0x40009040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_13:
   \   00000000   0x40009056         DC32     0x40009056

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_14:
   \   00000000   0x4000905E         DC32     0x4000905e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_15:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_16:
   \   00000000   0x40009030         DC32     0x40009030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_17:
   \   00000000   0x........         DC32     EVB+0x20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_18:
   \   00000000   0x........         DC32     `EVB_DMA_Receive()::address00`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_19:
   \   00000000   0x........         DC32     RemoteHub

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_20:
   \   00000000   0x........         DC32     angleZ

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_21:
   \   00000000   0x........         DC32     EKF_AHRS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_22:
   \   00000000   0x........         DC32     gyroX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_23:
   \   00000000   0x........         DC32     gyroY

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_24:
   \   00000000   0x........         DC32     gyroZ

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_25:
   \   00000000   0xF9DB22D1         DC32     0xf9db22d1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_26:
   \   00000000   0x4020AA7E         DC32     0x4020aa7e
    811          
    812          //int pow(int a, int b)
    813          //{
    814          //  int result = 1;
    815          //  for(int i = 0; i < b; i++)
    816          //  {
    817          //    result *= a;
    818          //  }
    819          //  return result;
    820          //}

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA_isOccupying
       0   EVB_::TX_::add(char)
      16   EVB_::TX_::clear()
        16   -> __aeabi_memset
       0   EVB_::TX_::startDMA_Transmit()
       8   EVB_::makeOnePackge()
         8   -> EVB_::TX_::clear()
         8   -> EVB_SendSNum_3(int)
         8   -> EVB_SendTable(int16 *, __SendMode)
         8   -> EVB_SendUNum_1(int)
         8   -> EVB_SendUNum_2(int)
      24   EVB_::send()
        24   -> DMA_isOccupying
        24   -> EVB_::TX_::add(char)
        24   -> EVB_::TX_::clear()
        24   -> EVB_::TX_::startDMA_Transmit()
       0   EVB_AnglePWM(int)
      24   EVB_DMA_Receive()
        24   -> EVB_RX_Check(int)
        24   -> EVB_Unpack(int)
       0   EVB_FullBrakeStatus()
      16   EVB_Init(__EVB_InitTypeDef)
       8   EVB_Process()
         8   -> EVB_ResetTime()
       0   EVB_RX_Check(int)
       8   EVB_ReceiveOneByte(char)
         8   -> EVB_RX_Check(int)
         8   -> EVB_Unpack(int)
       0   EVB_ResetTime()
       8   EVB_SendSNum_3(int)
         8   -> EVB_::TX_::add(char)
       8   EVB_SendStr(u8 *)
         8   -> EVB_::TX_::add(char)
      24   EVB_SendTable(int16 *, __SendMode)
        24   -> EVB_SendStr(u8 *)
        24   -> EVB_SendUNum_1(int)
       8   EVB_SendUNum_1(int)
         8   -> EVB_::TX_::add(char)
       8   EVB_SendUNum_2(int)
         8   -> EVB_::TX_::add(char)
       8   EVB_SendUNum_3(int)
         8   -> EVB_::TX_::add(char)
       0   EVB_SetColumn_FuzzyTable(int)
       0   EVB_SetRow_FuzzyTable(int)
       0   EVB_SetSpd(int)
       8   EVB_SpdPWM(int)
         8   -> __aeabi_d2iz
         8   -> __aeabi_dmul
         8   -> __aeabi_i2d
       0   EVB_TimerUpdate()
      24   EVB_Unpack(int)
        24   -> EVB_Process()
        24   -> EVB_ResetTime()
        24   -> EVB_atoi(char *, int)
      12   EVB_atoi(char *, int)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable13
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable16
       4  ??DataTable17
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable19
       4  ??DataTable2
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_10
       4  ??DataTable22_11
       4  ??DataTable22_12
       4  ??DataTable22_13
       4  ??DataTable22_14
       4  ??DataTable22_15
       4  ??DataTable22_16
       4  ??DataTable22_17
       4  ??DataTable22_18
       4  ??DataTable22_19
       4  ??DataTable22_2
       4  ??DataTable22_20
       4  ??DataTable22_21
       4  ??DataTable22_22
       4  ??DataTable22_23
       4  ??DataTable22_24
       4  ??DataTable22_25
       4  ??DataTable22_26
       4  ??DataTable22_3
       4  ??DataTable22_4
       4  ??DataTable22_5
       4  ??DataTable22_6
       4  ??DataTable22_7
       4  ??DataTable22_8
       4  ??DataTable22_9
       4  ??DataTable7
      20  DMA_isOccupying
    2012  EVB
      10  EVB_::TX_::add(char)
      24  EVB_::TX_::clear()
      58  EVB_::TX_::startDMA_Transmit()
     464  EVB_::makeOnePackge()
    1580  EVB_::send()
      24  EVB_AnglePWM(int)
     226  EVB_DMA_Receive()
      16  EVB_FullBrakeStatus()
     288  EVB_Init(__EVB_InitTypeDef)
      40  EVB_Process()
      60  EVB_RX_Check(int)
     106  EVB_ReceiveOneByte(char)
      82  EVB_ResetTime()
     104  EVB_SendSNum_3(int)
      26  EVB_SendStr(u8 *)
      68  EVB_SendTable(int16 *, __SendMode)
      20  EVB_SendUNum_1(int)
      46  EVB_SendUNum_2(int)
      84  EVB_SendUNum_3(int)
       8  EVB_SetColumn_FuzzyTable(int)
       8  EVB_SetRow_FuzzyTable(int)
      38  EVB_SetSpd(int)
      66  EVB_SpdPWM(int)
      22  EVB_TimerUpdate()
     824  EVB_Unpack(int)
     242  EVB_atoi(char *, int)
       4  TT1
       4  TT1_max
       4  TT1_min
       4  address00

 
 2 028 bytes in section .bss
 4 734 bytes in section .text
 
 4 680 bytes of CODE memory (+ 54 bytes shared)
 2 028 bytes of DATA memory

Errors: none
Warnings: 2
