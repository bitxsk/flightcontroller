###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       16/May/2018  07:33:04
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\PIT.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EWB30.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\PIT.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\PIT.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\PIT.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\PIT.c
      1          /**
      2           * @file PIT.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief PIT底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn)
   \                     _ZN26_INTERNAL_5_PIT_c_PIT_Init16__NVIC_EnableIRQE4IRQn: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000C   0x408A             LSLS     R2,R2,R1
   \   0000000E   0x....             LDR.N    R1,??DataTable9  ;; 0xe000e100
   \   00000010   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000012   0x0003             MOVS     R3,R0
   \   00000014   0x095B             LSRS     R3,R3,#+5
   \   00000016   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn)
   \                     _ZN26_INTERNAL_5_PIT_c_PIT_Init17__NVIC_DisableIRQE4IRQn: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD409             BMI.N    ??__NVIC_DisableIRQ_0
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000C   0x408A             LSLS     R2,R2,R1
   \   0000000E   0x....             LDR.N    R1,??DataTable9_1  ;; 0xe000e180
   \   00000010   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000012   0x0003             MOVS     R3,R0
   \   00000014   0x095B             LSRS     R3,R3,#+5
   \   00000016   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
     23          #include "PIT.h"
     24          #include "isr.h"
     25          
     26          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     27          PIT_ISR_CALLBACK PIT_ISR[4];
   \                     PIT_ISR:
   \   00000000                      DS8 16
     28          
     29          /*
     30           * PIT_Init
     31           * PIT通用初始化函数，选择PITx、配置中断周期、中断函数
     32           * 
     33           * 参数:
     34           *    pit_init_structure--PIT初始化结构体，
     35           *                        具体定义见PIT_InitTypeDef
     36           *
     37           * 输出:
     38           *    0--配置错误
     39           *    1--配置成功
     40           */

   \                                 In section .text, align 2, keep-with-next
     41          uint8 PIT_Init(PIT_InitTypeDef pit_init_structure)
     42          { 
   \                     PIT_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB570             PUSH     {R4-R6,LR}
     43            //计算定时加载值
     44            uint32 ldval = pit_init_structure.PIT_PeriodUs*(g_bus_clock/1000000)
     45                         + pit_init_structure.PIT_PeriodMs*1000*(g_bus_clock/1000000)
     46                         + pit_init_structure.PIT_PeriodS*1000000*(g_bus_clock/1000000);
   \   00000004   0x9905             LDR      R1,[SP, #+20]
   \   00000006   0x....             LDR.N    R0,??DataTable9_2
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x....             LDR.N    R2,??DataTable9_3  ;; 0xf4240
   \   0000000C   0xFBB0 0xF2F2      UDIV     R2,R0,R2
   \   00000010   0x9B06             LDR      R3,[SP, #+24]
   \   00000012   0x....             LDR.N    R0,??DataTable9_2
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x....             LDR.N    R4,??DataTable9_3  ;; 0xf4240
   \   00000018   0xFBB0 0xF0F4      UDIV     R0,R0,R4
   \   0000001C   0x4343             MULS     R3,R0,R3
   \   0000001E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000022   0x4343             MULS     R3,R0,R3
   \   00000024   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000028   0x9C07             LDR      R4,[SP, #+28]
   \   0000002A   0x....             LDR.N    R0,??DataTable9_2
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x....             LDR.N    R2,??DataTable9_3  ;; 0xf4240
   \   00000030   0xFBB0 0xF0F2      UDIV     R0,R0,R2
   \   00000034   0x4344             MULS     R4,R0,R4
   \   00000036   0x....             LDR.N    R0,??DataTable9_3  ;; 0xf4240
   \   00000038   0xFB00 0x1404      MLA      R4,R0,R4,R1
     47            PITx pitx = pit_init_structure.PIT_Pitx;
   \   0000003C   0xF89D 0x5010      LDRB     R5,[SP, #+16]
     48            PIT_ISR_CALLBACK isr_func = pit_init_structure.PIT_Isr;
   \   00000040   0x9E08             LDR      R6,[SP, #+32]
     49            
     50            //参数检查
     51            ASSERT( pitx <= PIT3);        //判断模块号
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x2D04             CMP      R5,#+4
   \   00000046   0xDB03             BLT.N    ??PIT_Init_0
   \   00000048   0x2133             MOVS     R1,#+51
   \   0000004A   0x....             LDR.N    R0,??DataTable9_4
   \   0000004C   0x.... 0x....      BL       assert_failed
     52            ASSERT( ldval > 0);           //判断时加载值                
   \                     ??PIT_Init_0: (+1)
   \   00000050   0x2C00             CMP      R4,#+0
   \   00000052   0xD103             BNE.N    ??PIT_Init_1
   \   00000054   0x2134             MOVS     R1,#+52
   \   00000056   0x....             LDR.N    R0,??DataTable9_4
   \   00000058   0x.... 0x....      BL       assert_failed
     53            
     54            //开启定时模块时钟
     55            SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;
   \                     ??PIT_Init_1: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable9_5  ;; 0x4004803c
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF450 0x0000      ORRS     R0,R0,#0x800000
   \   00000064   0x....             LDR.N    R1,??DataTable9_5  ;; 0x4004803c
   \   00000066   0x6008             STR      R0,[R1, #+0]
     56            
     57            // 开启 PIT
     58            PIT->MCR = 0x00;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x....             LDR.N    R1,??DataTable9_6  ;; 0x40037000
   \   0000006C   0x6008             STR      R0,[R1, #+0]
     59           
     60            if(isr_func != NULL){
   \   0000006E   0x0030             MOVS     R0,R6
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD009             BEQ.N    ??PIT_Init_2
     61              PIT_ISR[pitx] = isr_func;
   \   00000074   0x....             LDR.N    R0,??DataTable9_7
   \   00000076   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000078   0xF840 0x6025      STR      R6,[R0, R5, LSL #+2]
     62              //使能中断
     63              PIT->CHANNEL[pitx].TCTRL = PIT_TCTRL_TIE_MASK;
   \   0000007C   0x2002             MOVS     R0,#+2
   \   0000007E   0x....             LDR.N    R1,??DataTable9_8  ;; 0x40037100
   \   00000080   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000082   0x012A             LSLS     R2,R5,#+4
   \   00000084   0x4411             ADD      R1,R1,R2
   \   00000086   0x6088             STR      R0,[R1, #+8]
     64              //在NVIC中使能PIT中断
     65              //enable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
     66            }
     67            
     68            //period = (period_ns/bus_period_ns)-1
     69            PIT->CHANNEL[pitx].LDVAL = ldval-1;
   \                     ??PIT_Init_2: (+1)
   \   00000088   0x1E60             SUBS     R0,R4,#+1
   \   0000008A   0x....             LDR.N    R1,??DataTable9_8  ;; 0x40037100
   \   0000008C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008E   0x012A             LSLS     R2,R5,#+4
   \   00000090   0x5088             STR      R0,[R1, R2]
     70            //使能中断
     71            //PIT->CHANNEL[pitx].TCTRL = PIT_TCTRL_TIE_MASK;
     72            //开始定时
     73            PIT->CHANNEL[pitx].TCTRL |= PIT_TCTRL_TEN_MASK;
   \   00000092   0x....             LDR.N    R0,??DataTable9_8  ;; 0x40037100
   \   00000094   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000096   0x0129             LSLS     R1,R5,#+4
   \   00000098   0x4408             ADD      R0,R0,R1
   \   0000009A   0x6880             LDR      R0,[R0, #+8]
   \   0000009C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000A0   0x....             LDR.N    R1,??DataTable9_8  ;; 0x40037100
   \   000000A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A4   0x012A             LSLS     R2,R5,#+4
   \   000000A6   0x4411             ADD      R1,R1,R2
   \   000000A8   0x6088             STR      R0,[R1, #+8]
     74            
     75            return 1;
   \   000000AA   0x2001             MOVS     R0,#+1
   \                     ??PIT_Init_3: (+1)
   \   000000AC   0xBC70             POP      {R4-R6}
   \   000000AE   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
     76          }
     77          
     78          /*
     79           * PIT_Deinit
     80           * PIT反初始化函数，关闭选择的PITx
     81           * 
     82           * 参数:
     83           *    pit_init_structure--PIT初始化结构体，
     84           *                        具体定义见PIT_InitTypeDef
     85           *
     86           * 输出:
     87           *    无
     88           */

   \                                 In section .text, align 2, keep-with-next
     89          void PIT_Deinit(PIT_InitTypeDef pit_init_structure)
     90          { 
   \                     PIT_Deinit: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
     91            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x4008      LDRB     R4,[SP, #+8]
     92            
     93            //参数检查
     94            ASSERT( pitx <= PIT3);        //判断模块号              
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C04             CMP      R4,#+4
   \   0000000C   0xDB03             BLT.N    ??PIT_Deinit_0
   \   0000000E   0x215E             MOVS     R1,#+94
   \   00000010   0x....             LDR.N    R0,??DataTable9_4
   \   00000012   0x.... 0x....      BL       assert_failed
     95          
     96            disable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
   \                     ??PIT_Deinit_0: (+1)
   \   00000016   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000001A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       _ZN26_INTERNAL_5_PIT_c_PIT_Init17__NVIC_DisableIRQE4IRQn
     97          
     98            //禁用中断\停止定时
     99            PIT->CHANNEL[pitx].TCTRL = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR.N    R1,??DataTable9_8  ;; 0x40037100
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x0122             LSLS     R2,R4,#+4
   \   00000028   0x4411             ADD      R1,R1,R2
   \   0000002A   0x6088             STR      R0,[R1, #+8]
    100          }
   \                     ??PIT_Deinit_1: (+1)
   \   0000002C   0xBC10             POP      {R4}
   \   0000002E   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    101          
    102          /*
    103           * PIT_EnableIrq
    104           * 使能PITx中断
    105           * 
    106           * 参数:
    107           *    pit_init_structure--PIT初始化结构体，
    108           *                        具体定义见PIT_InitTypeDef
    109           *
    110           * 输出:
    111           *    无
    112           *
    113           */

   \                                 In section .text, align 2, keep-with-next
    114          void PIT_EnableIrq(PIT_InitTypeDef pit_init_structure)
    115          {
   \                     PIT_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    116            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x4008      LDRB     R4,[SP, #+8]
    117            
    118            //参数检查
    119            ASSERT( pitx <= PIT3);                //判断PITx
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C04             CMP      R4,#+4
   \   0000000C   0xDB03             BLT.N    ??PIT_EnableIrq_0
   \   0000000E   0x2177             MOVS     R1,#+119
   \   00000010   0x....             LDR.N    R0,??DataTable9_4
   \   00000012   0x.... 0x....      BL       assert_failed
    120          
    121            enable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
   \                     ??PIT_EnableIrq_0: (+1)
   \   00000016   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000001A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       _ZN26_INTERNAL_5_PIT_c_PIT_Init16__NVIC_EnableIRQE4IRQn
    122          }
   \                     ??PIT_EnableIrq_1: (+1)
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    123          
    124          /*
    125           * PIT_DisableIrq
    126           * 禁用PITx中断
    127           * 
    128           * 参数:
    129           *    pit_init_structure--PIT初始化结构体，
    130           *                        具体定义见PIT_InitTypeDef
    131           *
    132           * 输出:
    133           *    无
    134           *
    135           */

   \                                 In section .text, align 2, keep-with-next
    136          void PIT_DisableIrq(PIT_InitTypeDef pit_init_structure)
    137          {
   \                     PIT_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    138            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x4008      LDRB     R4,[SP, #+8]
    139            
    140            //参数检查
    141            ASSERT( pitx <= PIT3);                //判断PITx
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C04             CMP      R4,#+4
   \   0000000C   0xDB03             BLT.N    ??PIT_DisableIrq_0
   \   0000000E   0x218D             MOVS     R1,#+141
   \   00000010   0x....             LDR.N    R0,??DataTable9_4
   \   00000012   0x.... 0x....      BL       assert_failed
    142            
    143            disable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx));
   \                     ??PIT_DisableIrq_0: (+1)
   \   00000016   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000001A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       _ZN26_INTERNAL_5_PIT_c_PIT_Init17__NVIC_DisableIRQE4IRQn
    144          }
   \                     ??PIT_DisableIrq_1: (+1)
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    145          
    146          
    147          /*
    148           * PIT0--PIT3中断处理函数
    149           * 与启动文件startup_K60.s中的中断向量表关联
    150           * 用户无需修改，程序自动进入对应通道中断函数
    151           */
    152          

   \                                 In section .text, align 2, keep-with-next
    153          void PIT0_IRQHandler(void)
    154          {
   \                     PIT0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    155          #if (UCOS_II > 0u)
    156            OS_CPU_SR  cpu_sr = 0u;
    157            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    158            OSIntEnter();
    159            OS_EXIT_CRITICAL();
    160          #endif
    161            
    162            //调用用户自定义中断服务
    163            PIT_ISR[0]();  
   \   00000002   0x....             LDR.N    R0,??DataTable9_7
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    164            //清除中断标志位
    165            PIT->CHANNEL[0].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable9_9  ;; 0x4003710c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable9_9  ;; 0x4003710c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    166            
    167          #if (UCOS_II > 0u)
    168            OSIntExit();          //告知系统此时即将离开中断服务子函数
    169          #endif
    170          }
   \                     ??PIT0_IRQHandler_0: (+1)
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    171          void PIT1_IRQHandler(void)
    172          {
   \                     _Z15PIT1_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    173          #if (UCOS_II > 0u)
    174            OS_CPU_SR  cpu_sr = 0u;
    175            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    176            OSIntEnter();
    177            OS_EXIT_CRITICAL();
    178          #endif
    179            
    180            //调用用户自定义中断服务
    181            PIT_ISR[1]();  
   \   00000002   0x....             LDR.N    R0,??DataTable9_7
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x4780             BLX      R0
    182            //清除中断标志位
    183            PIT->CHANNEL[1].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable9_10  ;; 0x4003711c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable9_10  ;; 0x4003711c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    184            
    185          #if (UCOS_II > 0u)
    186            OSIntExit();          //告知系统此时即将离开中断服务子函数
    187          #endif
    188          }
   \                     ??PIT1_IRQHandler_0: (+1)
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    189          void PIT2_IRQHandler(void)
    190          {
   \                     _Z15PIT2_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    191          #if (UCOS_II > 0u)
    192            OS_CPU_SR  cpu_sr = 0u;
    193            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    194            OSIntEnter();
    195            OS_EXIT_CRITICAL();
    196          #endif
    197            
    198            //调用用户自定义中断服务
    199            PIT_ISR[2]();  
   \   00000002   0x....             LDR.N    R0,??DataTable9_7
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x4780             BLX      R0
    200            //清除中断标志位
    201            PIT->CHANNEL[2].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable9_11  ;; 0x4003712c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable9_11  ;; 0x4003712c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    202            
    203          #if (UCOS_II > 0u)
    204            OSIntExit();          //告知系统此时即将离开中断服务子函数
    205          #endif
    206          }
   \                     ??PIT2_IRQHandler_0: (+1)
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    207          void PIT3_IRQHandler(void)
    208          {
   \                     _Z15PIT3_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    209          #if (UCOS_II > 0u)
    210            OS_CPU_SR  cpu_sr = 0u;
    211            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    212            OSIntEnter();
    213            OS_EXIT_CRITICAL();
    214          #endif
    215            
    216            //调用用户自定义中断服务
    217            PIT_ISR[3]();  
   \   00000002   0x....             LDR.N    R0,??DataTable9_7
   \   00000004   0x68C0             LDR      R0,[R0, #+12]
   \   00000006   0x4780             BLX      R0
    218            //清除中断标志位
    219            PIT->CHANNEL[3].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable9_12  ;; 0x4003713c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable9_12  ;; 0x4003713c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    220            
    221          #if (UCOS_II > 0u)
    222            OSIntExit();          //告知系统此时即将离开中断服务子函数
    223          #endif
    224          }
   \                     ??PIT3_IRQHandler_0: (+1)
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x40037000         DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     PIT_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x40037100         DC32     0x40037100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x4003711C         DC32     0x4003711c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x4003712C         DC32     0x4003712c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x4003713C         DC32     0x4003713c

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x78          DC8 5CH, 78H, 73H, 6BH, 31H, 39H, 39H, 34H
   \              0x73 0x6B    
   \              0x31 0x39    
   \              0x39 0x34    
   \   00000010   0x30 0x39          DC8 30H, 39H, 31H, 30H, 5CH, 44H, 65H, 73H
   \              0x31 0x30    
   \              0x5C 0x44    
   \              0x65 0x73    
   \   00000018   0x6B 0x74          DC8 6BH, 74H, 6FH, 70H, 5CH, 66H, 6CH, 69H
   \              0x6F 0x70    
   \              0x5C 0x66    
   \              0x6C 0x69    
   \   00000020   0x67 0x68          DC8 67H, 68H, 74H, 43H, 6FH, 6EH, 74H, 72H
   \              0x74 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \   00000028   0x6F 0x6C          DC8 6FH, 6CH, 6CH, 65H, 72H, 2DH, 31H, 5CH
   \              0x6C 0x65    
   \              0x72 0x2D    
   \              0x31 0x5C    
   \   00000030   0x66 0x6C          DC8 66H, 6CH, 69H, 67H, 68H, 74H, 43H, 6FH
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x43 0x6F    
   \   00000038   0x6E 0x74          DC8 6EH, 74H, 72H, 6FH, 6CH, 6CH, 65H, 72H
   \              0x72 0x6F    
   \              0x6C 0x6C    
   \              0x65 0x72    
   \   00000040   0x2D 0x31          DC8 2DH, 31H, 5CH, 70H, 72H, 6FH, 67H, 72H
   \              0x5C 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \   00000048   0x61 0x6D          DC8 61H, 6DH, 5CH, 6CH, 69H, 62H, 5CH, 4CH
   \              0x5C 0x6C    
   \              0x69 0x62    
   \              0x5C 0x4C    
   \   00000050   0x50 0x4C          DC8 50H, 4CH, 44H, 5CH, 48H, 57H, 5CH, 50H
   \              0x44 0x5C    
   \              0x48 0x57    
   \              0x5C 0x50    
   \   00000058   0x49 0x54          DC8 49H, 54H, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \   0000005D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   PIT0_IRQHandler
         8   -- Indirect call
       8   PIT1_IRQHandler()
         8   -- Indirect call
       8   PIT2_IRQHandler()
         8   -- Indirect call
       8   PIT3_IRQHandler()
         8   -- Indirect call
      24   PIT_Deinit
        24   -> __NVIC_DisableIRQ(IRQn)
        24   -> assert_failed
      24   PIT_DisableIrq
        24   -> __NVIC_DisableIRQ(IRQn)
        24   -> assert_failed
      24   PIT_EnableIrq
        24   -> __NVIC_EnableIRQ(IRQn)
        24   -> assert_failed
      32   PIT_Init
        32   -> assert_failed
       0   __NVIC_DisableIRQ(IRQn)
       0   __NVIC_EnableIRQ(IRQn)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      96  ?_0
      22  PIT0_IRQHandler
      22  PIT1_IRQHandler()
      22  PIT2_IRQHandler()
      22  PIT3_IRQHandler()
      50  PIT_Deinit
      38  PIT_DisableIrq
      38  PIT_EnableIrq
      16  PIT_ISR
     178  PIT_Init
      28  __NVIC_DisableIRQ(IRQn)
      28  __NVIC_EnableIRQ(IRQn)
      64  -- Other

 
  64 bytes in section .ARM.exidx
  16 bytes in section .bss
  96 bytes in section .rodata
 500 bytes in section .text
 
 500 bytes of CODE  memory
 160 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
