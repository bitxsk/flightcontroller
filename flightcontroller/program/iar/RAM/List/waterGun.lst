###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       18/Jun/2018  19:48:05
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\waterGun.cpp
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW392D.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\waterGun.cpp
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\waterGun.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\waterGun.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\waterGun.cpp
      1          #include "waterGun.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void GPIO_Output_b(GPIO_Type *, uint32, uint8)
   \                     GPIO_Output_b: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x6804             LDR      R4,[R0, #+0]
   \   00000004   0x2301             MOVS     R3,#+1
   \   00000006   0x408B             LSLS     R3,R3,R1
   \   00000008   0x439C             BICS     R4,R4,R3
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0xFA12 0xF301      LSLS     R3,R2,R1
   \   00000010   0x431C             ORRS     R4,R3,R4
   \   00000012   0x6004             STR      R4,[R0, #+0]
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
      2          

   \                                 In section .bss, align 4
      3          CWaterGun *waterGun;
   \                     waterGun:
   \   00000000                      DS8 4
      4          
      5          

   \                                 In section .text, align 2, keep-with-next
      6          void WaterGun_Init()
      7          {
      8            static CWaterGun waterGun_0;
      9            waterGun = &waterGun_0;
   \                     _Z13WaterGun_Initv: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_1
   \   00000002   0x....             LDR.N    R1,??DataTable3_2
   \   00000004   0x6008             STR      R0,[R1, #+0]
     10            
     11            waterGun->servoMiddle1 = 3000;
   \   00000006   0xF640 0x30B8      MOVW     R0,#+3000
   \   0000000A   0x....             LDR.N    R1,??DataTable3_2
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     12            waterGun->servoMiddle2 = 3000;
   \   00000010   0xF640 0x30B8      MOVW     R0,#+3000
   \   00000014   0x....             LDR.N    R1,??DataTable3_2
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0x6048             STR      R0,[R1, #+4]
     13            waterGun->servoMax1 = 6000; //机械结构限制范围最大值
   \   0000001A   0xF241 0x7070      MOVW     R0,#+6000
   \   0000001E   0x....             LDR.N    R1,??DataTable3_2
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x6088             STR      R0,[R1, #+8]
     14            waterGun->servoMax2 = 6000;
   \   00000024   0xF241 0x7070      MOVW     R0,#+6000
   \   00000028   0x....             LDR.N    R1,??DataTable3_2
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x60C8             STR      R0,[R1, #+12]
     15            waterGun->servoMin1 = 2000;
   \   0000002E   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000032   0x....             LDR.N    R1,??DataTable3_2
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x6108             STR      R0,[R1, #+16]
     16            waterGun->servoMin2 = 2000;
   \   00000038   0xF44F 0x60FA      MOV      R0,#+2000
   \   0000003C   0x....             LDR.N    R1,??DataTable3_2
   \   0000003E   0x6809             LDR      R1,[R1, #+0]
   \   00000040   0x6148             STR      R0,[R1, #+20]
     17            
     18            waterGun->horizontalSpeed = 800; //占空比变化每秒
   \   00000042   0xF44F 0x7048      MOV      R0,#+800
   \   00000046   0x....             LDR.N    R1,??DataTable3_2
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x6188             STR      R0,[R1, #+24]
     19          //  waterGun->verticalSpeed = 800; //根据横向速度与次数计算得出
     20            waterGun->horizontalAngleP = 300; //实际喷洒边界偏移量
   \   0000004C   0xF44F 0x7096      MOV      R0,#+300
   \   00000050   0x....             LDR.N    R1,??DataTable3_2
   \   00000052   0x6809             LDR      R1,[R1, #+0]
   \   00000054   0x6208             STR      R0,[R1, #+32]
     21            waterGun->horizontalAngleM = -300;
   \   00000056   0x....             LDR.N    R0,??DataTable3_3  ;; 0xfffffed4
   \   00000058   0x....             LDR.N    R1,??DataTable3_2
   \   0000005A   0x6809             LDR      R1,[R1, #+0]
   \   0000005C   0x6248             STR      R0,[R1, #+36]
     22            waterGun->verticalAngleP = 300;
   \   0000005E   0xF44F 0x7096      MOV      R0,#+300
   \   00000062   0x....             LDR.N    R1,??DataTable3_2
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x6288             STR      R0,[R1, #+40]
     23            waterGun->verticalAngleM = -300;
   \   00000068   0x....             LDR.N    R0,??DataTable3_3  ;; 0xfffffed4
   \   0000006A   0x....             LDR.N    R1,??DataTable3_2
   \   0000006C   0x6809             LDR      R1,[R1, #+0]
   \   0000006E   0x62C8             STR      R0,[R1, #+44]
     24            
     25            waterGun->horizontalSprayTime = 5;
   \   00000070   0x2005             MOVS     R0,#+5
   \   00000072   0x....             LDR.N    R1,??DataTable3_2
   \   00000074   0x6809             LDR      R1,[R1, #+0]
   \   00000076   0x6308             STR      R0,[R1, #+48]
     26          }
   \   00000078   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 8
   \                     `WaterGun_Init()::waterGun_0`:
   \   00000000                      DS8 80
     27          

   \                                 In section .text, align 4, keep-with-next
     28          void CWaterGun::update()
     29          {
   \                     _ZN9CWaterGun6updateEv: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xED2D 0x8B06      VPUSH    {D8-D10}
   \   00000008   0xB084             SUB      SP,SP,#+16
   \   0000000A   0x0006             MOVS     R6,R0
     30            if(working)
   \   0000000C   0xF896 0x004A      LDRB     R0,[R6, #+74]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xF000 0x80C5      BEQ.W    ??update_0
     31            {
     32              int horizontalRange = horizontalAngleP - horizontalAngleM;
   \   00000016   0x6A31             LDR      R1,[R6, #+32]
   \   00000018   0x6A70             LDR      R0,[R6, #+36]
   \   0000001A   0x1A09             SUBS     R1,R1,R0
   \   0000001C   0x9100             STR      R1,[SP, #+0]
     33              double horizontalPeriod = (double)horizontalRange / (double)horizontalSpeed;
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0x.... 0x....      BL       __aeabi_i2d
   \   00000024   0x0004             MOVS     R4,R0
   \   00000026   0x000D             MOVS     R5,R1
   \   00000028   0x69B0             LDR      R0,[R6, #+24]
   \   0000002A   0x.... 0x....      BL       __aeabi_i2d
   \   0000002E   0x0002             MOVS     R2,R0
   \   00000030   0x000B             MOVS     R3,R1
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x0029             MOVS     R1,R5
   \   00000036   0x.... 0x....      BL       __aeabi_ddiv
   \   0000003A   0xEC41 0x0B18      VMOV     D8,R0,R1
     34              double time = (t - sprayingStartTime) / 1000.0f;
   \   0000003E   0x....             LDR.N    R0,??DataTable3_4
   \   00000040   0x6801             LDR      R1,[R0, #+0]
   \   00000042   0x6B70             LDR      R0,[R6, #+52]
   \   00000044   0x1A09             SUBS     R1,R1,R0
   \   00000046   0xEE00 0x1A10      VMOV     S0,R1
   \   0000004A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000004E   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x447a0000
   \   00000052   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000056   0xEE10 0x0A10      VMOV     R0,S0
   \   0000005A   0x.... 0x....      BL       __aeabi_f2d
   \   0000005E   0xEC41 0x0B19      VMOV     D9,R0,R1
     35              
     36              if((int)(time / horizontalPeriod ) % 2 == 0)
   \   00000062   0xEC51 0x0B19      VMOV     R0,R1,D9
   \   00000066   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   0000006A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000006E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000072   0x2102             MOVS     R1,#+2
   \   00000074   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000078   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD12C             BNE.N    ??update_1
     37              {
     38                servoControl1 = horizontalAngleM + 
     39                  (time / horizontalPeriod - (int)(time / horizontalPeriod)) * horizontalRange;
   \   00000080   0x6A70             LDR      R0,[R6, #+36]
   \   00000082   0x.... 0x....      BL       __aeabi_i2d
   \   00000086   0x4680             MOV      R8,R0
   \   00000088   0x4689             MOV      R9,R1
   \   0000008A   0xEC51 0x0B19      VMOV     R0,R1,D9
   \   0000008E   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   00000092   0x.... 0x....      BL       __aeabi_ddiv
   \   00000096   0x0004             MOVS     R4,R0
   \   00000098   0x000D             MOVS     R5,R1
   \   0000009A   0xEC51 0x0B19      VMOV     R0,R1,D9
   \   0000009E   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   000000A2   0x.... 0x....      BL       __aeabi_ddiv
   \   000000A6   0x.... 0x....      BL       __aeabi_d2iz
   \   000000AA   0x.... 0x....      BL       __aeabi_i2d
   \   000000AE   0x0002             MOVS     R2,R0
   \   000000B0   0x000B             MOVS     R3,R1
   \   000000B2   0x0020             MOVS     R0,R4
   \   000000B4   0x0029             MOVS     R1,R5
   \   000000B6   0x.... 0x....      BL       __aeabi_dsub
   \   000000BA   0x0004             MOVS     R4,R0
   \   000000BC   0x000D             MOVS     R5,R1
   \   000000BE   0x9800             LDR      R0,[SP, #+0]
   \   000000C0   0x.... 0x....      BL       __aeabi_i2d
   \   000000C4   0x0022             MOVS     R2,R4
   \   000000C6   0x002B             MOVS     R3,R5
   \   000000C8   0x.... 0x....      BL       __aeabi_dmul
   \   000000CC   0x4642             MOV      R2,R8
   \   000000CE   0x464B             MOV      R3,R9
   \   000000D0   0x.... 0x....      BL       __aeabi_dadd
   \   000000D4   0xE9C6 0x010E      STRD     R0,R1,[R6, #+56]
   \   000000D8   0xE02B             B.N      ??update_2
     40              }
     41              else
     42              {
     43                 servoControl1 = horizontalAngleP - 
     44                  (time / horizontalPeriod - (int)(time / horizontalPeriod)) * horizontalRange;
   \                     ??update_1: (+1)
   \   000000DA   0x6A30             LDR      R0,[R6, #+32]
   \   000000DC   0x.... 0x....      BL       __aeabi_i2d
   \   000000E0   0x4680             MOV      R8,R0
   \   000000E2   0x4689             MOV      R9,R1
   \   000000E4   0x9800             LDR      R0,[SP, #+0]
   \   000000E6   0x.... 0x....      BL       __aeabi_i2d
   \   000000EA   0x0004             MOVS     R4,R0
   \   000000EC   0x000D             MOVS     R5,R1
   \   000000EE   0xEC51 0x0B19      VMOV     R0,R1,D9
   \   000000F2   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   000000F6   0x.... 0x....      BL       __aeabi_ddiv
   \   000000FA   0x.... 0x....      BL       __aeabi_d2iz
   \   000000FE   0x.... 0x....      BL       __aeabi_i2d
   \   00000102   0x4682             MOV      R10,R0
   \   00000104   0x468B             MOV      R11,R1
   \   00000106   0xEC51 0x0B19      VMOV     R0,R1,D9
   \   0000010A   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   0000010E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000112   0x0002             MOVS     R2,R0
   \   00000114   0x000B             MOVS     R3,R1
   \   00000116   0x4650             MOV      R0,R10
   \   00000118   0x4659             MOV      R1,R11
   \   0000011A   0x.... 0x....      BL       __aeabi_dsub
   \   0000011E   0x0022             MOVS     R2,R4
   \   00000120   0x002B             MOVS     R3,R5
   \   00000122   0x.... 0x....      BL       __aeabi_dmul
   \   00000126   0x4642             MOV      R2,R8
   \   00000128   0x464B             MOV      R3,R9
   \   0000012A   0x.... 0x....      BL       __aeabi_dadd
   \   0000012E   0xE9C6 0x010E      STRD     R0,R1,[R6, #+56]
     45              }
     46              
     47              int verticalRange = verticalAngleP - verticalAngleM;
   \                     ??update_2: (+1)
   \   00000132   0x6AB0             LDR      R0,[R6, #+40]
   \   00000134   0x6AF7             LDR      R7,[R6, #+44]
   \   00000136   0x1BC7             SUBS     R7,R0,R7
     48              double verticalPeriod = horizontalPeriod * horizontalSprayTime;
   \   00000138   0x6B30             LDR      R0,[R6, #+48]
   \   0000013A   0x.... 0x....      BL       __aeabi_i2d
   \   0000013E   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   00000142   0x.... 0x....      BL       __aeabi_dmul
   \   00000146   0xEC41 0x0B1A      VMOV     D10,R0,R1
     49              
     50              servoControl2 = verticalAngleP - 
     51                  (time / verticalPeriod) * verticalRange;
   \   0000014A   0x6AB0             LDR      R0,[R6, #+40]
   \   0000014C   0x.... 0x....      BL       __aeabi_i2d
   \   00000150   0x4680             MOV      R8,R0
   \   00000152   0x4689             MOV      R9,R1
   \   00000154   0xEC51 0x0B19      VMOV     R0,R1,D9
   \   00000158   0xEC53 0x2B1A      VMOV     R2,R3,D10
   \   0000015C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000160   0x0004             MOVS     R4,R0
   \   00000162   0x000D             MOVS     R5,R1
   \   00000164   0x0038             MOVS     R0,R7
   \   00000166   0x.... 0x....      BL       __aeabi_i2d
   \   0000016A   0x0022             MOVS     R2,R4
   \   0000016C   0x002B             MOVS     R3,R5
   \   0000016E   0x.... 0x....      BL       __aeabi_dmul
   \   00000172   0x0002             MOVS     R2,R0
   \   00000174   0x000B             MOVS     R3,R1
   \   00000176   0x4640             MOV      R0,R8
   \   00000178   0x4649             MOV      R1,R9
   \   0000017A   0x.... 0x....      BL       __aeabi_dsub
   \   0000017E   0xE9C6 0x0110      STRD     R0,R1,[R6, #+64]
     52              
     53              if((int)(time / horizontalPeriod) >= horizontalSprayTime)
   \   00000182   0xEC51 0x0B19      VMOV     R0,R1,D9
   \   00000186   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   0000018A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000018E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000192   0x6B31             LDR      R1,[R6, #+48]
   \   00000194   0x4288             CMP      R0,R1
   \   00000196   0xDB0D             BLT.N    ??update_3
     54              {
     55                stopSpraying();
   \   00000198   0x0030             MOVS     R0,R6
   \   0000019A   0x.... 0x....      BL       _ZN9CWaterGun12stopSprayingEv
   \   0000019E   0xE009             B.N      ??update_3
     56              }
     57            }
     58            else
     59            {
     60              servoControl1 = horizontalAngleM;
   \                     ??update_0: (+1)
   \   000001A0   0x6A70             LDR      R0,[R6, #+36]
   \   000001A2   0x.... 0x....      BL       __aeabi_i2d
   \   000001A6   0xE9C6 0x010E      STRD     R0,R1,[R6, #+56]
     61              servoControl2 = verticalAngleP;
   \   000001AA   0x6AB0             LDR      R0,[R6, #+40]
   \   000001AC   0x.... 0x....      BL       __aeabi_i2d
   \   000001B0   0xE9C6 0x0110      STRD     R0,R1,[R6, #+64]
     62            }
     63           
     64          //  FTM_PWM_ChangeDuty(FTM0, FTM_Ch0, limiter(servoMin1, servoMax1, servoMiddle1 + (int)servoControl1));
     65           // FTM_PWM_ChangeDuty(FTM0, FTM_Ch1, limiter(servoMin2, servoMax2, servoMiddle2 + (int)servoControl2));  
     66          }
   \                     ??update_3: (+1)
   \   000001B4   0xB004             ADD      SP,SP,#+16
   \   000001B6   0xECBD 0x8B06      VPOP     {D8-D10}
   \   000001BA   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
     67          

   \                                 In section .text, align 2, keep-with-next
     68          void CWaterGun::startSpraying()
     69          {
   \                     _ZN9CWaterGun13startSprayingEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     70            sprayingStartTime = t;
   \   00000004   0x....             LDR.N    R0,??DataTable3_4
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6360             STR      R0,[R4, #+52]
     71            working = true;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xF884 0x004A      STRB     R0,[R4, #+74]
     72            GPIO_Output_b(PTB, 22, 1);
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x2116             MOVS     R1,#+22
   \   00000014   0x....             LDR.N    R0,??DataTable3_5  ;; 0x400ff040
   \   00000016   0x.... 0x....      BL       GPIO_Output_b
     73          }
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     74          

   \                                 In section .text, align 2, keep-with-next
     75          void CWaterGun::stopSpraying()
     76          {
   \                     _ZN9CWaterGun12stopSprayingEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     77            working = false;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF884 0x004A      STRB     R0,[R4, #+74]
     78            done = true;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xF884 0x004B      STRB     R0,[R4, #+75]
     79            GPIO_Output_b(PTB, 22, 0);
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x2116             MOVS     R1,#+22
   \   00000014   0x....             LDR.N    R0,??DataTable3_5  ;; 0x400ff040
   \   00000016   0x.... 0x....      BL       GPIO_Output_b
     80          }
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     `WaterGun_Init()::waterGun_0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     waterGun

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0xFFFFFED4         DC32     0xfffffed4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x400FF040         DC32     0x400ff040
     81          
     82          template<typename T>
     83          T limiter(T lowerLimit, T upperLimit, T data)
     84          {
     85            if(data > upperLimit)
     86            {
     87              data = upperLimit;
     88            }
     89            else if(data < lowerLimit)
     90            {
     91              data = lowerLimit;
     92            }
     93            return data;
     94          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CWaterGun::startSpraying()
         8   -> GPIO_Output_b
       8   CWaterGun::stopSpraying()
         8   -> GPIO_Output_b
      80   CWaterGun::update()
        80   -> CWaterGun::stopSpraying()
        80   -> __aeabi_d2iz
        80   -> __aeabi_dadd
        80   -> __aeabi_ddiv
        80   -> __aeabi_dmul
        80   -> __aeabi_dsub
        80   -> __aeabi_f2d
        80   -> __aeabi_i2d
       4   GPIO_Output_b
       0   WaterGun_Init()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
      28  CWaterGun::startSpraying()
      28  CWaterGun::stopSpraying()
     446  CWaterGun::update()
      24  GPIO_Output_b
     122  WaterGun_Init()
       4  waterGun
      80  waterGun_0

 
  84 bytes in section .bss
 672 bytes in section .text
 
 648 bytes of CODE memory (+ 24 bytes shared)
  84 bytes of DATA memory

Errors: none
Warnings: none
