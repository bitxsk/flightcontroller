###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       16/May/2018  07:33:01
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\MadgwickAHRS.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW89.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\MadgwickAHRS.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\MadgwickAHRS.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\MadgwickAHRS.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\MadgwickAHRS.c
      1          //=====================================================================================================
      2          // MadgwickAHRS.c
      3          //=====================================================================================================
      4          //
      5          // Implementation of Madgwick's IMU and AHRS algorithms.
      6          // See: http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms
      7          //
      8          // Date      Author          Notes
      9          // 29/09/2011  SOH Madgwick    Initial release
     10          // 02/10/2011  SOH Madgwick  Optimised for reduced CPU load
     11          // 19/02/2012  SOH Madgwick  Magnetometer measurement is normalised
     12          //
     13          //=====================================================================================================
     14          
     15          //---------------------------------------------------------------------------------------------------
     16          // Header files
     17          
     18          #include "MadgwickAHRS.h"
     19          #include <math.h>
     20          
     21          //---------------------------------------------------------------------------------------------------
     22          // Definitions
     23          
     24          #define sampleFreq  500.0f    // sample frequency in Hz
     25          #define betaDef    0.08f    // 2 * proportional gain 0.1f
     26          
     27          //---------------------------------------------------------------------------------------------------
     28          // Variable definitions
     29          

   \                                 In section .data, align 8
     30          double beta = betaDef;          // 2 * proportional gain (Kp)
   \                     beta:
   \   00000000   0x40000000         DC32 40000000H, 3FB47AE1H
   \              0x3FB47AE1   

   \                                 In section .data, align 4
     31          float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;  // quaternion of sensor frame relative to auxiliary frame
   \                     q0:
   \   00000000   0x3F800000         DC32 3F800000H

   \                                 In section .bss, align 4
   \                     q1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     q2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     q3:
   \   00000000                      DS8 4
     32          
     33          //---------------------------------------------------------------------------------------------------
     34          // Function declarations
     35          
     36          float invSqrt(float x);
     37          
     38          //====================================================================================================
     39          // Functions
     40          
     41          //---------------------------------------------------------------------------------------------------
     42          // AHRS algorithm update
     43          

   \                                 In section .text, align 4, keep-with-next
     44          void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) 
     45          {
   \                     _Z18MadgwickAHRSupdatefffffffff: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0xED2D 0x8B10      VPUSH    {D8-D15}
   \   00000006   0xED2D 0x0A03      VPUSH    {S0-S2}
   \   0000000A   0xB09F             SUB      SP,SP,#+124
   \   0000000C   0xEEF0 0x9A61      VMOV.F32 S19,S3
   \   00000010   0xEEB0 0xAA42      VMOV.F32 S20,S4
   \   00000014   0xEEF0 0xAA62      VMOV.F32 S21,S5
   \   00000018   0xEEB0 0x8A43      VMOV.F32 S16,S6
   \   0000001C   0xEEF0 0x8A63      VMOV.F32 S17,S7
   \   00000020   0xEEB0 0x9A44      VMOV.F32 S18,S8
     46            float recipNorm;
     47            float s0, s1, s2, s3;
     48            float qDot1, qDot2, qDot3, qDot4;
     49            float hx, hy;
     50            float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
     51          
     52            // Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
     53            if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
   \   00000024   0xEEB5 0x8A40      VCMP.F32 S16,#0.0
   \   00000028   0xEEF1 0xFA10      FMSTAT   
   \   0000002C   0xD119             BNE.N    ??MadgwickAHRSupdate_0
   \   0000002E   0xEEF5 0x8A40      VCMP.F32 S17,#0.0
   \   00000032   0xEEF1 0xFA10      FMSTAT   
   \   00000036   0xD114             BNE.N    ??MadgwickAHRSupdate_0
   \   00000038   0xEEB5 0x9A40      VCMP.F32 S18,#0.0
   \   0000003C   0xEEF1 0xFA10      FMSTAT   
   \   00000040   0xD10F             BNE.N    ??MadgwickAHRSupdate_0
     54              MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
   \   00000042   0xEEF0 0x2A6A      VMOV.F32 S5,S21
   \   00000046   0xEEB0 0x2A4A      VMOV.F32 S4,S20
   \   0000004A   0xEEF0 0x1A69      VMOV.F32 S3,S19
   \   0000004E   0xED9D 0x1A21      VLDR     S2,[SP, #+132]
   \   00000052   0xEDDD 0x0A20      VLDR     S1,[SP, #+128]
   \   00000056   0xED9D 0x0A1F      VLDR     S0,[SP, #+124]
   \   0000005A   0x.... 0x....      BL       _Z21MadgwickAHRSupdateIMUffffff
     55              return;
   \   0000005E   0xF000 0xBD6E      B.W      ??MadgwickAHRSupdate_1
     56            }
     57          
     58            // Rate of change of quaternion from gyroscope
     59            qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
   \                     ??MadgwickAHRSupdate_0: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000066   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000006A   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   0000006E   0xEDDD 0x0A1F      VLDR     S1,[SP, #+124]
   \   00000072   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000076   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   0000007A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000007E   0xED9D 0x1A20      VLDR     S2,[SP, #+128]
   \   00000082   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   0000008A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000008E   0xED9D 0x1A21      VLDR     S2,[SP, #+132]
   \   00000092   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   00000096   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   0000009A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000009E   0xED8D 0x0A0D      VSTR     S0,[SP, #+52]
     60            qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
   \   000000A2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000000A6   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000AA   0xEDDD 0x0A1F      VLDR     S1,[SP, #+124]
   \   000000AE   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000000B2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000000B6   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000BA   0xED9D 0x1A21      VLDR     S2,[SP, #+132]
   \   000000BE   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   000000C6   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000CA   0xED9D 0x1A20      VLDR     S2,[SP, #+128]
   \   000000CE   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   000000D2   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   000000D6   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000000DA   0xED8D 0x0A0C      VSTR     S0,[SP, #+48]
     61            qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
   \   000000DE   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000000E2   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000E6   0xEDDD 0x0A20      VLDR     S1,[SP, #+128]
   \   000000EA   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000000EE   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   000000F2   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000F6   0xED9D 0x1A21      VLDR     S2,[SP, #+132]
   \   000000FA   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   00000102   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000106   0xED9D 0x1A1F      VLDR     S2,[SP, #+124]
   \   0000010A   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000010E   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   00000112   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000116   0xED8D 0x0A0B      VSTR     S0,[SP, #+44]
     62            qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
   \   0000011A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   0000011E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000122   0xEDDD 0x0A21      VLDR     S1,[SP, #+132]
   \   00000126   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000012A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   0000012E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000132   0xED9D 0x1A20      VLDR     S2,[SP, #+128]
   \   00000136   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000013A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   0000013E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000142   0xED9D 0x1A1F      VLDR     S2,[SP, #+124]
   \   00000146   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   0000014A   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   0000014E   0xEE60 0xFA20      VMUL.F32 S31,S0,S1
     63          
     64            // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
     65            if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
   \   00000152   0xEEF5 0x9A40      VCMP.F32 S19,#0.0
   \   00000156   0xEEF1 0xFA10      FMSTAT   
   \   0000015A   0xD10A             BNE.N    ??MadgwickAHRSupdate_2
   \   0000015C   0xEEB5 0xAA40      VCMP.F32 S20,#0.0
   \   00000160   0xEEF1 0xFA10      FMSTAT   
   \   00000164   0xD105             BNE.N    ??MadgwickAHRSupdate_2
   \   00000166   0xEEF5 0xAA40      VCMP.F32 S21,#0.0
   \   0000016A   0xEEF1 0xFA10      FMSTAT   
   \   0000016E   0xF000 0x8464      BEQ.W    ??MadgwickAHRSupdate_3
     66          
     67              // Normalise accelerometer measurement
     68              recipNorm = invSqrt(ax * ax + ay * ay + az * az);
   \                     ??MadgwickAHRSupdate_2: (+1)
   \   00000172   0xEE29 0x0AA9      VMUL.F32 S0,S19,S19
   \   00000176   0xEE0A 0x0A0A      VMLA.F32 S0,S20,S20
   \   0000017A   0xEE0A 0x0AAA      VMLA.F32 S0,S21,S21
   \   0000017E   0x.... 0x....      BL       _Z7invSqrtf
   \   00000182   0xED8D 0x0A00      VSTR     S0,[SP, #+0]
     69              ax *= recipNorm;
   \   00000186   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   0000018A   0xEE69 0x9A80      VMUL.F32 S19,S19,S0
     70              ay *= recipNorm;
   \   0000018E   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   00000192   0xEE2A 0xAA00      VMUL.F32 S20,S20,S0
     71              az *= recipNorm;   
   \   00000196   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   0000019A   0xEE6A 0xAA80      VMUL.F32 S21,S21,S0
     72          
     73              // Normalise magnetometer measurement
     74              recipNorm = invSqrt(mx * mx + my * my + mz * mz);
   \   0000019E   0xEE28 0x0A08      VMUL.F32 S0,S16,S16
   \   000001A2   0xEE08 0x0AA8      VMLA.F32 S0,S17,S17
   \   000001A6   0xEE09 0x0A09      VMLA.F32 S0,S18,S18
   \   000001AA   0x.... 0x....      BL       _Z7invSqrtf
   \   000001AE   0xED8D 0x0A00      VSTR     S0,[SP, #+0]
     75              mx *= recipNorm;
   \   000001B2   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   000001B6   0xEE28 0x8A00      VMUL.F32 S16,S16,S0
     76              my *= recipNorm;
   \   000001BA   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   000001BE   0xEE68 0x8A80      VMUL.F32 S17,S17,S0
     77              mz *= recipNorm;
   \   000001C2   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   000001C6   0xEE29 0x9A00      VMUL.F32 S18,S18,S0
     78          
     79              // Auxiliary variables to avoid repeated arithmetic
     80              _2q0mx = 2.0f * q0 * mx;
   \   000001CA   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000001CE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000001D2   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   000001D6   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001DA   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   000001DE   0xED8D 0x0A16      VSTR     S0,[SP, #+88]
     81              _2q0my = 2.0f * q0 * my;
   \   000001E2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000001E6   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000001EA   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   000001EE   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001F2   0xEE20 0x0A28      VMUL.F32 S0,S0,S17
   \   000001F6   0xED8D 0x0A15      VSTR     S0,[SP, #+84]
     82              _2q0mz = 2.0f * q0 * mz;
   \   000001FA   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000001FE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000202   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000206   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000020A   0xEE20 0x0A09      VMUL.F32 S0,S0,S18
   \   0000020E   0xED8D 0x0A14      VSTR     S0,[SP, #+80]
     83              _2q1mx = 2.0f * q1 * mx;
   \   00000212   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000216   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000021A   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   0000021E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000222   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   00000226   0xED8D 0x0A13      VSTR     S0,[SP, #+76]
     84              _2q0 = 2.0f * q0;
   \   0000022A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   0000022E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000232   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000236   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000023A   0xED8D 0x0A10      VSTR     S0,[SP, #+64]
     85              _2q1 = 2.0f * q1;
   \   0000023E   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000242   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000246   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   0000024A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000024E   0xED8D 0x0A0A      VSTR     S0,[SP, #+40]
     86              _2q2 = 2.0f * q2;
   \   00000252   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000256   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000025A   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   0000025E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000262   0xED8D 0x0A09      VSTR     S0,[SP, #+36]
     87              _2q3 = 2.0f * q3;
   \   00000266   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   0000026A   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000026E   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000272   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000276   0xED8D 0x0A0F      VSTR     S0,[SP, #+60]
     88              _2q0q2 = 2.0f * q0 * q2;
   \   0000027A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   0000027E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000282   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000286   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000028A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   0000028E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000292   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000296   0xED8D 0x0A08      VSTR     S0,[SP, #+32]
     89              _2q2q3 = 2.0f * q2 * q3;
   \   0000029A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   0000029E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000002A2   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   000002A6   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000002AA   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   000002AE   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000002B2   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000002B6   0xED8D 0x0A07      VSTR     S0,[SP, #+28]
     90              q0q0 = q0 * q0;
   \   000002BA   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000002BE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000002C2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000002C6   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000002CA   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000002CE   0xED8D 0x0A0E      VSTR     S0,[SP, #+56]
     91              q0q1 = q0 * q1;
   \   000002D2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000002D6   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000002DA   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   000002DE   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000002E2   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000002E6   0xED8D 0x0A02      VSTR     S0,[SP, #+8]
     92              q0q2 = q0 * q2;
   \   000002EA   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000002EE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000002F2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000002F6   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000002FA   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000002FE   0xED8D 0x0A01      VSTR     S0,[SP, #+4]
     93              q0q3 = q0 * q3;
   \   00000302   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   00000306   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000030A   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   0000030E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000312   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000316   0xED8D 0x0A06      VSTR     S0,[SP, #+24]
     94              q1q1 = q1 * q1;
   \   0000031A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   0000031E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000322   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000326   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000032A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000032E   0xEEB0 0xDA40      VMOV.F32 S26,S0
     95              q1q2 = q1 * q2;
   \   00000332   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000336   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000033A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   0000033E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000342   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000346   0xED8D 0x0A05      VSTR     S0,[SP, #+20]
     96              q1q3 = q1 * q3;
   \   0000034A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   0000034E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000352   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   00000356   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000035A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000035E   0xEEB0 0xCA40      VMOV.F32 S24,S0
     97              q2q2 = q2 * q2;
   \   00000362   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000366   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000036A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   0000036E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000372   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000376   0xEEF0 0xCA40      VMOV.F32 S25,S0
     98              q2q3 = q2 * q3;
   \   0000037A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   0000037E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000382   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   00000386   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000038A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000038E   0xED8D 0x0A04      VSTR     S0,[SP, #+16]
     99              q3q3 = q3 * q3;
   \   00000392   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   00000396   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000039A   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   0000039E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000003A2   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000003A6   0xED8D 0x0A03      VSTR     S0,[SP, #+12]
    100          
    101              // Reference direction of Earth's magnetic field
    102              hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
   \   000003AA   0xED9D 0x0A0E      VLDR     S0,[SP, #+56]
   \   000003AE   0xEE28 0x0A00      VMUL.F32 S0,S16,S0
   \   000003B2   0xEDDD 0x0A15      VLDR     S1,[SP, #+84]
   \   000003B6   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   000003BA   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000003BE   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   000003C2   0xEDDD 0x0A14      VLDR     S1,[SP, #+80]
   \   000003C6   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000003CA   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000003CE   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000003D2   0xEE08 0x0A0D      VMLA.F32 S0,S16,S26
   \   000003D6   0xEDDD 0x0A0A      VLDR     S1,[SP, #+40]
   \   000003DA   0xEE60 0x0AA8      VMUL.F32 S1,S1,S17
   \   000003DE   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000003E2   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000003E6   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000003EA   0xEDDD 0x0A0A      VLDR     S1,[SP, #+40]
   \   000003EE   0xEE60 0x0A89      VMUL.F32 S1,S1,S18
   \   000003F2   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   000003F6   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000003FA   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000003FE   0xEE08 0x0A6C      VMLS.F32 S0,S16,S25
   \   00000402   0xEDDD 0x0A03      VLDR     S1,[SP, #+12]
   \   00000406   0xEE08 0x0A60      VMLS.F32 S0,S16,S1
   \   0000040A   0xED8D 0x0A18      VSTR     S0,[SP, #+96]
    103              hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
   \   0000040E   0xED9D 0x0A16      VLDR     S0,[SP, #+88]
   \   00000412   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   00000416   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000041A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000041E   0xEDDD 0x0A0E      VLDR     S1,[SP, #+56]
   \   00000422   0xEE08 0x0AA0      VMLA.F32 S0,S17,S1
   \   00000426   0xEDDD 0x0A14      VLDR     S1,[SP, #+80]
   \   0000042A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   0000042E   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000432   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   00000436   0xEDDD 0x0A13      VLDR     S1,[SP, #+76]
   \   0000043A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   0000043E   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000442   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000446   0xEE08 0x0ACD      VMLS.F32 S0,S17,S26
   \   0000044A   0xEE08 0x0AAC      VMLA.F32 S0,S17,S25
   \   0000044E   0xEDDD 0x0A09      VLDR     S1,[SP, #+36]
   \   00000452   0xEE60 0x0A89      VMUL.F32 S1,S1,S18
   \   00000456   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   0000045A   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   0000045E   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000462   0xEDDD 0x0A03      VLDR     S1,[SP, #+12]
   \   00000466   0xEE08 0x0AE0      VMLS.F32 S0,S17,S1
   \   0000046A   0xED8D 0x0A17      VSTR     S0,[SP, #+92]
    104              _2bx = sqrt(hx * hx + hy * hy);
   \   0000046E   0xED9D 0x0A18      VLDR     S0,[SP, #+96]
   \   00000472   0xEDDD 0x0A18      VLDR     S1,[SP, #+96]
   \   00000476   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000047A   0xEDDD 0x0A17      VLDR     S1,[SP, #+92]
   \   0000047E   0xED9D 0x1A17      VLDR     S2,[SP, #+92]
   \   00000482   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000486   0xED8D 0x0A1D      VSTR     S0,[SP, #+116]
   \   0000048A   0xED9D 0x0A1D      VLDR     S0,[SP, #+116]
   \   0000048E   0x.... 0x....      BL       sqrtf
   \   00000492   0xEEB0 0xBA40      VMOV.F32 S22,S0
    105              _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
   \   00000496   0xED9D 0x0A16      VLDR     S0,[SP, #+88]
   \   0000049A   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   0000049E   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000004A2   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000004A6   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000004AA   0xEDDD 0x0A15      VLDR     S1,[SP, #+84]
   \   000004AE   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   000004B2   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000004B6   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000004BA   0xEDDD 0x0A0E      VLDR     S1,[SP, #+56]
   \   000004BE   0xEE09 0x0A20      VMLA.F32 S0,S18,S1
   \   000004C2   0xEDDD 0x0A13      VLDR     S1,[SP, #+76]
   \   000004C6   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   000004CA   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000004CE   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000004D2   0xEE09 0x0A4D      VMLS.F32 S0,S18,S26
   \   000004D6   0xEDDD 0x0A09      VLDR     S1,[SP, #+36]
   \   000004DA   0xEE60 0x0AA8      VMUL.F32 S1,S1,S17
   \   000004DE   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   000004E2   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000004E6   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000004EA   0xEE09 0x0A6C      VMLS.F32 S0,S18,S25
   \   000004EE   0xEDDD 0x0A03      VLDR     S1,[SP, #+12]
   \   000004F2   0xEE09 0x0A20      VMLA.F32 S0,S18,S1
   \   000004F6   0xEEF0 0xBA40      VMOV.F32 S23,S0
    106              _4bx = 2.0f * _2bx;
   \   000004FA   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   000004FE   0xEE2B 0x0A00      VMUL.F32 S0,S22,S0
   \   00000502   0xED8D 0x0A12      VSTR     S0,[SP, #+72]
    107              _4bz = 2.0f * _2bz;
   \   00000506   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   0000050A   0xEE2B 0x0A80      VMUL.F32 S0,S23,S0
   \   0000050E   0xED8D 0x0A11      VSTR     S0,[SP, #+68]
    108          
    109              // Gradient decent algorithm corrective step
    110              s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
   \   00000512   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   00000516   0xEE2C 0x0A00      VMUL.F32 S0,S24,S0
   \   0000051A   0xEDDD 0x0A08      VLDR     S1,[SP, #+32]
   \   0000051E   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000522   0xEE30 0x0A69      VSUB.F32 S0,S0,S19
   \   00000526   0xEDDD 0x0A09      VLDR     S1,[SP, #+36]
   \   0000052A   0xEEF1 0x0A60      VNEG.F32 S1,S1
   \   0000052E   0xEE60 0xDA80      VMUL.F32 S27,S1,S0
   \   00000532   0xED9D 0x0A02      VLDR     S0,[SP, #+8]
   \   00000536   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   0000053A   0xED9D 0x1A07      VLDR     S2,[SP, #+28]
   \   0000053E   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000542   0xEE31 0x0A4A      VSUB.F32 S0,S2,S20
   \   00000546   0xEDDD 0x0A0A      VLDR     S1,[SP, #+40]
   \   0000054A   0xEE40 0xDA20      VMLA.F32 S27,S0,S1
   \   0000054E   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000552   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000556   0xEE2B 0x0A80      VMUL.F32 S0,S23,S0
   \   0000055A   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   0000055E   0xEE70 0x0AEC      VSUB.F32 S1,S1,S25
   \   00000562   0xED9D 0x1A03      VLDR     S2,[SP, #+12]
   \   00000566   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   0000056A   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   0000056E   0xED9D 0x1A01      VLDR     S2,[SP, #+4]
   \   00000572   0xEE3C 0x1A41      VSUB.F32 S2,S24,S2
   \   00000576   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   0000057A   0xEE78 0x0A60      VSUB.F32 S1,S16,S1
   \   0000057E   0xEE40 0xDA20      VMLA.F32 S27,S0,S1
   \   00000582   0xEEB1 0x0A4B      VNEG.F32 S0,S22
   \   00000586   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   0000058A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000058E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000592   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000596   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000059A   0xEE0B 0x0AA0      VMLA.F32 S0,S23,S1
   \   0000059E   0xEDDD 0x0A05      VLDR     S1,[SP, #+20]
   \   000005A2   0xED9D 0x1A06      VLDR     S2,[SP, #+24]
   \   000005A6   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   000005AA   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   000005AE   0xED9D 0x1A02      VLDR     S2,[SP, #+8]
   \   000005B2   0xEDDD 0x1A04      VLDR     S3,[SP, #+16]
   \   000005B6   0xEE31 0x1A21      VADD.F32 S2,S2,S3
   \   000005BA   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   000005BE   0xEE70 0x0AE8      VSUB.F32 S1,S1,S17
   \   000005C2   0xEE40 0xDA20      VMLA.F32 S27,S0,S1
   \   000005C6   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000005CA   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000005CE   0xEE2B 0x0A00      VMUL.F32 S0,S22,S0
   \   000005D2   0xEDDD 0x0A01      VLDR     S1,[SP, #+4]
   \   000005D6   0xEE70 0x0A8C      VADD.F32 S1,S1,S24
   \   000005DA   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   000005DE   0xEEB6 0x1A00      VMOV.F32 S2,#0.5
   \   000005E2   0xEE31 0x1A4D      VSUB.F32 S2,S2,S26
   \   000005E6   0xEE31 0x1A6C      VSUB.F32 S2,S2,S25
   \   000005EA   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   000005EE   0xEE70 0x0AC9      VSUB.F32 S1,S1,S18
   \   000005F2   0xEE40 0xDA20      VMLA.F32 S27,S0,S1
    111              s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
   \   000005F6   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   000005FA   0xEE2C 0x0A00      VMUL.F32 S0,S24,S0
   \   000005FE   0xEDDD 0x0A08      VLDR     S1,[SP, #+32]
   \   00000602   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000606   0xEE30 0x0A69      VSUB.F32 S0,S0,S19
   \   0000060A   0xEDDD 0x0A0F      VLDR     S1,[SP, #+60]
   \   0000060E   0xEE20 0xEA20      VMUL.F32 S28,S0,S1
   \   00000612   0xED9D 0x0A02      VLDR     S0,[SP, #+8]
   \   00000616   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   0000061A   0xED9D 0x1A07      VLDR     S2,[SP, #+28]
   \   0000061E   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000622   0xEE31 0x0A4A      VSUB.F32 S0,S2,S20
   \   00000626   0xEDDD 0x0A10      VLDR     S1,[SP, #+64]
   \   0000062A   0xEE00 0xEA20      VMLA.F32 S28,S0,S1
   \   0000062E   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000632   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000636   0xEEF1 0x0A00      VMOV.F32 S1,#4.0
   \   0000063A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000063E   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000642   0xEE6C 0x0AA0      VMUL.F32 S1,S25,S1
   \   00000646   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   0000064A   0xEEF7 0x1A00      VMOV.F32 S3,#1.0
   \   0000064E   0xEE4D 0x1A41      VMLS.F32 S3,S26,S2
   \   00000652   0xEE70 0x0AE1      VSUB.F32 S1,S1,S3
   \   00000656   0xEE7A 0x0AA0      VADD.F32 S1,S21,S1
   \   0000065A   0xEE00 0xEA20      VMLA.F32 S28,S0,S1
   \   0000065E   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   00000662   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000666   0xEE2B 0x0A80      VMUL.F32 S0,S23,S0
   \   0000066A   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   0000066E   0xEE70 0x0AEC      VSUB.F32 S1,S1,S25
   \   00000672   0xED9D 0x1A03      VLDR     S2,[SP, #+12]
   \   00000676   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   0000067A   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   0000067E   0xED9D 0x1A01      VLDR     S2,[SP, #+4]
   \   00000682   0xEE3C 0x1A41      VSUB.F32 S2,S24,S2
   \   00000686   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   0000068A   0xEE70 0x0AC8      VSUB.F32 S1,S1,S16
   \   0000068E   0xEE00 0xEA20      VMLA.F32 S28,S0,S1
   \   00000692   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000696   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000069A   0xEE2B 0x0A00      VMUL.F32 S0,S22,S0
   \   0000069E   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000006A2   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000006A6   0xEE0B 0x0AA0      VMLA.F32 S0,S23,S1
   \   000006AA   0xEDDD 0x0A05      VLDR     S1,[SP, #+20]
   \   000006AE   0xED9D 0x1A06      VLDR     S2,[SP, #+24]
   \   000006B2   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   000006B6   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   000006BA   0xED9D 0x1A02      VLDR     S2,[SP, #+8]
   \   000006BE   0xEDDD 0x1A04      VLDR     S3,[SP, #+16]
   \   000006C2   0xEE31 0x1A21      VADD.F32 S2,S2,S3
   \   000006C6   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   000006CA   0xEE70 0x0AE8      VSUB.F32 S1,S1,S17
   \   000006CE   0xEE00 0xEA20      VMLA.F32 S28,S0,S1
   \   000006D2   0x.... 0x....      LDR.W    R0,??DataTable0_1
   \   000006D6   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000006DA   0xEE2B 0x0A00      VMUL.F32 S0,S22,S0
   \   000006DE   0xEDDD 0x0A11      VLDR     S1,[SP, #+68]
   \   000006E2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   000006E6   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000006EA   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   000006EE   0xEDDD 0x0A01      VLDR     S1,[SP, #+4]
   \   000006F2   0xEE70 0x0A8C      VADD.F32 S1,S1,S24
   \   000006F6   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   000006FA   0xEEB6 0x1A00      VMOV.F32 S2,#0.5
   \   000006FE   0xEE31 0x1A4D      VSUB.F32 S2,S2,S26
   \   00000702   0xEE31 0x1A6C      VSUB.F32 S2,S2,S25
   \   00000706   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   0000070A   0xEE70 0x0AC9      VSUB.F32 S1,S1,S18
   \   0000070E   0xEE00 0xEA20      VMLA.F32 S28,S0,S1
    112              s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
   \   00000712   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   00000716   0xEE2C 0x0A00      VMUL.F32 S0,S24,S0
   \   0000071A   0xEDDD 0x0A08      VLDR     S1,[SP, #+32]
   \   0000071E   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000722   0xEE30 0x0A69      VSUB.F32 S0,S0,S19
   \   00000726   0xEDDD 0x0A10      VLDR     S1,[SP, #+64]
   \   0000072A   0xEEF1 0x0A60      VNEG.F32 S1,S1
   \   0000072E   0xEE60 0xEA80      VMUL.F32 S29,S1,S0
   \   00000732   0xED9D 0x0A02      VLDR     S0,[SP, #+8]
   \   00000736   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   0000073A   0xED9D 0x1A07      VLDR     S2,[SP, #+28]
   \   0000073E   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000742   0xEE31 0x0A4A      VSUB.F32 S0,S2,S20
   \   00000746   0xEDDD 0x0A0F      VLDR     S1,[SP, #+60]
   \   0000074A   0xEE40 0xEA20      VMLA.F32 S29,S0,S1
   \   0000074E   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000752   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000756   0xEEF1 0x0A00      VMOV.F32 S1,#4.0
   \   0000075A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000075E   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000762   0xEE6C 0x0AA0      VMUL.F32 S1,S25,S1
   \   00000766   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   0000076A   0xEEF7 0x1A00      VMOV.F32 S3,#1.0
   \   0000076E   0xEE4D 0x1A41      VMLS.F32 S3,S26,S2
   \   00000772   0xEE70 0x0AE1      VSUB.F32 S1,S1,S3
   \   00000776   0xEE7A 0x0AA0      VADD.F32 S1,S21,S1
   \   0000077A   0xEE40 0xEA20      VMLA.F32 S29,S0,S1
   \   0000077E   0xED9D 0x0A12      VLDR     S0,[SP, #+72]
   \   00000782   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   00000786   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   0000078A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000078E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000792   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   00000796   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000079A   0xEE0B 0x0AE0      VMLS.F32 S0,S23,S1
   \   0000079E   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   000007A2   0xEE70 0x0AEC      VSUB.F32 S1,S1,S25
   \   000007A6   0xED9D 0x1A03      VLDR     S2,[SP, #+12]
   \   000007AA   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   000007AE   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   000007B2   0xED9D 0x1A01      VLDR     S2,[SP, #+4]
   \   000007B6   0xEE3C 0x1A41      VSUB.F32 S2,S24,S2
   \   000007BA   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   000007BE   0xEE70 0x0AC8      VSUB.F32 S1,S1,S16
   \   000007C2   0xEE40 0xEA20      VMLA.F32 S29,S0,S1
   \   000007C6   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   000007CA   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000007CE   0xEE2B 0x0A00      VMUL.F32 S0,S22,S0
   \   000007D2   0x....             LDR.N    R0,??DataTable0_1
   \   000007D4   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000007D8   0xEE0B 0x0AA0      VMLA.F32 S0,S23,S1
   \   000007DC   0xEDDD 0x0A05      VLDR     S1,[SP, #+20]
   \   000007E0   0xED9D 0x1A06      VLDR     S2,[SP, #+24]
   \   000007E4   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   000007E8   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   000007EC   0xED9D 0x1A02      VLDR     S2,[SP, #+8]
   \   000007F0   0xEDDD 0x1A04      VLDR     S3,[SP, #+16]
   \   000007F4   0xEE31 0x1A21      VADD.F32 S2,S2,S3
   \   000007F8   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   000007FC   0xEE70 0x0AE8      VSUB.F32 S1,S1,S17
   \   00000800   0xEE40 0xEA20      VMLA.F32 S29,S0,S1
   \   00000804   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   00000808   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000080C   0xEE2B 0x0A00      VMUL.F32 S0,S22,S0
   \   00000810   0xEDDD 0x0A11      VLDR     S1,[SP, #+68]
   \   00000814   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000818   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   0000081C   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   00000820   0xEDDD 0x0A01      VLDR     S1,[SP, #+4]
   \   00000824   0xEE70 0x0A8C      VADD.F32 S1,S1,S24
   \   00000828   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   0000082C   0xEEB6 0x1A00      VMOV.F32 S2,#0.5
   \   00000830   0xEE31 0x1A4D      VSUB.F32 S2,S2,S26
   \   00000834   0xEE31 0x1A6C      VSUB.F32 S2,S2,S25
   \   00000838   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   0000083C   0xEE70 0x0AC9      VSUB.F32 S1,S1,S18
   \   00000840   0xEE40 0xEA20      VMLA.F32 S29,S0,S1
    113              s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
   \   00000844   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   00000848   0xEE2C 0x0A00      VMUL.F32 S0,S24,S0
   \   0000084C   0xEDDD 0x0A08      VLDR     S1,[SP, #+32]
   \   00000850   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000854   0xEE30 0x0A69      VSUB.F32 S0,S0,S19
   \   00000858   0xEDDD 0x0A0A      VLDR     S1,[SP, #+40]
   \   0000085C   0xEE20 0xFA20      VMUL.F32 S30,S0,S1
   \   00000860   0xED9D 0x0A02      VLDR     S0,[SP, #+8]
   \   00000864   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000868   0xED9D 0x1A07      VLDR     S2,[SP, #+28]
   \   0000086C   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000870   0xEE31 0x0A4A      VSUB.F32 S0,S2,S20
   \   00000874   0xEDDD 0x0A09      VLDR     S1,[SP, #+36]
   \   00000878   0xEE00 0xFA20      VMLA.F32 S30,S0,S1
   \   0000087C   0xED9D 0x0A12      VLDR     S0,[SP, #+72]
   \   00000880   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   00000884   0x....             LDR.N    R0,??DataTable0_1
   \   00000886   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000088A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000088E   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000892   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000896   0xEE0B 0x0AA0      VMLA.F32 S0,S23,S1
   \   0000089A   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   0000089E   0xEE70 0x0AEC      VSUB.F32 S1,S1,S25
   \   000008A2   0xED9D 0x1A03      VLDR     S2,[SP, #+12]
   \   000008A6   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   000008AA   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   000008AE   0xED9D 0x1A01      VLDR     S2,[SP, #+4]
   \   000008B2   0xEE3C 0x1A41      VSUB.F32 S2,S24,S2
   \   000008B6   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   000008BA   0xEE70 0x0AC8      VSUB.F32 S1,S1,S16
   \   000008BE   0xEE00 0xFA20      VMLA.F32 S30,S0,S1
   \   000008C2   0xEEB1 0x0A4B      VNEG.F32 S0,S22
   \   000008C6   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000008CA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000008CE   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000008D2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000008D6   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000008DA   0xEE0B 0x0AA0      VMLA.F32 S0,S23,S1
   \   000008DE   0xEDDD 0x0A05      VLDR     S1,[SP, #+20]
   \   000008E2   0xED9D 0x1A06      VLDR     S2,[SP, #+24]
   \   000008E6   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   000008EA   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   000008EE   0xED9D 0x1A02      VLDR     S2,[SP, #+8]
   \   000008F2   0xEDDD 0x1A04      VLDR     S3,[SP, #+16]
   \   000008F6   0xEE31 0x1A21      VADD.F32 S2,S2,S3
   \   000008FA   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   000008FE   0xEE70 0x0AE8      VSUB.F32 S1,S1,S17
   \   00000902   0xEE00 0xFA20      VMLA.F32 S30,S0,S1
   \   00000906   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   0000090A   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000090E   0xEE2B 0x0A00      VMUL.F32 S0,S22,S0
   \   00000912   0xEDDD 0x0A01      VLDR     S1,[SP, #+4]
   \   00000916   0xEE70 0x0A8C      VADD.F32 S1,S1,S24
   \   0000091A   0xEE60 0x0A8B      VMUL.F32 S1,S1,S22
   \   0000091E   0xEEB6 0x1A00      VMOV.F32 S2,#0.5
   \   00000922   0xEE31 0x1A4D      VSUB.F32 S2,S2,S26
   \   00000926   0xEE31 0x1A6C      VSUB.F32 S2,S2,S25
   \   0000092A   0xEE41 0x0A2B      VMLA.F32 S1,S2,S23
   \   0000092E   0xEE70 0x0AC9      VSUB.F32 S1,S1,S18
   \   00000932   0xEE00 0xFA20      VMLA.F32 S30,S0,S1
    114              recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
   \   00000936   0xEE2D 0x0AAD      VMUL.F32 S0,S27,S27
   \   0000093A   0xEE0E 0x0A0E      VMLA.F32 S0,S28,S28
   \   0000093E   0xEE0E 0x0AAE      VMLA.F32 S0,S29,S29
   \   00000942   0xEE0F 0x0A0F      VMLA.F32 S0,S30,S30
   \   00000946   0x.... 0x....      BL       _Z7invSqrtf
   \   0000094A   0xED8D 0x0A00      VSTR     S0,[SP, #+0]
    115              s0 *= recipNorm;
   \   0000094E   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   00000952   0xEE2D 0x0A80      VMUL.F32 S0,S27,S0
   \   00000956   0xED8D 0x0A1C      VSTR     S0,[SP, #+112]
    116              s1 *= recipNorm;
   \   0000095A   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   0000095E   0xEE2E 0x0A00      VMUL.F32 S0,S28,S0
   \   00000962   0xED8D 0x0A1B      VSTR     S0,[SP, #+108]
    117              s2 *= recipNorm;
   \   00000966   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   0000096A   0xEE2E 0x0A80      VMUL.F32 S0,S29,S0
   \   0000096E   0xED8D 0x0A1A      VSTR     S0,[SP, #+104]
    118              s3 *= recipNorm;
   \   00000972   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   00000976   0xEE2F 0x0A00      VMUL.F32 S0,S30,S0
   \   0000097A   0xED8D 0x0A19      VSTR     S0,[SP, #+100]
    119          
    120              // Apply feedback step
    121              qDot1 -= beta * s0;
   \   0000097E   0x980D             LDR      R0,[SP, #+52]
   \   00000980   0x.... 0x....      BL       __aeabi_f2d
   \   00000984   0x0004             MOVS     R4,R0
   \   00000986   0x000D             MOVS     R5,R1
   \   00000988   0x981C             LDR      R0,[SP, #+112]
   \   0000098A   0x.... 0x....      BL       __aeabi_f2d
   \   0000098E   0x.... 0x....      LDR.W    R2,??DataTable3_1
   \   00000992   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   00000996   0x.... 0x....      BL       __aeabi_dmul
   \   0000099A   0x0002             MOVS     R2,R0
   \   0000099C   0x000B             MOVS     R3,R1
   \   0000099E   0x0020             MOVS     R0,R4
   \   000009A0   0x0029             MOVS     R1,R5
   \   000009A2   0x.... 0x....      BL       __aeabi_dsub
   \   000009A6   0x.... 0x....      BL       __aeabi_d2f
   \   000009AA   0x900D             STR      R0,[SP, #+52]
    122              qDot2 -= beta * s1;
   \   000009AC   0x980C             LDR      R0,[SP, #+48]
   \   000009AE   0x.... 0x....      BL       __aeabi_f2d
   \   000009B2   0x0004             MOVS     R4,R0
   \   000009B4   0x000D             MOVS     R5,R1
   \   000009B6   0x981B             LDR      R0,[SP, #+108]
   \   000009B8   0x.... 0x....      BL       __aeabi_f2d
   \   000009BC   0x.... 0x....      LDR.W    R2,??DataTable3_1
   \   000009C0   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   000009C4   0x.... 0x....      BL       __aeabi_dmul
   \   000009C8   0x0002             MOVS     R2,R0
   \   000009CA   0x000B             MOVS     R3,R1
   \   000009CC   0x0020             MOVS     R0,R4
   \   000009CE   0x0029             MOVS     R1,R5
   \   000009D0   0x.... 0x....      BL       __aeabi_dsub
   \   000009D4   0x.... 0x....      BL       __aeabi_d2f
   \   000009D8   0x900C             STR      R0,[SP, #+48]
    123              qDot3 -= beta * s2;
   \   000009DA   0x980B             LDR      R0,[SP, #+44]
   \   000009DC   0x.... 0x....      BL       __aeabi_f2d
   \   000009E0   0x0004             MOVS     R4,R0
   \   000009E2   0x000D             MOVS     R5,R1
   \   000009E4   0x981A             LDR      R0,[SP, #+104]
   \   000009E6   0x.... 0x....      BL       __aeabi_f2d
   \   000009EA   0x.... 0x....      LDR.W    R2,??DataTable3_1
   \   000009EE   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   000009F2   0x.... 0x....      BL       __aeabi_dmul
   \   000009F6   0x0002             MOVS     R2,R0
   \   000009F8   0x000B             MOVS     R3,R1
   \   000009FA   0x0020             MOVS     R0,R4
   \   000009FC   0x0029             MOVS     R1,R5
   \   000009FE   0x.... 0x....      BL       __aeabi_dsub
   \   00000A02   0x.... 0x....      BL       __aeabi_d2f
   \   00000A06   0x900B             STR      R0,[SP, #+44]
    124              qDot4 -= beta * s3;
   \   00000A08   0xEE1F 0x0A90      VMOV     R0,S31
   \   00000A0C   0x.... 0x....      BL       __aeabi_f2d
   \   00000A10   0x0004             MOVS     R4,R0
   \   00000A12   0x000D             MOVS     R5,R1
   \   00000A14   0x9819             LDR      R0,[SP, #+100]
   \   00000A16   0x.... 0x....      BL       __aeabi_f2d
   \   00000A1A   0x.... 0x....      LDR.W    R2,??DataTable3_1
   \   00000A1E   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   00000A22   0x.... 0x....      BL       __aeabi_dmul
   \   00000A26   0x0002             MOVS     R2,R0
   \   00000A28   0x000B             MOVS     R3,R1
   \   00000A2A   0x0020             MOVS     R0,R4
   \   00000A2C   0x0029             MOVS     R1,R5
   \   00000A2E   0x.... 0x....      BL       __aeabi_dsub
   \   00000A32   0x.... 0x....      BL       __aeabi_d2f
   \   00000A36   0xEE0F 0x0A90      VMOV     S31,R0
    125            }
    126          
    127            // Integrate rate of change of quaternion to yield quaternion
    128            q0 += qDot1 * (1.0f / sampleFreq);
   \                     ??MadgwickAHRSupdate_3: (+1)
   \   00000A3A   0xED9D 0x0A0D      VLDR     S0,[SP, #+52]
   \   00000A3E   0xEDDF 0x....      VLDR.W   S1,??DataTable0  ;; 0x3b03126f
   \   00000A42   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   00000A46   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000A4A   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000A4E   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   00000A52   0xED80 0x1A00      VSTR     S2,[R0, #0]
    129            q1 += qDot2 * (1.0f / sampleFreq);
   \   00000A56   0xED9D 0x0A0C      VLDR     S0,[SP, #+48]
   \   00000A5A   0xEDDF 0x....      VLDR.W   S1,??DataTable0  ;; 0x3b03126f
   \   00000A5E   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000A62   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000A66   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000A6A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000A6E   0xED80 0x1A00      VSTR     S2,[R0, #0]
    130            q2 += qDot3 * (1.0f / sampleFreq);
   \   00000A72   0xED9D 0x0A0B      VLDR     S0,[SP, #+44]
   \   00000A76   0xEDDF 0x....      VLDR.W   S1,??DataTable0  ;; 0x3b03126f
   \   00000A7A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000A7E   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000A82   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000A86   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000A8A   0xED80 0x1A00      VSTR     S2,[R0, #0]
    131            q3 += qDot4 * (1.0f / sampleFreq);
   \   00000A8E   0xED9F 0x....      VLDR.W   S0,??DataTable0  ;; 0x3b03126f
   \   00000A92   0x....             LDR.N    R0,??DataTable0_1
   \   00000A94   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000A98   0xEE4F 0x0A80      VMLA.F32 S1,S31,S0
   \   00000A9C   0x....             LDR.N    R0,??DataTable0_1
   \   00000A9E   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    132          
    133            // Normalise quaternion
    134            recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
   \   00000AA2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   00000AA6   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000AAA   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   00000AAE   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000AB2   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000AB6   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000ABA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000ABE   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000AC2   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000AC6   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000ACA   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000ACE   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000AD2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000AD6   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000ADA   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000ADE   0x....             LDR.N    R0,??DataTable0_1
   \   00000AE0   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000AE4   0x....             LDR.N    R0,??DataTable0_1
   \   00000AE6   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000AEA   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000AEE   0x.... 0x....      BL       _Z7invSqrtf
    135            q0 *= recipNorm;
   \   00000AF2   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   00000AF6   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000AFA   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \   00000AFE   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   00000B02   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    136            q1 *= recipNorm;
   \   00000B06   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000B0A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000B0E   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \   00000B12   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000B16   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    137            q2 *= recipNorm;
   \   00000B1A   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000B1E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000B22   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \   00000B26   0x.... 0x....      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000B2A   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    138            q3 *= recipNorm;
   \   00000B2E   0x....             LDR.N    R0,??DataTable0_1
   \   00000B30   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000B34   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \   00000B38   0x....             LDR.N    R0,??DataTable0_1
   \   00000B3A   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    139          }
   \                     ??MadgwickAHRSupdate_1: (+1)
   \   00000B3E   0xB022             ADD      SP,SP,#+136
   \   00000B40   0xECBD 0x8B10      VPOP     {D8-D15}
   \   00000B44   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    140          
    141          //---------------------------------------------------------------------------------------------------
    142          // IMU algorithm update
    143          

   \                                 In section .text, align 4, keep-with-next
    144          void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
   \                     _Z21MadgwickAHRSupdateIMUffffff: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0xED2D 0x8B10      VPUSH    {D8-D15}
   \   00000006   0xED6D 0x0A02      VPUSH    {S1-S2}
   \   0000000A   0xB090             SUB      SP,SP,#+64
   \   0000000C   0xEEF0 0x9A40      VMOV.F32 S19,S0
   \   00000010   0xEEB0 0x8A61      VMOV.F32 S16,S3
   \   00000014   0xEEF0 0x8A42      VMOV.F32 S17,S4
   \   00000018   0xEEB0 0x9A62      VMOV.F32 S18,S5
    145            float recipNorm;
    146            float s0, s1, s2, s3;
    147            float qDot1, qDot2, qDot3, qDot4;
    148            float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
    149          
    150            // Rate of change of quaternion from gyroscope
    151            qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
   \   0000001C   0xF8DF 0x03D8      LDR.W    R0,??MadgwickAHRSupdateIMU_0
   \   00000020   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000024   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   00000028   0xEE20 0x0A29      VMUL.F32 S0,S0,S19
   \   0000002C   0xF8DF 0x03CC      LDR.W    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000030   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000034   0xED9D 0x1A10      VLDR     S2,[SP, #+64]
   \   00000038   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   00000040   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000044   0xED9D 0x1A11      VLDR     S2,[SP, #+68]
   \   00000048   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   0000004C   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   00000050   0xEE20 0xBA20      VMUL.F32 S22,S0,S1
    152            qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
   \   00000054   0xF8DF 0x0408      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   00000058   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000005C   0xEE20 0x0A29      VMUL.F32 S0,S0,S19
   \   00000060   0x48E6             LDR.N    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000062   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000066   0xED9D 0x1A11      VLDR     S2,[SP, #+68]
   \   0000006A   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   00000072   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000076   0xED9D 0x1A10      VLDR     S2,[SP, #+64]
   \   0000007A   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   0000007E   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   00000082   0xEE60 0xBA20      VMUL.F32 S23,S0,S1
    153            qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
   \   00000086   0xF8DF 0x03D8      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   0000008A   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000008E   0xEDDD 0x0A10      VLDR     S1,[SP, #+64]
   \   00000092   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000096   0x48D8             LDR.N    R0,??MadgwickAHRSupdateIMU_0
   \   00000098   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000009C   0xED9D 0x1A11      VLDR     S2,[SP, #+68]
   \   000000A0   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   000000A8   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000AC   0xEE00 0x0AA9      VMLA.F32 S0,S1,S19
   \   000000B0   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   000000B4   0xEE20 0xCA20      VMUL.F32 S24,S0,S1
    154            qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
   \   000000B8   0xF8DF 0x03A4      LDR.W    R0,??MadgwickAHRSupdateIMU_1
   \   000000BC   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000C0   0xEDDD 0x0A11      VLDR     S1,[SP, #+68]
   \   000000C4   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000000C8   0x48CB             LDR.N    R0,??MadgwickAHRSupdateIMU_0
   \   000000CA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000CE   0xED9D 0x1A10      VLDR     S2,[SP, #+64]
   \   000000D2   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000D6   0x48C9             LDR.N    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000000D8   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000DC   0xEE00 0x0AE9      VMLS.F32 S0,S1,S19
   \   000000E0   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   000000E4   0xEE60 0xCA20      VMUL.F32 S25,S0,S1
    155          
    156            // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
    157            if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
   \   000000E8   0xEEB5 0x8A40      VCMP.F32 S16,#0.0
   \   000000EC   0xEEF1 0xFA10      FMSTAT   
   \   000000F0   0xD10A             BNE.N    ??MadgwickAHRSupdateIMU_2
   \   000000F2   0xEEF5 0x8A40      VCMP.F32 S17,#0.0
   \   000000F6   0xEEF1 0xFA10      FMSTAT   
   \   000000FA   0xD105             BNE.N    ??MadgwickAHRSupdateIMU_2
   \   000000FC   0xEEB5 0x9A40      VCMP.F32 S18,#0.0
   \   00000100   0xEEF1 0xFA10      FMSTAT   
   \   00000104   0xF000 0x818A      BEQ.W    ??MadgwickAHRSupdateIMU_3
    158          
    159              // Normalise accelerometer measurement
    160              recipNorm = invSqrt(ax * ax + ay * ay + az * az);
   \                     ??MadgwickAHRSupdateIMU_2: (+1)
   \   00000108   0xEE28 0x0A08      VMUL.F32 S0,S16,S16
   \   0000010C   0xEE08 0x0AA8      VMLA.F32 S0,S17,S17
   \   00000110   0xEE09 0x0A09      VMLA.F32 S0,S18,S18
   \   00000114   0x.... 0x....      BL       _Z7invSqrtf
   \   00000118   0xEEB0 0xDA40      VMOV.F32 S26,S0
    161              ax *= recipNorm;
   \   0000011C   0xEE28 0x8A0D      VMUL.F32 S16,S16,S26
    162              ay *= recipNorm;
   \   00000120   0xEE68 0x8A8D      VMUL.F32 S17,S17,S26
    163              az *= recipNorm;   
   \   00000124   0xEE29 0x9A0D      VMUL.F32 S18,S18,S26
    164          
    165              // Auxiliary variables to avoid repeated arithmetic
    166              _2q0 = 2.0f * q0;
   \   00000128   0x48CD             LDR.N    R0,??MadgwickAHRSupdateIMU_1
   \   0000012A   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000012E   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000132   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000136   0xED8D 0x0A0A      VSTR     S0,[SP, #+40]
    167              _2q1 = 2.0f * q1;
   \   0000013A   0x48AF             LDR.N    R0,??MadgwickAHRSupdateIMU_0
   \   0000013C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000140   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000144   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000148   0xED8D 0x0A09      VSTR     S0,[SP, #+36]
    168              _2q2 = 2.0f * q2;
   \   0000014C   0x48AB             LDR.N    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   0000014E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000152   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000156   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000015A   0xED8D 0x0A08      VSTR     S0,[SP, #+32]
    169              _2q3 = 2.0f * q3;
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   00000162   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000166   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   0000016A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000016E   0xED8D 0x0A07      VSTR     S0,[SP, #+28]
    170              _4q0 = 4.0f * q0;
   \   00000172   0x48BB             LDR.N    R0,??MadgwickAHRSupdateIMU_1
   \   00000174   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000178   0xEEF1 0x0A00      VMOV.F32 S1,#4.0
   \   0000017C   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000180   0xED8D 0x0A06      VSTR     S0,[SP, #+24]
    171              _4q1 = 4.0f * q1;
   \   00000184   0x489C             LDR.N    R0,??MadgwickAHRSupdateIMU_0
   \   00000186   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000018A   0xEEF1 0x0A00      VMOV.F32 S1,#4.0
   \   0000018E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000192   0xED8D 0x0A01      VSTR     S0,[SP, #+4]
    172              _4q2 = 4.0f * q2;
   \   00000196   0x4899             LDR.N    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   00000198   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000019C   0xEEF1 0x0A00      VMOV.F32 S1,#4.0
   \   000001A0   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001A4   0xED8D 0x0A00      VSTR     S0,[SP, #+0]
    173              _8q1 = 8.0f * q1;
   \   000001A8   0x4893             LDR.N    R0,??MadgwickAHRSupdateIMU_0
   \   000001AA   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000001AE   0xEEF2 0x0A00      VMOV.F32 S1,#8.0
   \   000001B2   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001B6   0xED8D 0x0A05      VSTR     S0,[SP, #+20]
    174              _8q2 = 8.0f * q2;
   \   000001BA   0x4890             LDR.N    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000001BC   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000001C0   0xEEF2 0x0A00      VMOV.F32 S1,#8.0
   \   000001C4   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001C8   0xED8D 0x0A04      VSTR     S0,[SP, #+16]
    175              q0q0 = q0 * q0;
   \   000001CC   0x48A4             LDR.N    R0,??MadgwickAHRSupdateIMU_1
   \   000001CE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000001D2   0x48A3             LDR.N    R0,??MadgwickAHRSupdateIMU_1
   \   000001D4   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000001D8   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001DC   0xED8D 0x0A03      VSTR     S0,[SP, #+12]
    176              q1q1 = q1 * q1;
   \   000001E0   0x4885             LDR.N    R0,??MadgwickAHRSupdateIMU_0
   \   000001E2   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000001E6   0x4884             LDR.N    R0,??MadgwickAHRSupdateIMU_0
   \   000001E8   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000001EC   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001F0   0xEEB0 0xAA40      VMOV.F32 S20,S0
    177              q2q2 = q2 * q2;
   \   000001F4   0x4881             LDR.N    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000001F6   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000001FA   0x4880             LDR.N    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000001FC   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000200   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000204   0xEEF0 0xAA40      VMOV.F32 S21,S0
    178              q3q3 = q3 * q3;
   \   00000208   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   0000020C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000210   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   00000214   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000218   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000021C   0xED8D 0x0A02      VSTR     S0,[SP, #+8]
    179          
    180              // Gradient decent algorithm corrective step
    181              s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
   \   00000220   0xED9D 0x0A06      VLDR     S0,[SP, #+24]
   \   00000224   0xEE60 0xDA2A      VMUL.F32 S27,S0,S21
   \   00000228   0xED9D 0x0A08      VLDR     S0,[SP, #+32]
   \   0000022C   0xEE40 0xDA08      VMLA.F32 S27,S0,S16
   \   00000230   0xED9D 0x0A06      VLDR     S0,[SP, #+24]
   \   00000234   0xEE40 0xDA0A      VMLA.F32 S27,S0,S20
   \   00000238   0xED9D 0x0A09      VLDR     S0,[SP, #+36]
   \   0000023C   0xEE40 0xDA68      VMLS.F32 S27,S0,S17
    182              s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
   \   00000240   0xED9D 0x0A01      VLDR     S0,[SP, #+4]
   \   00000244   0xEDDD 0x0A02      VLDR     S1,[SP, #+8]
   \   00000248   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000024C   0xEDDD 0x0A07      VLDR     S1,[SP, #+28]
   \   00000250   0xEE00 0x0AC8      VMLS.F32 S0,S1,S16
   \   00000254   0xEDDD 0x0A03      VLDR     S1,[SP, #+12]
   \   00000258   0xEEB1 0x1A00      VMOV.F32 S2,#4.0
   \   0000025C   0xEE60 0x0A81      VMUL.F32 S1,S1,S2
   \   00000260   0x4865             LDR.N    R0,??MadgwickAHRSupdateIMU_0
   \   00000262   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000266   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000026A   0xEDDD 0x0A0A      VLDR     S1,[SP, #+40]
   \   0000026E   0xEE00 0x0AE8      VMLS.F32 S0,S1,S17
   \   00000272   0xEDDD 0x0A01      VLDR     S1,[SP, #+4]
   \   00000276   0xEE30 0xEA60      VSUB.F32 S28,S0,S1
   \   0000027A   0xED9D 0x0A05      VLDR     S0,[SP, #+20]
   \   0000027E   0xEE00 0xEA0A      VMLA.F32 S28,S0,S20
   \   00000282   0xED9D 0x0A05      VLDR     S0,[SP, #+20]
   \   00000286   0xEE00 0xEA2A      VMLA.F32 S28,S0,S21
   \   0000028A   0xED9D 0x0A01      VLDR     S0,[SP, #+4]
   \   0000028E   0xEE00 0xEA09      VMLA.F32 S28,S0,S18
    183              s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
   \   00000292   0xED9D 0x0A03      VLDR     S0,[SP, #+12]
   \   00000296   0xEEF1 0x0A00      VMOV.F32 S1,#4.0
   \   0000029A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000029E   0x4857             LDR.N    R0,??MadgwickAHRSupdateIMU_0+0x4
   \   000002A0   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000002A4   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000002A8   0xEDDD 0x0A0A      VLDR     S1,[SP, #+40]
   \   000002AC   0xEE00 0x0A88      VMLA.F32 S0,S1,S16
   \   000002B0   0xEDDD 0x0A00      VLDR     S1,[SP, #+0]
   \   000002B4   0xED9D 0x1A02      VLDR     S2,[SP, #+8]
   \   000002B8   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000002BC   0xEDDD 0x0A07      VLDR     S1,[SP, #+28]
   \   000002C0   0xEE00 0x0AE8      VMLS.F32 S0,S1,S17
   \   000002C4   0xEDDD 0x0A00      VLDR     S1,[SP, #+0]
   \   000002C8   0xEE70 0xEA60      VSUB.F32 S29,S0,S1
   \   000002CC   0xED9D 0x0A04      VLDR     S0,[SP, #+16]
   \   000002D0   0xEE40 0xEA0A      VMLA.F32 S29,S0,S20
   \   000002D4   0xED9D 0x0A04      VLDR     S0,[SP, #+16]
   \   000002D8   0xEE40 0xEA2A      VMLA.F32 S29,S0,S21
   \   000002DC   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   000002E0   0xEE40 0xEA09      VMLA.F32 S29,S0,S18
    184              s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
   \   000002E4   0xEEB1 0x0A00      VMOV.F32 S0,#4.0
   \   000002E8   0xEE2A 0x0A00      VMUL.F32 S0,S20,S0
   \   000002EC   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   000002F0   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000002F4   0xEE20 0xFA20      VMUL.F32 S30,S0,S1
   \   000002F8   0xED9D 0x0A09      VLDR     S0,[SP, #+36]
   \   000002FC   0xEE00 0xFA48      VMLS.F32 S30,S0,S16
   \   00000300   0xEEB1 0x0A00      VMOV.F32 S0,#4.0
   \   00000304   0xEE2A 0x0A80      VMUL.F32 S0,S21,S0
   \   00000308   0x....             LDR.N    R0,??DataTable3_2
   \   0000030A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000030E   0xEE00 0xFA20      VMLA.F32 S30,S0,S1
   \   00000312   0xED9D 0x0A08      VLDR     S0,[SP, #+32]
   \   00000316   0xEE00 0xFA68      VMLS.F32 S30,S0,S17
    185              recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
   \   0000031A   0xEE2D 0x0AAD      VMUL.F32 S0,S27,S27
   \   0000031E   0xEE0E 0x0A0E      VMLA.F32 S0,S28,S28
   \   00000322   0xEE0E 0x0AAE      VMLA.F32 S0,S29,S29
   \   00000326   0xEE0F 0x0A0F      VMLA.F32 S0,S30,S30
   \   0000032A   0x.... 0x....      BL       _Z7invSqrtf
   \   0000032E   0xEEF0 0xFA40      VMOV.F32 S31,S0
    186              s0 *= recipNorm;
   \   00000332   0xEE2D 0x0AAF      VMUL.F32 S0,S27,S31
   \   00000336   0xED8D 0x0A0E      VSTR     S0,[SP, #+56]
    187              s1 *= recipNorm;
   \   0000033A   0xEE2E 0x0A2F      VMUL.F32 S0,S28,S31
   \   0000033E   0xED8D 0x0A0D      VSTR     S0,[SP, #+52]
    188              s2 *= recipNorm;
   \   00000342   0xEE2E 0x0AAF      VMUL.F32 S0,S29,S31
   \   00000346   0xED8D 0x0A0C      VSTR     S0,[SP, #+48]
    189              s3 *= recipNorm;
   \   0000034A   0xEE2F 0x0A2F      VMUL.F32 S0,S30,S31
   \   0000034E   0xED8D 0x0A0B      VSTR     S0,[SP, #+44]
    190          
    191              // Apply feedback step
    192              qDot1 -= beta * s0;
   \   00000352   0xEE1B 0x0A10      VMOV     R0,S22
   \   00000356   0x.... 0x....      BL       __aeabi_f2d
   \   0000035A   0x0004             MOVS     R4,R0
   \   0000035C   0x000D             MOVS     R5,R1
   \   0000035E   0x980E             LDR      R0,[SP, #+56]
   \   00000360   0x.... 0x....      BL       __aeabi_f2d
   \   00000364   0x....             LDR.N    R2,??DataTable3_1
   \   00000366   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   0000036A   0x.... 0x....      BL       __aeabi_dmul
   \   0000036E   0x0002             MOVS     R2,R0
   \   00000370   0x000B             MOVS     R3,R1
   \   00000372   0x0020             MOVS     R0,R4
   \   00000374   0x0029             MOVS     R1,R5
   \   00000376   0x.... 0x....      BL       __aeabi_dsub
   \   0000037A   0x.... 0x....      BL       __aeabi_d2f
   \   0000037E   0xEE0B 0x0A10      VMOV     S22,R0
    193              qDot2 -= beta * s1;
   \   00000382   0xEE1B 0x0A90      VMOV     R0,S23
   \   00000386   0x.... 0x....      BL       __aeabi_f2d
   \   0000038A   0x0004             MOVS     R4,R0
   \   0000038C   0x000D             MOVS     R5,R1
   \   0000038E   0x980D             LDR      R0,[SP, #+52]
   \   00000390   0x.... 0x....      BL       __aeabi_f2d
   \   00000394   0x....             LDR.N    R2,??DataTable3_1
   \   00000396   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   0000039A   0x.... 0x....      BL       __aeabi_dmul
   \   0000039E   0x0002             MOVS     R2,R0
   \   000003A0   0x000B             MOVS     R3,R1
   \   000003A2   0x0020             MOVS     R0,R4
   \   000003A4   0x0029             MOVS     R1,R5
   \   000003A6   0x.... 0x....      BL       __aeabi_dsub
   \   000003AA   0x.... 0x....      BL       __aeabi_d2f
   \   000003AE   0xEE0B 0x0A90      VMOV     S23,R0
    194              qDot3 -= beta * s2;
   \   000003B2   0xEE1C 0x0A10      VMOV     R0,S24
   \   000003B6   0x.... 0x....      BL       __aeabi_f2d
   \   000003BA   0x0004             MOVS     R4,R0
   \   000003BC   0x000D             MOVS     R5,R1
   \   000003BE   0x980C             LDR      R0,[SP, #+48]
   \   000003C0   0x.... 0x....      BL       __aeabi_f2d
   \   000003C4   0x....             LDR.N    R2,??DataTable3_1
   \   000003C6   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   000003CA   0x.... 0x....      BL       __aeabi_dmul
   \   000003CE   0x0002             MOVS     R2,R0
   \   000003D0   0x000B             MOVS     R3,R1
   \   000003D2   0x0020             MOVS     R0,R4
   \   000003D4   0x0029             MOVS     R1,R5
   \   000003D6   0x.... 0x....      BL       __aeabi_dsub
   \   000003DA   0x.... 0x....      BL       __aeabi_d2f
   \   000003DE   0xEE0C 0x0A10      VMOV     S24,R0
    195              qDot4 -= beta * s3;
   \   000003E2   0xEE1C 0x0A90      VMOV     R0,S25
   \   000003E6   0x.... 0x....      BL       __aeabi_f2d
   \   000003EA   0x0004             MOVS     R4,R0
   \   000003EC   0x000D             MOVS     R5,R1
   \   000003EE   0x980B             LDR      R0,[SP, #+44]
   \   000003F0   0x.... 0x....      BL       __aeabi_f2d
   \   000003F4   0x....             LDR.N    R2,??DataTable3_1
   \   000003F6   0xE003             B.N      ??MadgwickAHRSupdateIMU_4
   \                     ??MadgwickAHRSupdateIMU_0:
   \   000003F8   0x........         DC32     q1
   \   000003FC   0x........         DC32     q2
   \                     ??MadgwickAHRSupdateIMU_4: (+1)
   \   00000400   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   00000404   0x.... 0x....      BL       __aeabi_dmul
   \   00000408   0x0002             MOVS     R2,R0
   \   0000040A   0x000B             MOVS     R3,R1
   \   0000040C   0x0020             MOVS     R0,R4
   \   0000040E   0x0029             MOVS     R1,R5
   \   00000410   0x.... 0x....      BL       __aeabi_dsub
   \   00000414   0x.... 0x....      BL       __aeabi_d2f
   \   00000418   0xEE0C 0x0A90      VMOV     S25,R0
    196            }
    197          
    198            // Integrate rate of change of quaternion to yield quaternion
    199            q0 += qDot1 * (1.0f / sampleFreq);
   \                     ??MadgwickAHRSupdateIMU_3: (+1)
   \   0000041C   0xED9F 0x....      VLDR.W   S0,??DataTable3  ;; 0x3b03126f
   \   00000420   0x480F             LDR.N    R0,??MadgwickAHRSupdateIMU_1
   \   00000422   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000426   0xEE4B 0x0A00      VMLA.F32 S1,S22,S0
   \   0000042A   0x480D             LDR.N    R0,??MadgwickAHRSupdateIMU_1
   \   0000042C   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    200            q1 += qDot2 * (1.0f / sampleFreq);
   \   00000430   0xED9F 0x....      VLDR.W   S0,??DataTable3  ;; 0x3b03126f
   \   00000434   0x....             LDR.N    R0,??DataTable3_3
   \   00000436   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000043A   0xEE4B 0x0A80      VMLA.F32 S1,S23,S0
   \   0000043E   0x....             LDR.N    R0,??DataTable3_3
   \   00000440   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    201            q2 += qDot3 * (1.0f / sampleFreq);
   \   00000444   0xED9F 0x....      VLDR.W   S0,??DataTable3  ;; 0x3b03126f
   \   00000448   0x....             LDR.N    R0,??DataTable3_4
   \   0000044A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000044E   0xEE4C 0x0A00      VMLA.F32 S1,S24,S0
   \   00000452   0x....             LDR.N    R0,??DataTable3_4
   \   00000454   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    202            q3 += qDot4 * (1.0f / sampleFreq);
   \   00000458   0xED9F 0x....      VLDR.W   S0,??DataTable3  ;; 0x3b03126f
   \   0000045C   0xE002             B.N      ??MadgwickAHRSupdateIMU_5
   \   0000045E   0xBF00             Nop      
   \                     ??MadgwickAHRSupdateIMU_1:
   \   00000460   0x........         DC32     q0
   \                     ??MadgwickAHRSupdateIMU_5: (+1)
   \   00000464   0x....             LDR.N    R0,??DataTable3_2
   \   00000466   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000046A   0xEE4C 0x0A80      VMLA.F32 S1,S25,S0
   \   0000046E   0x....             LDR.N    R0,??DataTable3_2
   \   00000470   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    203          
    204            // Normalise quaternion
    205            recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
   \   00000474   0x....             LDR.N    R0,??DataTable3_5
   \   00000476   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000047A   0x....             LDR.N    R0,??DataTable3_5
   \   0000047C   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000480   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000484   0x....             LDR.N    R0,??DataTable3_3
   \   00000486   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000048A   0x....             LDR.N    R0,??DataTable3_3
   \   0000048C   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000490   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000494   0x....             LDR.N    R0,??DataTable3_4
   \   00000496   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000049A   0x....             LDR.N    R0,??DataTable3_4
   \   0000049C   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000004A0   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000004A4   0x....             LDR.N    R0,??DataTable3_2
   \   000004A6   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000004AA   0x....             LDR.N    R0,??DataTable3_2
   \   000004AC   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000004B0   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000004B4   0x.... 0x....      BL       _Z7invSqrtf
    206            q0 *= recipNorm;
   \   000004B8   0x....             LDR.N    R0,??DataTable3_5
   \   000004BA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000004BE   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \   000004C2   0x....             LDR.N    R0,??DataTable3_5
   \   000004C4   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    207            q1 *= recipNorm;
   \   000004C8   0x....             LDR.N    R0,??DataTable3_3
   \   000004CA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000004CE   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \   000004D2   0x....             LDR.N    R0,??DataTable3_3
   \   000004D4   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    208            q2 *= recipNorm;
   \   000004D8   0x....             LDR.N    R0,??DataTable3_4
   \   000004DA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000004DE   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \   000004E2   0x....             LDR.N    R0,??DataTable3_4
   \   000004E4   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    209            q3 *= recipNorm;
   \   000004E8   0x....             LDR.N    R0,??DataTable3_2
   \   000004EA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000004EE   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \   000004F2   0x....             LDR.N    R0,??DataTable3_2
   \   000004F4   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
    210          }
   \   000004F8   0xB012             ADD      SP,SP,#+72
   \   000004FA   0xECBD 0x8B10      VPOP     {D8-D15}
   \   000004FE   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    211          
    212          //---------------------------------------------------------------------------------------------------
    213          // Fast inverse square-root
    214          // See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
    215          

   \                                 In section .text, align 2, keep-with-next
    216          float invSqrt(float x) {
   \                     _Z7invSqrtf: (+1)
   \   00000000   0xB082             SUB      SP,SP,#+8
   \   00000002   0xEEF0 0x0A40      VMOV.F32 S1,S0
    217            float halfx = 0.5f * x;
   \   00000006   0xEEB6 0x0A00      VMOV.F32 S0,#0.5
   \   0000000A   0xEE20 0x1A80      VMUL.F32 S2,S1,S0
    218            float y = x;
   \   0000000E   0xEDCD 0x0A01      VSTR     S1,[SP, #+4]
    219            long i = *(long*)&y;
   \   00000012   0x9801             LDR      R0,[SP, #+4]
    220            i = 0x5f3759df - (i>>1);
   \   00000014   0x....             LDR.N    R1,??DataTable3_6  ;; 0x5f3759df
   \   00000016   0xEBB1 0x0160      SUBS     R1,R1,R0, ASR #+1
   \   0000001A   0x9100             STR      R1,[SP, #+0]
    221            y = *(float*)&i;
   \   0000001C   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
    222            y = y * (1.5f - (halfx * y * y));
   \   00000020   0xEE61 0x1A00      VMUL.F32 S3,S2,S0
   \   00000024   0xEEB7 0x2A08      VMOV.F32 S4,#1.5
   \   00000028   0xEE01 0x2AC0      VMLS.F32 S4,S3,S0
   \   0000002C   0xEE22 0x0A00      VMUL.F32 S0,S4,S0
    223            return y;
   \   00000030   0xB002             ADD      SP,SP,#+8
   \   00000032   0x4770             BX       LR               ;; return
    224          }
    225          

   \                                 In section .bss, align 4
    226          float   heading, attitude, bank;
   \                     heading:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     attitude:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     bank:
   \   00000000                      DS8 4
    227          

   \                                 In section .bss, align 4
    228          int     myPitch, myRoll, myYaw, myYaw1, myYaw2;
   \                     myPitch:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     myRoll:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     myYaw:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     myYaw1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     myYaw2:
   \   00000000                      DS8 4
    229          

   \                                 In section .text, align 2, keep-with-next
    230          void q2Eular()
    231          {
   \                     _Z7q2Eularv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    232          //  double test = q1*q2 + q3*q0;
    233          //  if (test > 0.499) { // singularity at north pole
    234          //    heading = 2 * atan2(q1,q0);
    235          //    attitude = PI/2;
    236          //    bank = 0;
    237          //    return;
    238          //  }
    239          //  if (test < -0.499) { // singularity at south pole
    240          //    heading = -2 * atan2(q1,q0);
    241          //    attitude = - PI/2;
    242          //    bank = 0;
    243          //    return;
    244          //  }
    245          //  double sqx = q1*q1;
    246          //  double sqy = q2*q2;
    247          //  double sqz = q3*q3;
    248          ////  heading = heading * 0.9 + (atan2((double)2*q2*q0-2*q1*q3 , 1 - 2*sqy - 2*sqz)*57.3) * 0.1;
    249          ////  attitude = attitude * 0.9 + (asin(2*test)*57.3) * 0.1;
    250          ////  bank = bank * 0.9 + (atan2((double)2*q1*q0-2*q2*q3 , 1 - 2*sqx - 2*sqz)*57.3) * 0.1;
    251          //  
    252          //  heading = heading * 0 + (asinf(-2 * q1 * q3 + 2 * q0* q2)* 57.3) * 1;
    253          //  attitude = attitude * 0 + (asinf(2*test)*57.3) * 1;
    254          //  bank = bank * 0 + (atan2f(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3) * 1;
    255          //  
    256          //  
    257          //  
    258          //  myRoll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;
    259          //  myPitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;
    260          // // myYaw   = atan2f( 2 * (q0 * q1 + q2 * q3), q0*q0 - q1*q1 - q2*q2 + q3*q3 )*57.3;
    261          
    262          //  myYaw   = atan2f( 2 * (q0*q1 + q2*q3), 1 - 2 * (q1*q1 + q2*q2) )*57.3;
    263          //  myYaw1   = asinf(2 * (q0*q2 - q3*q1))*57.3;
    264          //  myYaw2   = atan2f( 2 * (q0*q3 + q1*q2), 1 - 2 * (q2*q2 + q3*q3) )*57.3;
    265            
    266          //  roll = bank;
    267          //  pitch = heading;
    268          //  yaw = attitude;
    269          
    270            roll = atan2f( 2 * (q0*q1 + q2*q3), 1 - 2 * (q1*q1 + q2*q2) )*57.3;
   \   00000002   0x....             LDR.N    R0,??DataTable3_3
   \   00000004   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000008   0x....             LDR.N    R0,??DataTable3_3
   \   0000000A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000000E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000012   0x....             LDR.N    R0,??DataTable3_4
   \   00000014   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000018   0x....             LDR.N    R0,??DataTable3_4
   \   0000001A   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   0000001E   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000022   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   00000026   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   0000002A   0xEE40 0x0A41      VMLS.F32 S1,S0,S2
   \   0000002E   0x....             LDR.N    R0,??DataTable3_5
   \   00000030   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000034   0x....             LDR.N    R0,??DataTable3_3
   \   00000036   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   0000003A   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   0000003E   0x....             LDR.N    R0,??DataTable3_4
   \   00000040   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000044   0x....             LDR.N    R0,??DataTable3_2
   \   00000046   0xEDD0 0x1A00      VLDR     S3,[R0, #0]
   \   0000004A   0xEE01 0x0A21      VMLA.F32 S0,S2,S3
   \   0000004E   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   00000052   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   00000056   0x.... 0x....      BL       atan2f
   \   0000005A   0xEE10 0x0A10      VMOV     R0,S0
   \   0000005E   0x.... 0x....      BL       __aeabi_f2d
   \   00000062   0xF05F 0x3266      MOVS     R2,#+1717986918
   \   00000066   0x....             LDR.N    R3,??DataTable3_7  ;; 0x404ca666
   \   00000068   0x.... 0x....      BL       __aeabi_dmul
   \   0000006C   0x.... 0x....      BL       __aeabi_d2f
   \   00000070   0x....             LDR.N    R1,??DataTable3_8
   \   00000072   0x6008             STR      R0,[R1, #+0]
    271            pitch = asinf(2 * (q0*q2 - q3*q1))*57.3;
   \   00000074   0x....             LDR.N    R0,??DataTable3_5
   \   00000076   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000007A   0x....             LDR.N    R0,??DataTable3_4
   \   0000007C   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000080   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000084   0x....             LDR.N    R0,??DataTable3_2
   \   00000086   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000008A   0x....             LDR.N    R0,??DataTable3_3
   \   0000008C   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   00000090   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   00000094   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000098   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000009C   0x.... 0x....      BL       asinf
   \   000000A0   0xEE10 0x0A10      VMOV     R0,S0
   \   000000A4   0x.... 0x....      BL       __aeabi_f2d
   \   000000A8   0xF05F 0x3266      MOVS     R2,#+1717986918
   \   000000AC   0x....             LDR.N    R3,??DataTable3_7  ;; 0x404ca666
   \   000000AE   0x.... 0x....      BL       __aeabi_dmul
   \   000000B2   0x.... 0x....      BL       __aeabi_d2f
   \   000000B6   0x....             LDR.N    R1,??DataTable3_9
   \   000000B8   0x6008             STR      R0,[R1, #+0]
    272            yaw = atan2f( 2 * (q0*q3 + q1*q2), 1 - 2 * (q2*q2 + q3*q3) )*57.3;
   \   000000BA   0x....             LDR.N    R0,??DataTable3_4
   \   000000BC   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000C0   0x....             LDR.N    R0,??DataTable3_4
   \   000000C2   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000C6   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000000CA   0x....             LDR.N    R0,??DataTable3_2
   \   000000CC   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000D0   0x....             LDR.N    R0,??DataTable3_2
   \   000000D2   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000000D6   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000DA   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   000000DE   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   000000E2   0xEE40 0x0A41      VMLS.F32 S1,S0,S2
   \   000000E6   0x....             LDR.N    R0,??DataTable3_5
   \   000000E8   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000EC   0x....             LDR.N    R0,??DataTable3_2
   \   000000EE   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000000F2   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   000000F6   0x....             LDR.N    R0,??DataTable3_3
   \   000000F8   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000000FC   0x....             LDR.N    R0,??DataTable3_4
   \   000000FE   0xEDD0 0x1A00      VLDR     S3,[R0, #0]
   \   00000102   0xEE01 0x0A21      VMLA.F32 S0,S2,S3
   \   00000106   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   0000010A   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   0000010E   0x.... 0x....      BL       atan2f
   \   00000112   0xEE10 0x0A10      VMOV     R0,S0
   \   00000116   0x.... 0x....      BL       __aeabi_f2d
   \   0000011A   0xF05F 0x3266      MOVS     R2,#+1717986918
   \   0000011E   0x....             LDR.N    R3,??DataTable3_7  ;; 0x404ca666
   \   00000120   0x.... 0x....      BL       __aeabi_dmul
   \   00000124   0x.... 0x....      BL       __aeabi_d2f
   \   00000128   0x....             LDR.N    R1,??DataTable3_10
   \   0000012A   0x6008             STR      R0,[R1, #+0]
    273          
    274          
    275          }
   \   0000012C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x3B03126F         DC32     0x3b03126f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     q3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x3B03126F         DC32     0x3b03126f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     beta

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     q3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     q1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     q2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     q0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x5F3759DF         DC32     0x5f3759df

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x404CA666         DC32     0x404ca666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     roll

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     pitch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     yaw

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     216   MadgwickAHRSupdate(float, float, float, float, float, float, float, float, float)
       216   -> MadgwickAHRSupdateIMU(float, float, float, float, float, float)
       216   -> __aeabi_d2f
       216   -> __aeabi_dmul
       216   -> __aeabi_dsub
       216   -> __aeabi_f2d
       216   -> invSqrt(float)
       216   -> sqrtf
     152   MadgwickAHRSupdateIMU(float, float, float, float, float, float)
       152   -> __aeabi_d2f
       152   -> __aeabi_dmul
       152   -> __aeabi_dsub
       152   -> __aeabi_f2d
       152   -> invSqrt(float)
       8   invSqrt(float)
       8   q2Eular()
         8   -> __aeabi_d2f
         8   -> __aeabi_dmul
         8   -> __aeabi_f2d
         8   -> asinf
         8   -> atan2f


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
    2886  MadgwickAHRSupdate(float, float, float, float, float, float, float, float, float)
    1280  MadgwickAHRSupdateIMU(float, float, float, float, float, float)
       4  attitude
       4  bank
       8  beta
       4  heading
      52  invSqrt(float)
       4  myPitch
       4  myRoll
       4  myYaw
       4  myYaw1
       4  myYaw2
       4  q0
       4  q1
       4  q2
     302  q2Eular()
       4  q3

 
    44 bytes in section .bss
    12 bytes in section .data
 4 572 bytes in section .text
 
 4 572 bytes of CODE memory
    56 bytes of DATA memory

Errors: none
Warnings: none
