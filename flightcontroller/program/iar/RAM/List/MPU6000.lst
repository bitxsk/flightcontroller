###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       18/Jun/2018  19:47:59
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\MPU6000.cpp
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW2345.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\MPU6000.cpp
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\MPU6000.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\MPU6000.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\MPU6000.cpp
      1          #include "MPU6000.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp MPU6000_Type::MPU6000_Type()
   \                     _ZN12MPU6000_TypeC1Ev: (+1)
   \   00000000   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000004   0x61C1             STR      R1,[R0, #+28]
   \   00000006   0x4905             LDR.N    R1,??MPU6000_Type_0  ;; 0x44fa0000
   \   00000008   0x6201             STR      R1,[R0, #+32]
   \   0000000A   0x4905             LDR.N    R1,??MPU6000_Type_0+0x4  ;; 0x42700000
   \   0000000C   0x6241             STR      R1,[R0, #+36]
   \   0000000E   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000012   0x6281             STR      R1,[R0, #+40]
   \   00000014   0x4903             LDR.N    R1,??MPU6000_Type_0+0x8  ;; 0x43480000
   \   00000016   0x62C1             STR      R1,[R0, #+44]
   \   00000018   0x4770             BX       LR               ;; return
   \   0000001A   0xBF00             Nop      
   \                     ??MPU6000_Type_0:
   \   0000001C   0x44FA0000         DC32     0x44fa0000
   \   00000020   0x42700000         DC32     0x42700000
   \   00000024   0x43480000         DC32     0x43480000
      2          
      3          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      4          MPU6000_Type MPU6000, MPU6000_Raw;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable4
   \   00000006   0x.... 0x....      BL       _ZN12MPU6000_TypeC1Ev
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   0000000E   0x.... 0x....      BL       _ZN12MPU6000_TypeC1Ev
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     MPU6000:
   \   00000000                      DS8 96

   \                                 In section .bss, align 4
   \                     MPU6000_Raw:
   \   00000000                      DS8 96

   \                                 In section .data, align 1
      5          u8 MPU6000_CS = 7;
   \                     MPU6000_CS:
   \   00000000   0x07               DC8 7
      6          

   \                                 In section .text, align 2, keep-with-next
      7          void MPU6000_WriteByte(u8 Address,u8 byte)
      8          {
   \                     _Z17MPU6000_WriteBytehh: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
      9            SPI_Master_WriteRead(MPU6000_SPIx, Address&0X7F, MPU6000_CS, SPI_PCS_ASSERTED);    //&0X7F将第一位变为0
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000000C   0x7802             LDRB     R2,[R0, #+0]
   \   0000000E   0xF014 0x017F      ANDS     R1,R4,#0x7F
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable4_3  ;; 0x4002d000
   \   00000016   0x.... 0x....      BL       SPI_Master_WriteRead
     10            SPI_Master_WriteRead(MPU6000_SPIx, byte, MPU6000_CS, SPI_PCS_INACTIVE);
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000020   0x7802             LDRB     R2,[R0, #+0]
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable4_3  ;; 0x4002d000
   \   0000002A   0x.... 0x....      BL       SPI_Master_WriteRead
     11          }
   \                     ??MPU6000_WriteByte_0: (+1)
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     12          

   \                                 In section .text, align 2, keep-with-next
     13          u8 MPU6000_ReadByte(u8 Address)
     14          {
   \                     _Z16MPU6000_ReadByteh: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     15            u8 temp=0;
   \   00000004   0x2500             MOVS     R5,#+0
     16            SPI_Master_WriteRead(MPU6000_SPIx, Address|0x80, MPU6000_CS, SPI_PCS_ASSERTED);
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000000C   0x7802             LDRB     R2,[R0, #+0]
   \   0000000E   0xF054 0x0180      ORRS     R1,R4,#0x80
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable4_3  ;; 0x4002d000
   \   00000018   0x.... 0x....      BL       SPI_Master_WriteRead
     17            temp = SPI_Master_WriteRead(MPU6000_SPIx, Dummy_Byte, MPU6000_CS, SPI_PCS_INACTIVE);
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000022   0x7802             LDRB     R2,[R0, #+0]
   \   00000024   0x2180             MOVS     R1,#+128
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable4_3  ;; 0x4002d000
   \   0000002A   0x.... 0x....      BL       SPI_Master_WriteRead
     18            return temp;
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??MPU6000_ReadByte_0: (+1)
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     19          }
     20          

   \                                 In section .text, align 2, keep-with-next
     21          void MPU6000_ReadBuf(u8 Address, u8 *Buf, u8 len)
     22          {
   \                     _Z15MPU6000_ReadBufhPhh: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     23            uint8 i;
     24            
     25            SPI_Master_WriteRead(MPU6000_SPIx, Address|0x80, MPU6000_CS, SPI_PCS_ASSERTED);
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000000E   0x7802             LDRB     R2,[R0, #+0]
   \   00000010   0xF054 0x0180      ORRS     R1,R4,#0x80
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable4_3  ;; 0x4002d000
   \   0000001A   0x.... 0x....      BL       SPI_Master_WriteRead
     26            
     27            for(i = 0 ;i < len ;i++)
   \   0000001E   0x2700             MOVS     R7,#+0
   \                     ??MPU6000_ReadBuf_0: (+1)
   \   00000020   0x0038             MOVS     R0,R7
   \   00000022   0x0031             MOVS     R1,R6
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xD21D             BCS.N    ??MPU6000_ReadBuf_1
     28            {
     29              if( i == (len-1) )
   \   0000002C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x1E70             SUBS     R0,R6,#+1
   \   00000032   0x4287             CMP      R7,R0
   \   00000034   0xD10B             BNE.N    ??MPU6000_ReadBuf_2
     30              {
     31                Buf[i] = SPI_Master_WriteRead(MPU6000_SPIx, Dummy_Byte, MPU6000_CS, SPI_PCS_INACTIVE);
   \   00000036   0x2300             MOVS     R3,#+0
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000003C   0x7802             LDRB     R2,[R0, #+0]
   \   0000003E   0x2180             MOVS     R1,#+128
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable4_3  ;; 0x4002d000
   \   00000044   0x.... 0x....      BL       SPI_Master_WriteRead
   \   00000048   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004A   0x55E8             STRB     R0,[R5, R7]
   \   0000004C   0xE00A             B.N      ??MPU6000_ReadBuf_3
     32              }
     33              else
     34              {
     35                Buf[i] = SPI_Master_WriteRead(MPU6000_SPIx, Dummy_Byte, MPU6000_CS, SPI_PCS_ASSERTED);
   \                     ??MPU6000_ReadBuf_2: (+1)
   \   0000004E   0x2301             MOVS     R3,#+1
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000054   0x7802             LDRB     R2,[R0, #+0]
   \   00000056   0x2180             MOVS     R1,#+128
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable4_3  ;; 0x4002d000
   \   0000005C   0x.... 0x....      BL       SPI_Master_WriteRead
   \   00000060   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000062   0x55E8             STRB     R0,[R5, R7]
     36              }
     37            }
   \                     ??MPU6000_ReadBuf_3: (+1)
   \   00000064   0x1C7F             ADDS     R7,R7,#+1
   \   00000066   0xE7DB             B.N      ??MPU6000_ReadBuf_0
     38          }
   \                     ??MPU6000_ReadBuf_1: (+1)
   \                     ??MPU6000_ReadBuf_4: (+1)
   \   00000068   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     39          
     40          //MPU6000_Type::MPU6000_Type():accelRange(2.0f), gyroRange(2000.0f)
     41          //{
     42          //  
     43          //}
     44          
     45          //MPU6000_Type(float a, float g, float t)
     46          //{
     47          //  accel_x = a;
     48          //  accel_y = a;
     49          //  accel_z = a;
     50          //  gyro_x = g;
     51          //  gyro_y = g;
     52          //  gyro_z = g;
     53          //  temperature = t;
     54          //}
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void MPU6000_Type::operator= (MPU6000_Type& other)
     57          {
     58            this->accel_x = other.accel_x;
   \                     _ZN12MPU6000_TypeaSERS_: (+1)
   \   00000000   0x6B0A             LDR      R2,[R1, #+48]
   \   00000002   0x6302             STR      R2,[R0, #+48]
     59            this->accel_y = other.accel_y;
   \   00000004   0x6B4A             LDR      R2,[R1, #+52]
   \   00000006   0x6342             STR      R2,[R0, #+52]
     60            this->accel_z = other.accel_z;
   \   00000008   0x6B8A             LDR      R2,[R1, #+56]
   \   0000000A   0x6382             STR      R2,[R0, #+56]
     61            this->gyro_x = other.gyro_x;
   \   0000000C   0x6BCA             LDR      R2,[R1, #+60]
   \   0000000E   0x63C2             STR      R2,[R0, #+60]
     62            this->gyro_y = other.gyro_y;
   \   00000010   0x6C0A             LDR      R2,[R1, #+64]
   \   00000012   0x6402             STR      R2,[R0, #+64]
     63            this->gyro_z = other.gyro_z;
   \   00000014   0x6C4A             LDR      R2,[R1, #+68]
   \   00000016   0x6442             STR      R2,[R0, #+68]
     64            this->temperature = other.temperature;
   \   00000018   0x6D4A             LDR      R2,[R1, #+84]
   \   0000001A   0x6542             STR      R2,[R0, #+84]
     65            int i = 0;
   \   0000001C   0x2200             MOVS     R2,#+0
     66            for(;i < 14; i++)
   \                     `??operator=_0`: (+1)
   \   0000001E   0x2A0E             CMP      R2,#+14
   \   00000020   0xDA03             BGE.N    `??operator=_1`
     67            {
     68              *(this->BUF + i) = *(other.BUF + i);
   \   00000022   0x5C8B             LDRB     R3,[R1, R2]
   \   00000024   0x5483             STRB     R3,[R0, R2]
     69            }
   \   00000026   0x1C52             ADDS     R2,R2,#+1
   \   00000028   0xE7F9             B.N      `??operator=_0`
     70          }
   \                     `??operator=_1`: (+1)
   \   0000002A   0x4770             BX       LR               ;; return
     71          

   \                                 In section .text, align 2, keep-with-next
     72          bool MPU6000_Type::operator== (MPU6000_Type& other)
     73          {
   \                     _ZN12MPU6000_TypeeqERS_: (+1)
   \   00000000   0x0002             MOVS     R2,R0
     74            if(this->accel_x == other.accel_x
     75                && this->accel_y == other.accel_y
     76                && this->accel_z == other.accel_z
     77                && this->gyro_x == other.gyro_x
     78                && this->gyro_y == other.gyro_y
     79                && this->gyro_z == other.gyro_z
     80                && this->temperature == other.temperature
     81               )
   \   00000002   0xED92 0x0A0C      VLDR     S0,[R2, #+48]
   \   00000006   0xEDD1 0x0A0C      VLDR     S1,[R1, #+48]
   \   0000000A   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000000E   0xEEF1 0xFA10      FMSTAT   
   \   00000012   0xD137             BNE.N    `??operator==_0`
   \   00000014   0xED92 0x0A0D      VLDR     S0,[R2, #+52]
   \   00000018   0xEDD1 0x0A0D      VLDR     S1,[R1, #+52]
   \   0000001C   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000020   0xEEF1 0xFA10      FMSTAT   
   \   00000024   0xD12E             BNE.N    `??operator==_0`
   \   00000026   0xED92 0x0A0E      VLDR     S0,[R2, #+56]
   \   0000002A   0xEDD1 0x0A0E      VLDR     S1,[R1, #+56]
   \   0000002E   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000032   0xEEF1 0xFA10      FMSTAT   
   \   00000036   0xD125             BNE.N    `??operator==_0`
   \   00000038   0xED92 0x0A0F      VLDR     S0,[R2, #+60]
   \   0000003C   0xEDD1 0x0A0F      VLDR     S1,[R1, #+60]
   \   00000040   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000044   0xEEF1 0xFA10      FMSTAT   
   \   00000048   0xD11C             BNE.N    `??operator==_0`
   \   0000004A   0xED92 0x0A10      VLDR     S0,[R2, #+64]
   \   0000004E   0xEDD1 0x0A10      VLDR     S1,[R1, #+64]
   \   00000052   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000056   0xEEF1 0xFA10      FMSTAT   
   \   0000005A   0xD113             BNE.N    `??operator==_0`
   \   0000005C   0xED92 0x0A11      VLDR     S0,[R2, #+68]
   \   00000060   0xEDD1 0x0A11      VLDR     S1,[R1, #+68]
   \   00000064   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000068   0xEEF1 0xFA10      FMSTAT   
   \   0000006C   0xD10A             BNE.N    `??operator==_0`
   \   0000006E   0xED92 0x0A15      VLDR     S0,[R2, #+84]
   \   00000072   0xEDD1 0x0A15      VLDR     S1,[R1, #+84]
   \   00000076   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000007A   0xEEF1 0xFA10      FMSTAT   
   \   0000007E   0xD101             BNE.N    `??operator==_0`
     82            {
     83              return true;
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0xE000             B.N      `??operator==_1`
     84            }
     85            else
     86            {
     87              return false;
   \                     `??operator==_0`: (+1)
   \   00000084   0x2000             MOVS     R0,#+0
   \                     `??operator==_1`: (+1)
   \   00000086   0x4770             BX       LR               ;; return
     88            } 
     89          }
     90          
     91          

   \                                 In section .text, align 2, keep-with-next
     92          MPU6000_Type MPU6000_Type::operator- (MPU6000_Type& other)
     93          {
   \                     _ZN12MPU6000_TypemiERS_: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB098             SUB      SP,SP,#+96
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     94            MPU6000_Type tmp;
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       _ZN12MPU6000_TypeC1Ev
     95            tmp.accel_x   = accel_x - other.accel_x;
   \   00000010   0xED95 0x0A0C      VLDR     S0,[R5, #+48]
   \   00000014   0xEDD6 0x0A0C      VLDR     S1,[R6, #+48]
   \   00000018   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   0000001C   0xED8D 0x0A0C      VSTR     S0,[SP, #+48]
     96            tmp.accel_y   = accel_y - other.accel_y;
   \   00000020   0xED95 0x0A0D      VLDR     S0,[R5, #+52]
   \   00000024   0xEDD6 0x0A0D      VLDR     S1,[R6, #+52]
   \   00000028   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   0000002C   0xED8D 0x0A0D      VSTR     S0,[SP, #+52]
     97            tmp.accel_z   = accel_z - other.accel_z;
   \   00000030   0xED95 0x0A0E      VLDR     S0,[R5, #+56]
   \   00000034   0xEDD6 0x0A0E      VLDR     S1,[R6, #+56]
   \   00000038   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   0000003C   0xED8D 0x0A0E      VSTR     S0,[SP, #+56]
     98            tmp.gyro_x    = gyro_x - other.gyro_x;
   \   00000040   0xED95 0x0A0F      VLDR     S0,[R5, #+60]
   \   00000044   0xEDD6 0x0A0F      VLDR     S1,[R6, #+60]
   \   00000048   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   0000004C   0xED8D 0x0A0F      VSTR     S0,[SP, #+60]
     99            tmp.gyro_y    = gyro_y - other.gyro_y;
   \   00000050   0xED95 0x0A10      VLDR     S0,[R5, #+64]
   \   00000054   0xEDD6 0x0A10      VLDR     S1,[R6, #+64]
   \   00000058   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   0000005C   0xED8D 0x0A10      VSTR     S0,[SP, #+64]
    100            tmp.gyro_z    = gyro_z - other.gyro_z;
   \   00000060   0xED95 0x0A11      VLDR     S0,[R5, #+68]
   \   00000064   0xEDD6 0x0A11      VLDR     S1,[R6, #+68]
   \   00000068   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   0000006C   0xED8D 0x0A11      VSTR     S0,[SP, #+68]
    101            tmp.temperature = temperature - other.temperature;
   \   00000070   0xED95 0x0A15      VLDR     S0,[R5, #+84]
   \   00000074   0xEDD6 0x0A15      VLDR     S1,[R6, #+84]
   \   00000078   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   0000007C   0xED8D 0x0A15      VSTR     S0,[SP, #+84]
    102            return tmp;
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x4669             MOV      R1,SP
   \   00000084   0x2260             MOVS     R2,#+96
   \   00000086   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000008A   0xB018             ADD      SP,SP,#+96
   \   0000008C   0xBD70             POP      {R4-R6,PC}       ;; return
    103          }
    104          

   \                                 In section .text, align 2, keep-with-next
    105          bool MPU6000_Type::isInRange(float aRange, float gRange, float tRange)
    106          {
   \                     _ZN12MPU6000_Type9isInRangeEfff: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    107            if(abs(accel_x) <= aRange && abs(accel_y) <= aRange && abs(accel_z) <= aRange 
    108               && abs(gyro_x) <= gRange &&abs(gyro_y) <= gRange && abs(gyro_z) <= gRange
    109                 && abs(temperature) <= tRange)
   \   00000002   0xEDD1 0x1A0C      VLDR     S3,[R1, #+48]
   \   00000006   0xEEB0 0x2AE1      VABS.F32 S4,S3
   \   0000000A   0xEEB4 0x0A42      VCMP.F32 S0,S4
   \   0000000E   0xEEF1 0xFA10      FMSTAT   
   \   00000012   0xDB37             BLT.N    ??isInRange_0
   \   00000014   0xEDD1 0x1A0D      VLDR     S3,[R1, #+52]
   \   00000018   0xEEB0 0x2AE1      VABS.F32 S4,S3
   \   0000001C   0xEEB4 0x0A42      VCMP.F32 S0,S4
   \   00000020   0xEEF1 0xFA10      FMSTAT   
   \   00000024   0xDB2E             BLT.N    ??isInRange_0
   \   00000026   0xEDD1 0x1A0E      VLDR     S3,[R1, #+56]
   \   0000002A   0xEEB0 0x2AE1      VABS.F32 S4,S3
   \   0000002E   0xEEB4 0x0A42      VCMP.F32 S0,S4
   \   00000032   0xEEF1 0xFA10      FMSTAT   
   \   00000036   0xDB25             BLT.N    ??isInRange_0
   \   00000038   0xEDD1 0x1A0F      VLDR     S3,[R1, #+60]
   \   0000003C   0xEEB0 0x2AE1      VABS.F32 S4,S3
   \   00000040   0xEEF4 0x0A42      VCMP.F32 S1,S4
   \   00000044   0xEEF1 0xFA10      FMSTAT   
   \   00000048   0xDB1C             BLT.N    ??isInRange_0
   \   0000004A   0xEDD1 0x1A10      VLDR     S3,[R1, #+64]
   \   0000004E   0xEEB0 0x2AE1      VABS.F32 S4,S3
   \   00000052   0xEEF4 0x0A42      VCMP.F32 S1,S4
   \   00000056   0xEEF1 0xFA10      FMSTAT   
   \   0000005A   0xDB13             BLT.N    ??isInRange_0
   \   0000005C   0xEDD1 0x1A11      VLDR     S3,[R1, #+68]
   \   00000060   0xEEB0 0x2AE1      VABS.F32 S4,S3
   \   00000064   0xEEF4 0x0A42      VCMP.F32 S1,S4
   \   00000068   0xEEF1 0xFA10      FMSTAT   
   \   0000006C   0xDB0A             BLT.N    ??isInRange_0
   \   0000006E   0xEDD1 0x1A15      VLDR     S3,[R1, #+84]
   \   00000072   0xEEB0 0x2AE1      VABS.F32 S4,S3
   \   00000076   0xEEB4 0x1A42      VCMP.F32 S2,S4
   \   0000007A   0xEEF1 0xFA10      FMSTAT   
   \   0000007E   0xDB01             BLT.N    ??isInRange_0
    110            {
    111              return true;
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0xE000             B.N      ??isInRange_1
    112            }
    113            else
    114            {
    115              return false;
   \                     ??isInRange_0: (+1)
   \   00000084   0x2000             MOVS     R0,#+0
   \                     ??isInRange_1: (+1)
   \   00000086   0x4770             BX       LR               ;; return
    116            }
    117          }
    118          
    119          

   \                                 In section .text, align 2, keep-with-next
    120          bool MPU6000_Type::isNormal()
    121          {
   \                     _ZN12MPU6000_Type8isNormalEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    122            if(isInRange(accelRange, gyroRange, TempRange))
   \   00000004   0xED94 0x1A09      VLDR     S2,[R4, #+36]
   \   00000008   0xEDD4 0x0A08      VLDR     S1,[R4, #+32]
   \   0000000C   0xED94 0x0A07      VLDR     S0,[R4, #+28]
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       _ZN12MPU6000_Type9isInRangeEfff
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD001             BEQ.N    ??isNormal_0
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xE000             B.N      ??isNormal_1
   \                     ??isNormal_0: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \                     ??isNormal_1: (+1)
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD001             BEQ.N    ??isNormal_2
    123            {
    124              return true;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE000             B.N      ??isNormal_3
    125            }
    126            else
    127            {
    128              return false;
   \                     ??isNormal_2: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??isNormal_3: (+1)
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    129            }
    130          }
    131          

   \                                 In section .text, align 2, keep-with-next
    132          void MPU6000_Type::error()
    133          {
    134            this->errorCnt++;
   \                     _ZN12MPU6000_Type5errorEv: (+1)
   \   00000000   0x6D81             LDR      R1,[R0, #+88]
   \   00000002   0x1C49             ADDS     R1,R1,#+1
   \   00000004   0x6581             STR      R1,[R0, #+88]
    135            continuousError++;
   \   00000006   0x6DC1             LDR      R1,[R0, #+92]
   \   00000008   0x1C49             ADDS     R1,R1,#+1
   \   0000000A   0x65C1             STR      R1,[R0, #+92]
    136          }
   \   0000000C   0x4770             BX       LR               ;; return
    137          

   \                                 In section .text, align 2, keep-with-next
    138          void MPU6000_DAQ()
    139          {
   \                     _Z11MPU6000_DAQv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    140            MPU6000_ReadBuf(MPUREG_ACCEL_XOUT_H, MPU6000_Raw.BUF, 14);
   \   00000002   0x220E             MOVS     R2,#+14
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00000008   0x203B             MOVS     R0,#+59
   \   0000000A   0x.... 0x....      BL       _Z15MPU6000_ReadBufhPhh
    141            MPU6000_Raw.accel_x =     ((int16)(MPU6000_Raw.BUF[0] << 8 | MPU6000_Raw.BUF[1])) / 32768.0 * 2;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   00000012   0x7801             LDRB     R1,[R0, #+0]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   00000018   0x7840             LDRB     R0,[R0, #+1]
   \   0000001A   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   0000001E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000020   0x.... 0x....      BL       __aeabi_i2d
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0x.... 0x....      LDR.W    R3,??DataTable4_4  ;; 0x40e00000
   \   0000002A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000002E   0x2200             MOVS     R2,#+0
   \   00000030   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   00000034   0x.... 0x....      BL       __aeabi_dmul
   \   00000038   0x.... 0x....      BL       __aeabi_d2f
   \   0000003C   0x....             LDR.N    R1,??DataTable4_1
   \   0000003E   0x6308             STR      R0,[R1, #+48]
    142            MPU6000_Raw.accel_y =     ((int16)(MPU6000_Raw.BUF[2] << 8 | MPU6000_Raw.BUF[3])) / 32768.0 * 2;
   \   00000040   0x....             LDR.N    R0,??DataTable4_1
   \   00000042   0x7881             LDRB     R1,[R0, #+2]
   \   00000044   0x....             LDR.N    R0,??DataTable4_1
   \   00000046   0x78C0             LDRB     R0,[R0, #+3]
   \   00000048   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   0000004C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000004E   0x.... 0x....      BL       __aeabi_i2d
   \   00000052   0x2200             MOVS     R2,#+0
   \   00000054   0x....             LDR.N    R3,??DataTable4_4  ;; 0x40e00000
   \   00000056   0x.... 0x....      BL       __aeabi_ddiv
   \   0000005A   0x2200             MOVS     R2,#+0
   \   0000005C   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   00000060   0x.... 0x....      BL       __aeabi_dmul
   \   00000064   0x.... 0x....      BL       __aeabi_d2f
   \   00000068   0x....             LDR.N    R1,??DataTable4_1
   \   0000006A   0x6348             STR      R0,[R1, #+52]
    143            MPU6000_Raw.accel_z =     ((int16)(MPU6000_Raw.BUF[4] << 8 | MPU6000_Raw.BUF[5])) / 32768.0 * 2;
   \   0000006C   0x....             LDR.N    R0,??DataTable4_1
   \   0000006E   0x7901             LDRB     R1,[R0, #+4]
   \   00000070   0x....             LDR.N    R0,??DataTable4_1
   \   00000072   0x7940             LDRB     R0,[R0, #+5]
   \   00000074   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   00000078   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000007A   0x.... 0x....      BL       __aeabi_i2d
   \   0000007E   0x2200             MOVS     R2,#+0
   \   00000080   0x....             LDR.N    R3,??DataTable4_4  ;; 0x40e00000
   \   00000082   0x.... 0x....      BL       __aeabi_ddiv
   \   00000086   0x2200             MOVS     R2,#+0
   \   00000088   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   0000008C   0x.... 0x....      BL       __aeabi_dmul
   \   00000090   0x.... 0x....      BL       __aeabi_d2f
   \   00000094   0x....             LDR.N    R1,??DataTable4_1
   \   00000096   0x6388             STR      R0,[R1, #+56]
    144            MPU6000_Raw.temperature = ((int16)(MPU6000_Raw.BUF[6] << 8 | MPU6000_Raw.BUF[7])) / 340.0 + 36.25;//+ 36.25;//MPU6500 21
   \   00000098   0x....             LDR.N    R0,??DataTable4_1
   \   0000009A   0x7981             LDRB     R1,[R0, #+6]
   \   0000009C   0x....             LDR.N    R0,??DataTable4_1
   \   0000009E   0x79C0             LDRB     R0,[R0, #+7]
   \   000000A0   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   000000A4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000A6   0x.... 0x....      BL       __aeabi_i2d
   \   000000AA   0x2200             MOVS     R2,#+0
   \   000000AC   0x....             LDR.N    R3,??DataTable4_5  ;; 0x40754000
   \   000000AE   0x.... 0x....      BL       __aeabi_ddiv
   \   000000B2   0x2200             MOVS     R2,#+0
   \   000000B4   0x....             LDR.N    R3,??DataTable4_6  ;; 0x40422000
   \   000000B6   0x.... 0x....      BL       __aeabi_dadd
   \   000000BA   0x.... 0x....      BL       __aeabi_d2f
   \   000000BE   0x....             LDR.N    R1,??DataTable4_1
   \   000000C0   0x6548             STR      R0,[R1, #+84]
    145            MPU6000_Raw.gyro_x =      ((int16)(MPU6000_Raw.BUF[8] << 8 | MPU6000_Raw.BUF[9])) / 32768.0 * 2000;
   \   000000C2   0x....             LDR.N    R0,??DataTable4_1
   \   000000C4   0x7A01             LDRB     R1,[R0, #+8]
   \   000000C6   0x....             LDR.N    R0,??DataTable4_1
   \   000000C8   0x7A40             LDRB     R0,[R0, #+9]
   \   000000CA   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   000000CE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000D0   0x.... 0x....      BL       __aeabi_i2d
   \   000000D4   0x2200             MOVS     R2,#+0
   \   000000D6   0x....             LDR.N    R3,??DataTable4_4  ;; 0x40e00000
   \   000000D8   0x.... 0x....      BL       __aeabi_ddiv
   \   000000DC   0x2200             MOVS     R2,#+0
   \   000000DE   0x....             LDR.N    R3,??DataTable4_7  ;; 0x409f4000
   \   000000E0   0x.... 0x....      BL       __aeabi_dmul
   \   000000E4   0x.... 0x....      BL       __aeabi_d2f
   \   000000E8   0x....             LDR.N    R1,??DataTable4_1
   \   000000EA   0x63C8             STR      R0,[R1, #+60]
    146            MPU6000_Raw.gyro_y =      ((int16)(MPU6000_Raw.BUF[10]<< 8 | MPU6000_Raw.BUF[11])) / 32768.0 * 2000;
   \   000000EC   0x....             LDR.N    R0,??DataTable4_1
   \   000000EE   0x7A81             LDRB     R1,[R0, #+10]
   \   000000F0   0x....             LDR.N    R0,??DataTable4_1
   \   000000F2   0x7AC0             LDRB     R0,[R0, #+11]
   \   000000F4   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   000000F8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000FA   0x.... 0x....      BL       __aeabi_i2d
   \   000000FE   0x2200             MOVS     R2,#+0
   \   00000100   0x....             LDR.N    R3,??DataTable4_4  ;; 0x40e00000
   \   00000102   0x.... 0x....      BL       __aeabi_ddiv
   \   00000106   0x2200             MOVS     R2,#+0
   \   00000108   0x....             LDR.N    R3,??DataTable4_7  ;; 0x409f4000
   \   0000010A   0x.... 0x....      BL       __aeabi_dmul
   \   0000010E   0x.... 0x....      BL       __aeabi_d2f
   \   00000112   0x....             LDR.N    R1,??DataTable4_1
   \   00000114   0x6408             STR      R0,[R1, #+64]
    147            MPU6000_Raw.gyro_z =      ((int16)(MPU6000_Raw.BUF[12]<< 8 | MPU6000_Raw.BUF[13])) / 32768.0 * 2000 ;
   \   00000116   0x....             LDR.N    R0,??DataTable4_1
   \   00000118   0x7B01             LDRB     R1,[R0, #+12]
   \   0000011A   0x....             LDR.N    R0,??DataTable4_1
   \   0000011C   0x7B40             LDRB     R0,[R0, #+13]
   \   0000011E   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   00000122   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000124   0x.... 0x....      BL       __aeabi_i2d
   \   00000128   0x2200             MOVS     R2,#+0
   \   0000012A   0x....             LDR.N    R3,??DataTable4_4  ;; 0x40e00000
   \   0000012C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000130   0x2200             MOVS     R2,#+0
   \   00000132   0x....             LDR.N    R3,??DataTable4_7  ;; 0x409f4000
   \   00000134   0x.... 0x....      BL       __aeabi_dmul
   \   00000138   0x.... 0x....      BL       __aeabi_d2f
   \   0000013C   0x....             LDR.N    R1,??DataTable4_1
   \   0000013E   0x6448             STR      R0,[R1, #+68]
    148            
    149            MPU6000_Raw.accel_x += -0.0315;
   \   00000140   0x....             LDR.N    R0,??DataTable4_1
   \   00000142   0x6B00             LDR      R0,[R0, #+48]
   \   00000144   0x.... 0x....      BL       __aeabi_f2d
   \   00000148   0x....             LDR.N    R2,??DataTable4_8  ;; 0x9ba5e354
   \   0000014A   0x....             LDR.N    R3,??DataTable4_9  ;; 0xbfa020c4
   \   0000014C   0x.... 0x....      BL       __aeabi_dadd
   \   00000150   0x.... 0x....      BL       __aeabi_d2f
   \   00000154   0x....             LDR.N    R1,??DataTable4_1
   \   00000156   0x6308             STR      R0,[R1, #+48]
    150            MPU6000_Raw.accel_y += 0.0053;
   \   00000158   0x....             LDR.N    R0,??DataTable4_1
   \   0000015A   0x6B40             LDR      R0,[R0, #+52]
   \   0000015C   0x.... 0x....      BL       __aeabi_f2d
   \   00000160   0x....             LDR.N    R2,??DataTable4_10  ;; 0xeab367a1
   \   00000162   0x....             LDR.N    R3,??DataTable4_11  ;; 0x3f75b573
   \   00000164   0x.... 0x....      BL       __aeabi_dadd
   \   00000168   0x.... 0x....      BL       __aeabi_d2f
   \   0000016C   0x....             LDR.N    R1,??DataTable4_1
   \   0000016E   0x6348             STR      R0,[R1, #+52]
    151            MPU6000_Raw.accel_z += 0.1164;
   \   00000170   0x....             LDR.N    R0,??DataTable4_1
   \   00000172   0x6B80             LDR      R0,[R0, #+56]
   \   00000174   0x.... 0x....      BL       __aeabi_f2d
   \   00000178   0x....             LDR.N    R2,??DataTable4_12  ;; 0xf141205c
   \   0000017A   0x....             LDR.N    R3,??DataTable4_13  ;; 0x3fbdcc63
   \   0000017C   0x.... 0x....      BL       __aeabi_dadd
   \   00000180   0x.... 0x....      BL       __aeabi_d2f
   \   00000184   0x....             LDR.N    R1,??DataTable4_1
   \   00000186   0x6388             STR      R0,[R1, #+56]
    152              
    153            MPU6000_Raw.accel_x *= 0.9910;
   \   00000188   0x....             LDR.N    R0,??DataTable4_1
   \   0000018A   0x6B00             LDR      R0,[R0, #+48]
   \   0000018C   0x.... 0x....      BL       __aeabi_f2d
   \   00000190   0x....             LDR.N    R2,??DataTable4_14  ;; 0xa1cac083
   \   00000192   0x....             LDR.N    R3,??DataTable4_15  ;; 0x3fefb645
   \   00000194   0x.... 0x....      BL       __aeabi_dmul
   \   00000198   0x.... 0x....      BL       __aeabi_d2f
   \   0000019C   0x....             LDR.N    R1,??DataTable4_1
   \   0000019E   0x6308             STR      R0,[R1, #+48]
    154            MPU6000_Raw.accel_y *= 1.0038;
   \   000001A0   0x....             LDR.N    R0,??DataTable4_1
   \   000001A2   0x6B40             LDR      R0,[R0, #+52]
   \   000001A4   0x.... 0x....      BL       __aeabi_f2d
   \   000001A8   0x....             LDR.N    R2,??DataTable4_16  ;; 0x96bb98c8
   \   000001AA   0x....             LDR.N    R3,??DataTable4_17  ;; 0x3ff00f90
   \   000001AC   0x.... 0x....      BL       __aeabi_dmul
   \   000001B0   0x.... 0x....      BL       __aeabi_d2f
   \   000001B4   0x....             LDR.N    R1,??DataTable4_1
   \   000001B6   0x6348             STR      R0,[R1, #+52]
    155            MPU6000_Raw.accel_z *= 0.9787;
   \   000001B8   0x....             LDR.N    R0,??DataTable4_1
   \   000001BA   0x6B80             LDR      R0,[R0, #+56]
   \   000001BC   0x.... 0x....      BL       __aeabi_f2d
   \   000001C0   0x....             LDR.N    R2,??DataTable4_18  ;; 0xa9930be1
   \   000001C2   0x....             LDR.N    R3,??DataTable4_19  ;; 0x3fef5182
   \   000001C4   0x.... 0x....      BL       __aeabi_dmul
   \   000001C8   0x.... 0x....      BL       __aeabi_d2f
   \   000001CC   0x....             LDR.N    R1,??DataTable4_1
   \   000001CE   0x6388             STR      R0,[R1, #+56]
    156            MPU6000_Raw.updateTime = t;
   \   000001D0   0x....             LDR.N    R0,??DataTable4_20
   \   000001D2   0x6800             LDR      R0,[R0, #+0]
   \   000001D4   0x....             LDR.N    R1,??DataTable4_1
   \   000001D6   0x6188             STR      R0,[R1, #+24]
    157            
    158          #if THIS_PLANE == QAV250
    159          #else
    160            MPU6000_Raw.gyro_x -= -2.1;
   \   000001D8   0x....             LDR.N    R0,??DataTable4_1
   \   000001DA   0x6BC0             LDR      R0,[R0, #+60]
   \   000001DC   0x.... 0x....      BL       __aeabi_f2d
   \   000001E0   0x....             LDR.N    R2,??DataTable4_21  ;; 0xcccccccd
   \   000001E2   0x....             LDR.N    R3,??DataTable4_22  ;; 0x4000cccc
   \   000001E4   0x.... 0x....      BL       __aeabi_dadd
   \   000001E8   0x.... 0x....      BL       __aeabi_d2f
   \   000001EC   0x....             LDR.N    R1,??DataTable4_1
   \   000001EE   0x63C8             STR      R0,[R1, #+60]
    161            MPU6000_Raw.gyro_y -= 0.95;
   \   000001F0   0x....             LDR.N    R0,??DataTable4_1
   \   000001F2   0x6C00             LDR      R0,[R0, #+64]
   \   000001F4   0x.... 0x....      BL       __aeabi_f2d
   \   000001F8   0xF05F 0x3266      MOVS     R2,#+1717986918
   \   000001FC   0x....             LDR.N    R3,??DataTable4_23  ;; 0xbfee6666
   \   000001FE   0x.... 0x....      BL       __aeabi_dadd
   \   00000202   0x.... 0x....      BL       __aeabi_d2f
   \   00000206   0x....             LDR.N    R1,??DataTable4_1
   \   00000208   0x6408             STR      R0,[R1, #+64]
    162            MPU6000_Raw.gyro_z -= 1.2;
   \   0000020A   0x....             LDR.N    R0,??DataTable4_1
   \   0000020C   0x6C40             LDR      R0,[R0, #+68]
   \   0000020E   0x.... 0x....      BL       __aeabi_f2d
   \   00000212   0xF05F 0x3233      MOVS     R2,#+858993459
   \   00000216   0x....             LDR.N    R3,??DataTable4_24  ;; 0xbff33333
   \   00000218   0x.... 0x....      BL       __aeabi_dadd
   \   0000021C   0x.... 0x....      BL       __aeabi_d2f
   \   00000220   0x....             LDR.N    R1,??DataTable4_1
   \   00000222   0x6448             STR      R0,[R1, #+68]
    163          #endif
    164            
    165          #if defined USE_OLD_DATA
    166          #else
    167              if(t > 3000 && t < 3000 + H_NUM * 2)
   \   00000224   0x....             LDR.N    R0,??DataTable4_20
   \   00000226   0x6800             LDR      R0,[R0, #+0]
   \   00000228   0xF640 0x31B9      MOVW     R1,#+3001
   \   0000022C   0x4288             CMP      R0,R1
   \   0000022E   0xF2C0 0x808B      BLT.W    ??MPU6000_DAQ_0
   \   00000232   0x....             LDR.N    R0,??DataTable4_20
   \   00000234   0x6800             LDR      R0,[R0, #+0]
   \   00000236   0xF640 0x31BA      MOVW     R1,#+3002
   \   0000023A   0x4288             CMP      R0,R1
   \   0000023C   0xF280 0x8084      BGE.W    ??MPU6000_DAQ_0
    168              {
    169                H_hmc_x[(t-3000)/2] = Compass.X;
   \   00000240   0x....             LDR.N    R0,??DataTable4_20
   \   00000242   0x6800             LDR      R0,[R0, #+0]
   \   00000244   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   00000248   0x2102             MOVS     R1,#+2
   \   0000024A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000024E   0x....             LDR.N    R1,??DataTable4_25
   \   00000250   0x....             LDR.N    R2,??DataTable4_26
   \   00000252   0x6812             LDR      R2,[R2, #+0]
   \   00000254   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
    170                H_hmc_y[(t-3000)/2] = Compass.Y;
   \   00000258   0x....             LDR.N    R0,??DataTable4_20
   \   0000025A   0x6800             LDR      R0,[R0, #+0]
   \   0000025C   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   00000260   0x2102             MOVS     R1,#+2
   \   00000262   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000266   0x....             LDR.N    R1,??DataTable4_27
   \   00000268   0x....             LDR.N    R2,??DataTable4_26
   \   0000026A   0x6852             LDR      R2,[R2, #+4]
   \   0000026C   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
    171                H_hmc_z[(t-3000)/2] = Compass.Z;
   \   00000270   0x....             LDR.N    R0,??DataTable4_20
   \   00000272   0x6800             LDR      R0,[R0, #+0]
   \   00000274   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   00000278   0x2102             MOVS     R1,#+2
   \   0000027A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000027E   0x....             LDR.N    R1,??DataTable4_28
   \   00000280   0x....             LDR.N    R2,??DataTable4_26
   \   00000282   0x6892             LDR      R2,[R2, #+8]
   \   00000284   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
    172                H_accel_x[(t-3000)/2] = (int16)(MPU6000_Raw.BUF[0] << 8 | MPU6000_Raw.BUF[1]);
   \   00000288   0x....             LDR.N    R0,??DataTable4_20
   \   0000028A   0x6800             LDR      R0,[R0, #+0]
   \   0000028C   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   00000290   0x2102             MOVS     R1,#+2
   \   00000292   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000296   0x....             LDR.N    R1,??DataTable4_29
   \   00000298   0x....             LDR.N    R2,??DataTable4_1
   \   0000029A   0x7812             LDRB     R2,[R2, #+0]
   \   0000029C   0x....             LDR.N    R3,??DataTable4_1
   \   0000029E   0x785B             LDRB     R3,[R3, #+1]
   \   000002A0   0xEA53 0x2302      ORRS     R3,R3,R2, LSL #+8
   \   000002A4   0xF821 0x3010      STRH     R3,[R1, R0, LSL #+1]
    173                H_accel_y[(t-3000)/2] = (int16)(MPU6000_Raw.BUF[2] << 8 | MPU6000_Raw.BUF[3]);
   \   000002A8   0x....             LDR.N    R0,??DataTable4_20
   \   000002AA   0x6800             LDR      R0,[R0, #+0]
   \   000002AC   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   000002B0   0x2102             MOVS     R1,#+2
   \   000002B2   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000002B6   0x....             LDR.N    R1,??DataTable4_30
   \   000002B8   0x....             LDR.N    R2,??DataTable4_1
   \   000002BA   0x7892             LDRB     R2,[R2, #+2]
   \   000002BC   0x....             LDR.N    R3,??DataTable4_1
   \   000002BE   0x78DB             LDRB     R3,[R3, #+3]
   \   000002C0   0xEA53 0x2302      ORRS     R3,R3,R2, LSL #+8
   \   000002C4   0xF821 0x3010      STRH     R3,[R1, R0, LSL #+1]
    174                H_accel_z[(t-3000)/2] = (int16)(MPU6000_Raw.BUF[4] << 8 | MPU6000_Raw.BUF[5]);
   \   000002C8   0x....             LDR.N    R0,??DataTable4_20
   \   000002CA   0x6800             LDR      R0,[R0, #+0]
   \   000002CC   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   000002D0   0x2102             MOVS     R1,#+2
   \   000002D2   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000002D6   0x....             LDR.N    R1,??DataTable4_31
   \   000002D8   0x....             LDR.N    R2,??DataTable4_1
   \   000002DA   0x7912             LDRB     R2,[R2, #+4]
   \   000002DC   0x....             LDR.N    R3,??DataTable4_1
   \   000002DE   0x795B             LDRB     R3,[R3, #+5]
   \   000002E0   0xEA53 0x2302      ORRS     R3,R3,R2, LSL #+8
   \   000002E4   0xF821 0x3010      STRH     R3,[R1, R0, LSL #+1]
    175                H_gyro_x[(t-3000)/2] =  (int16)(MPU6000_Raw.BUF[8] << 8 | MPU6000_Raw.BUF[9]);
   \   000002E8   0x....             LDR.N    R0,??DataTable4_20
   \   000002EA   0x6800             LDR      R0,[R0, #+0]
   \   000002EC   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   000002F0   0x2102             MOVS     R1,#+2
   \   000002F2   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000002F6   0x....             LDR.N    R1,??DataTable4_32
   \   000002F8   0x....             LDR.N    R2,??DataTable4_1
   \   000002FA   0x7A12             LDRB     R2,[R2, #+8]
   \   000002FC   0x....             LDR.N    R3,??DataTable4_1
   \   000002FE   0x7A5B             LDRB     R3,[R3, #+9]
   \   00000300   0xEA53 0x2302      ORRS     R3,R3,R2, LSL #+8
   \   00000304   0xF821 0x3010      STRH     R3,[R1, R0, LSL #+1]
    176                H_gyro_y[(t-3000)/2] =  (int16)(MPU6000_Raw.BUF[10] << 8 | MPU6000_Raw.BUF[11]);
   \   00000308   0x....             LDR.N    R0,??DataTable4_20
   \   0000030A   0x6800             LDR      R0,[R0, #+0]
   \   0000030C   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   00000310   0x2102             MOVS     R1,#+2
   \   00000312   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000316   0x....             LDR.N    R1,??DataTable4_33
   \   00000318   0x....             LDR.N    R2,??DataTable4_1
   \   0000031A   0x7A92             LDRB     R2,[R2, #+10]
   \   0000031C   0x....             LDR.N    R3,??DataTable4_1
   \   0000031E   0x7ADB             LDRB     R3,[R3, #+11]
   \   00000320   0xEA53 0x2302      ORRS     R3,R3,R2, LSL #+8
   \   00000324   0xF821 0x3010      STRH     R3,[R1, R0, LSL #+1]
    177                H_gyro_z[(t-3000)/2] =  (int16)(MPU6000_Raw.BUF[12] << 8 | MPU6000_Raw.BUF[13]);
   \   00000328   0x....             LDR.N    R0,??DataTable4_20
   \   0000032A   0x6800             LDR      R0,[R0, #+0]
   \   0000032C   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   00000330   0x2102             MOVS     R1,#+2
   \   00000332   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000336   0x....             LDR.N    R1,??DataTable4_34
   \   00000338   0x....             LDR.N    R2,??DataTable4_1
   \   0000033A   0x7B12             LDRB     R2,[R2, #+12]
   \   0000033C   0x....             LDR.N    R3,??DataTable4_1
   \   0000033E   0x7B5B             LDRB     R3,[R3, #+13]
   \   00000340   0xEA53 0x2302      ORRS     R3,R3,R2, LSL #+8
   \   00000344   0xF821 0x3010      STRH     R3,[R1, R0, LSL #+1]
    178              //  H_roll[(t-3000)/2]   = (int16)(roll*10);
    179              //  H_pitch[(t-3000)/2]  = (int16)(pitch*10);
    180              //  H_yaw[(t-3000)/2]    = (int16)(yaw*10);
    181              }
    182          #endif
    183              
    184          }
   \                     ??MPU6000_DAQ_0: (+1)
   \                     ??MPU6000_DAQ_1: (+1)
   \   00000348   0xBD01             POP      {R0,PC}          ;; return
    185          

   \                                 In section .text, align 2, keep-with-next
    186          void InitMPU6000(void)
    187          {     
   \                     _Z11InitMPU6000v: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    188            MPU6000_WriteByte(MPUREG_USER_CTRL,   0x10);
   \   00000002   0x2110             MOVS     R1,#+16
   \   00000004   0x206A             MOVS     R0,#+106
   \   00000006   0x.... 0x....      BL       _Z17MPU6000_WriteBytehh
    189            LPTMR_DelayMs(20);
   \   0000000A   0x2014             MOVS     R0,#+20
   \   0000000C   0x.... 0x....      BL       LPTMR_DelayMs
    190            MPU6000_WriteByte(MPUREG_PWR_MGMT_1,  0x80);//解除休眠状态0x00
   \   00000010   0x2180             MOVS     R1,#+128
   \   00000012   0x206B             MOVS     R0,#+107
   \   00000014   0x.... 0x....      BL       _Z17MPU6000_WriteBytehh
    191            LPTMR_DelayMs(150);
   \   00000018   0x2096             MOVS     R0,#+150
   \   0000001A   0x.... 0x....      BL       LPTMR_DelayMs
    192            MPU6000_WriteByte(MPUREG_USER_CTRL,   0x10);//0x30
   \   0000001E   0x2110             MOVS     R1,#+16
   \   00000020   0x206A             MOVS     R0,#+106
   \   00000022   0x.... 0x....      BL       _Z17MPU6000_WriteBytehh
    193            LPTMR_DelayMs(20);
   \   00000026   0x2014             MOVS     R0,#+20
   \   00000028   0x.... 0x....      BL       LPTMR_DelayMs
    194            MPU6000_WriteByte(MPUREG_PWR_MGMT_1,  0x00);//解除休眠状态0x00
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x206B             MOVS     R0,#+107
   \   00000030   0x.... 0x....      BL       _Z17MPU6000_WriteBytehh
    195            LPTMR_DelayMs(20);
   \   00000034   0x2014             MOVS     R0,#+20
   \   00000036   0x.... 0x....      BL       LPTMR_DelayMs
    196            
    197            
    198            MPU6000_WriteByte(MPUREG_SMPLRT_DIV,  0x01); //原来 0x07 对应125Hz 0x01对应500Hz
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2019             MOVS     R0,#+25
   \   0000003E   0x.... 0x....      BL       _Z17MPU6000_WriteBytehh
    199            LPTMR_DelayMs(20);
   \   00000042   0x2014             MOVS     R0,#+20
   \   00000044   0x.... 0x....      BL       LPTMR_DelayMs
    200            MPU6000_WriteByte(MPUREG_CONFIG,      0x05); //0x06陀螺滤波5Hz  0x04=20Hz
   \   00000048   0x2105             MOVS     R1,#+5
   \   0000004A   0x201A             MOVS     R0,#+26
   \   0000004C   0x.... 0x....      BL       _Z17MPU6000_WriteBytehh
    201            LPTMR_DelayMs(20);
   \   00000050   0x2014             MOVS     R0,#+20
   \   00000052   0x.... 0x....      BL       LPTMR_DelayMs
    202            MPU6000_WriteByte(MPUREG_GYRO_CONFIG, 0x18);
   \   00000056   0x2118             MOVS     R1,#+24
   \   00000058   0x201B             MOVS     R0,#+27
   \   0000005A   0x.... 0x....      BL       _Z17MPU6000_WriteBytehh
    203            LPTMR_DelayMs(20);
   \   0000005E   0x2014             MOVS     R0,#+20
   \   00000060   0x.... 0x....      BL       LPTMR_DelayMs
    204            MPU6000_WriteByte(MPUREG_ACCEL_CONFIG,0x00);
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x201C             MOVS     R0,#+28
   \   00000068   0x.... 0x....      BL       _Z17MPU6000_WriteBytehh
    205            LPTMR_DelayMs(20);
   \   0000006C   0x2014             MOVS     R0,#+20
   \   0000006E   0x.... 0x....      BL       LPTMR_DelayMs
    206                  
    207                  
    208          //  LPTMR_DelayMs(20);
    209          //  SPI_MPU_WriteReg(MPUREG_SMPLRT_DIV,0x07);
    210          //  LPTMR_DelayMs(20);
    211          //  //低通滤波频率，典型值0x06(5Hz)
    212          //  SPI_MPU_WriteReg(MPUREG_CONFIG,0x06);
    213          //  LPTMR_DelayMs(20);
    214          //  //陀螺仪量程+/-500 
    215          //  SPI_MPU_WriteReg(MPUREG_GYRO_CONFIG,0x08);
    216          //  LPTMR_DelayMs(20);
    217          //  //加速度量程+/-4g
    218          //  SPI_MPU_WriteReg(MPUREG_ACCEL_CONFIG,0x08);
    219          //  LPTMR_DelayMs(20);
    220            
    221          //配置中断模式，高电平有效。
    222          //  SPI_MPU_WriteReg(MPUREG_INT_PIN_CFG,0x30);
    223          //  LPTMR_DelayMs(20);
    224          //  //允许中断
    225          //  SPI_MPU_WriteReg(MPUREG_INT_ENABLE,0x01);
    226          //  LPTMR_DelayMs(20);
    227          }
   \                     ??InitMPU6000_0: (+1)
   \   00000072   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     MPU6000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     MPU6000_Raw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     MPU6000_CS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4002D000         DC32     0x4002d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40E00000         DC32     0x40e00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40754000         DC32     0x40754000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x40422000         DC32     0x40422000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x409F4000         DC32     0x409f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x9BA5E354         DC32     0x9ba5e354

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0xBFA020C4         DC32     0xbfa020c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0xEAB367A1         DC32     0xeab367a1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x3F75B573         DC32     0x3f75b573

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0xF141205C         DC32     0xf141205c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x3FBDCC63         DC32     0x3fbdcc63

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0xA1CAC083         DC32     0xa1cac083

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x3FEFB645         DC32     0x3fefb645

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x96BB98C8         DC32     0x96bb98c8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x3FF00F90         DC32     0x3ff00f90

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0xA9930BE1         DC32     0xa9930be1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x3FEF5182         DC32     0x3fef5182

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0xCCCCCCCD         DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x4000CCCC         DC32     0x4000cccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0xBFEE6666         DC32     0xbfee6666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0xBFF33333         DC32     0xbff33333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     H_hmc_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     Compass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     H_hmc_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   0x........         DC32     H_hmc_z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   0x........         DC32     H_accel_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   0x........         DC32     H_accel_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   0x........         DC32     H_accel_z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   0x........         DC32     H_gyro_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   0x........         DC32     H_gyro_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   0x........         DC32     H_gyro_z
    228          
    229          
    230          
    231          
    232          
    233          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   InitMPU6000()
         8   -> LPTMR_DelayMs
         8   -> MPU6000_WriteByte(u8, u8)
       8   MPU6000_DAQ()
         8   -> MPU6000_ReadBuf(u8, u8 *, u8)
         8   -> __aeabi_d2f
         8   -> __aeabi_dadd
         8   -> __aeabi_ddiv
         8   -> __aeabi_dmul
         8   -> __aeabi_f2d
         8   -> __aeabi_i2d
      24   MPU6000_ReadBuf(u8, u8 *, u8)
        24   -> SPI_Master_WriteRead
      16   MPU6000_ReadByte(u8)
        16   -> SPI_Master_WriteRead
       0   MPU6000_Type::MPU6000_Type()
       0   MPU6000_Type::error()
       0   MPU6000_Type::isInRange(float, float, float)
       8   MPU6000_Type::isNormal()
         8   -> MPU6000_Type::isInRange(float, float, float)
     112   MPU6000_Type::operator-(MPU6000_Type &)
       112   -> MPU6000_Type::MPU6000_Type()
       112   -> __aeabi_memcpy4
       0   MPU6000_Type::operator=(MPU6000_Type &)
       0   MPU6000_Type::operator==(MPU6000_Type &)
      16   MPU6000_WriteByte(u8, u8)
        16   -> SPI_Master_WriteRead
       8   __sti__routine()
         8   -> MPU6000_Type::MPU6000_Type()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_28
       4  ??DataTable4_29
       4  ??DataTable4_3
       4  ??DataTable4_30
       4  ??DataTable4_31
       4  ??DataTable4_32
       4  ??DataTable4_33
       4  ??DataTable4_34
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
     116  InitMPU6000()
      96  MPU6000
       1  MPU6000_CS
     842  MPU6000_DAQ()
      96  MPU6000_Raw
     106  MPU6000_ReadBuf(u8, u8 *, u8)
      50  MPU6000_ReadByte(u8)
      40  MPU6000_Type::MPU6000_Type()
      14  MPU6000_Type::error()
     136  MPU6000_Type::isInRange(float, float, float)
      46  MPU6000_Type::isNormal()
     142  MPU6000_Type::operator-(MPU6000_Type &)
      44  MPU6000_Type::operator=(MPU6000_Type &)
     136  MPU6000_Type::operator==(MPU6000_Type &)
      48  MPU6000_WriteByte(u8, u8)
      20  __sti__routine()
      44  -- Other

 
    40 bytes in section .ARM.exidx
   192 bytes in section .bss
     1 byte  in section .data
     4 bytes in section .init_array
 1 880 bytes in section .text
 
 1 844 bytes of CODE  memory (+ 40 bytes shared)
    40 bytes of CONST memory
   193 bytes of DATA  memory

Errors: none
Warnings: none
