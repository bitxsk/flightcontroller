###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       18/Jun/2018  19:47:57
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\GPS.cpp
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW197A.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\GPS.cpp
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\GPS.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\GPS.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\GPS.cpp
      1          #include "GPS.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp CJumpFilter::CJumpFilter()
   \                     _ZN11CJumpFilterC1Ev: (+1)
   \   00000000   0x4904             LDR.N    R1,??CJumpFilter_0  ;; 0x42c80000
   \   00000002   0x6081             STR      R1,[R0, #+8]
   \   00000004   0xF44F 0x7196      MOV      R1,#+300
   \   00000008   0x6281             STR      R1,[R0, #+40]
   \   0000000A   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   0000000E   0x62C1             STR      R1,[R0, #+44]
   \   00000010   0x4770             BX       LR               ;; return
   \   00000012   0xBF00             Nop      
   \                     ??CJumpFilter_0:
   \   00000014   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4
   \   __code __interwork __softfp CoordinateElement::CoordinateElement()
   \                     _ZN17CoordinateElementC1Ev: (+1)
   \   00000000   0x4903             LDR.N    R1,??CoordinateElement_0  ;; 0x3f4ccccd
   \   00000002   0x6101             STR      R1,[R0, #+16]
   \   00000004   0x4903             LDR.N    R1,??CoordinateElement_0+0x4  ;; 0x461c4000
   \   00000006   0x6141             STR      R1,[R0, #+20]
   \   00000008   0x4903             LDR.N    R1,??CoordinateElement_0+0x8  ;; 0xc61c4000
   \   0000000A   0x6181             STR      R1,[R0, #+24]
   \   0000000C   0x4770             BX       LR               ;; return
   \   0000000E   0xBF00             Nop      
   \                     ??CoordinateElement_0:
   \   00000010   0x3F4CCCCD         DC32     0x3f4ccccd
   \   00000014   0x461C4000         DC32     0x461c4000
   \   00000018   0xC61C4000         DC32     0xc61c4000

   \                                 In section .text, align 2
   \   __code __interwork __softfp Coordinate::Coordinate()
   \                     _ZN10CoordinateC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \   0000000A   0xF114 0x001C      ADDS     R0,R4,#+28
   \   0000000E   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \   00000012   0xF114 0x0038      ADDS     R0,R4,#+56
   \   00000016   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4
   \   __code __interwork __softfp CGPS::CGPS()
   \                     _ZN4CGPSC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xF204 0x407C      ADDW     R0,R4,#+1148
   \   00000008   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \   0000000C   0xF204 0x40B4      ADDW     R0,R4,#+1204
   \   00000010   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \   00000014   0xF204 0x40EC      ADDW     R0,R4,#+1260
   \   00000018   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \   0000001C   0xF204 0x5024      ADDW     R0,R4,#+1316
   \   00000020   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \   00000024   0xF204 0x505C      ADDW     R0,R4,#+1372
   \   00000028   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \   0000002C   0xF514 0x60B6      ADDS     R0,R4,#+1456
   \   00000030   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \   00000034   0xEEF3 0x0A04      VMOV.F32 S1,#20.0
   \   00000038   0x2164             MOVS     R1,#+100
   \   0000003A   0xED9F 0x0A08      VLDR.W   S0,??CGPS_0      ;; 0x3e19999a
   \   0000003E   0xF204 0x40EC      ADDW     R0,R4,#+1260
   \   00000042   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfif
   \   00000046   0xEEF3 0x0A04      VMOV.F32 S1,#20.0
   \   0000004A   0x2164             MOVS     R1,#+100
   \   0000004C   0xED9F 0x0A03      VLDR.W   S0,??CGPS_0      ;; 0x3e19999a
   \   00000050   0xF204 0x5024      ADDW     R0,R4,#+1316
   \   00000054   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfif
   \   00000058   0x0020             MOVS     R0,R4
   \                     ??CGPS_1: (+1)
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
   \                     ??CGPS_0:
   \   0000005C   0x3E19999A         DC32     0x3e19999a
      2          #include "string.h"
      3          

   \                                 In section .bss, align 4
      4          CGPS *GPS;
   \                     GPS:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
      5          void GPS_Init()
      6          {
   \                     _Z8GPS_Initv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable4
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD107             BNE.N    ??GPS_Init_0
      7            static CGPS GPS_0;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   00000010   0x.... 0x....      BL       _ZN4CGPSC1Ev
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable4
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
      8            GPS = &GPS_0;
   \                     ??GPS_Init_0: (+1)
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00000024   0x6008             STR      R0,[R1, #+0]
      9            GPS->DMA_CHn_Rx = DMA_CH4;
   \   00000026   0x2004             MOVS     R0,#+4
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0xF881 0x0020      STRB     R0,[R1, #+32]
     10            
     11          //  GPS->latitude_reference  = 3.0849812550000002E+1; //赛场屏幕 单点精度
     12          //  GPS->longitude_reference = 1.1961452616666665E+2;
     13          //  GPS->altitude0           = 2.3269999999999999E+1;
     14          
     15            GPS->latitude_reference  = 3.084906361666666544E+1;
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF510 0x6088      ADDS     R0,R0,#+1088
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable4_3  ;; 0x3bb1ce8b
   \   00000040   0x.... 0x....      LDR.W    R3,??DataTable4_4  ;; 0x403ed95c
   \   00000044   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
     16            GPS->longitude_reference = 1.1961322839999999E+2;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xF510 0x6089      ADDS     R0,R0,#+1096
   \   00000052   0x.... 0x....      LDR.W    R2,??DataTable4_5  ;; 0x2254be9e
   \   00000056   0x.... 0x....      LDR.W    R3,??DataTable4_6  ;; 0x405de73f
   \   0000005A   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
     17            GPS->altitude0           = 3.2796999999999997E+1;
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF510 0x6087      ADDS     R0,R0,#+1080
   \   00000068   0x.... 0x....      LDR.W    R2,??DataTable4_7  ;; 0x189374bc
   \   0000006C   0x.... 0x....      LDR.W    R3,??DataTable4_8  ;; 0x40406604
   \   00000070   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
     18            GPS->positionFilterX.setParameter(10, 100);
   \   00000074   0x2164             MOVS     R1,#+100
   \   00000076   0xEEB2 0x0A04      VMOV.F32 S0,#10.0
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF200 0x407C      ADDW     R0,R0,#+1148
   \   00000084   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     19            GPS->positionFilterY.setParameter(10, 100);
   \   00000088   0x2164             MOVS     R1,#+100
   \   0000008A   0xEEB2 0x0A04      VMOV.F32 S0,#10.0
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0xF200 0x40B4      ADDW     R0,R0,#+1204
   \   00000098   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     20            
     21            GPS->positionFilterX.maxValue = 20;
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable4_9  ;; 0x41a00000
   \   000000A6   0xF8C0 0x1488      STR      R1,[R0, #+1160]
     22            GPS->positionFilterX.minValue = -20;
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable4_10  ;; 0xc1a00000
   \   000000B4   0xF8C0 0x148C      STR      R1,[R0, #+1164]
     23            
     24            GPS->positionFilterY.maxValue = 20;
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable4_9  ;; 0x41a00000
   \   000000C2   0xF8C0 0x14C0      STR      R1,[R0, #+1216]
     25            GPS->positionFilterY.minValue = -20;
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable4_10  ;; 0xc1a00000
   \   000000D0   0xF8C0 0x14C4      STR      R1,[R0, #+1220]
     26          }
   \                     ??GPS_Init_1: (+1)
   \   000000D4   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 8
   \                     `GPS_Init()::GPS_0`:
   \   00000000                      DS8 1848
     27          
     28          /*************获得对应序号逗号后的数据位置*****************/

   \                                 In section .text, align 2, keep-with-next
     29          int CGPS::GetComma(int num,char *str)
     30          {
   \                     _ZN4CGPS8GetCommaEiPc: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     31            int i,j = 0;
   \   00000008   0x2700             MOVS     R7,#+0
     32            int len = strlen(str);
   \   0000000A   0x0030             MOVS     R0,R6
   \   0000000C   0x.... 0x....      BL       strlen
   \   00000010   0x0002             MOVS     R2,R0
     33            for(i=0;i<len;i++)
   \   00000012   0x2100             MOVS     R1,#+0
   \                     ??GetComma_0: (+1)
   \   00000014   0x4291             CMP      R1,R2
   \   00000016   0xDA0A             BGE.N    ??GetComma_1
     34            {
     35              //for(;str[i]!='$';i++)
     36              //{}
     37              if(str[i]==',')
   \   00000018   0x5C70             LDRB     R0,[R6, R1]
   \   0000001A   0x282C             CMP      R0,#+44
   \   0000001C   0xD100             BNE.N    ??GetComma_2
     38              {
     39                j++;
   \   0000001E   0x1C7F             ADDS     R7,R7,#+1
     40              }
     41              
     42              if(j==num)
   \                     ??GetComma_2: (+1)
   \   00000020   0x42AF             CMP      R7,R5
   \   00000022   0xD102             BNE.N    ??GetComma_3
     43                return i+1;
   \   00000024   0x1C49             ADDS     R1,R1,#+1
   \   00000026   0x0008             MOVS     R0,R1
   \   00000028   0xE002             B.N      ??GetComma_4
     44            }
   \                     ??GetComma_3: (+1)
   \   0000002A   0x1C49             ADDS     R1,R1,#+1
   \   0000002C   0xE7F2             B.N      ??GetComma_0
     45            return 0;
   \                     ??GetComma_1: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \                     ??GetComma_4: (+1)
   \   00000030   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     46          }
     47          
     48          
     49          /******************解析数据***************/

   \                                 In section .text, align 2, keep-with-next
     50          void CGPS::updateUart()
     51          {
   \                     _ZN4CGPS10updateUartEv: (+1)
   \   00000000   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \   00000004   0x0005             MOVS     R5,R0
     52            velFilter_x1.checkIsNewData(t);
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable4_11
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0xF205 0x40EC      ADDW     R0,R5,#+1260
   \   00000010   0x.... 0x....      BL       _ZN11CJumpFilter14checkIsNewDataEi
     53            velFilter_y1.checkIsNewData(t);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable4_11
   \   00000018   0x6801             LDR      R1,[R0, #+0]
   \   0000001A   0xF205 0x5024      ADDW     R0,R5,#+1316
   \   0000001E   0x.... 0x....      BL       _ZN11CJumpFilter14checkIsNewDataEi
     54            
     55            
     56            bool newPackage = false;
   \   00000022   0x2600             MOVS     R6,#+0
     57            
     58            int i = 0, i0 = 0;
   \   00000024   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000028   0x2700             MOVS     R7,#+0
     59            int address0 = (DMA0->TCD[DMA_CHn_Rx].DADDR) - (uint32)(&GPS_BUF[0]);
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable4_12  ;; 0x40009000
   \   0000002E   0xF895 0x1020      LDRB     R1,[R5, #+32]
   \   00000032   0x0149             LSLS     R1,R1,#+5
   \   00000034   0x4408             ADD      R0,R0,R1
   \   00000036   0x6900             LDR      R0,[R0, #+16]
   \   00000038   0xF115 0x0821      ADDS     R8,R5,#+33
   \   0000003C   0xEBB0 0x0808      SUBS     R8,R0,R8
     60            
     61            int moveLength = 0;
   \   00000040   0xF05F 0x0900      MOVS     R9,#+0
     62            
     63            bool loopFlag = false;
   \   00000044   0x2400             MOVS     R4,#+0
     64            //byteInterval = t - byte_lastTime;
     65            if(byte_lastAddress != address0)
   \   00000046   0x68A8             LDR      R0,[R5, #+8]
   \   00000048   0x4540             CMP      R0,R8
   \   0000004A   0xD005             BEQ.N    ??updateUart_0
     66            {
     67              byte_lastTime = t;
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable4_11
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x6068             STR      R0,[R5, #+4]
     68              byte_lastAddress = address0;
   \   00000054   0xF8C5 0x8008      STR      R8,[R5, #+8]
     69            }
     70            for(; i < address0; i++)
   \                     ??updateUart_0: (+1)
   \   00000058   0x45C2             CMP      R10,R8
   \   0000005A   0xDA3E             BGE.N    ??updateUart_1
     71            {
     72              for(; GPS_BUF[i] != '\n'; i++)
   \                     ??updateUart_2: (+1)
   \   0000005C   0xEB05 0x000A      ADD      R0,R5,R10
   \   00000060   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \   00000064   0x280A             CMP      R0,#+10
   \   00000066   0xD021             BEQ.N    ??updateUart_3
     73              {
     74                if((GPS_BUF[i] == '$')&&(GPS_BUF[i+1] == 'G')&&(GPS_BUF[i+2] == 'N')&&(GPS_BUF[i+3] == 'G'))
   \   00000068   0xEB05 0x000A      ADD      R0,R5,R10
   \   0000006C   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \   00000070   0x2824             CMP      R0,#+36
   \   00000072   0xD113             BNE.N    ??updateUart_4
   \   00000074   0xEB05 0x000A      ADD      R0,R5,R10
   \   00000078   0xF890 0x0022      LDRB     R0,[R0, #+34]
   \   0000007C   0x2847             CMP      R0,#+71
   \   0000007E   0xD10D             BNE.N    ??updateUart_4
   \   00000080   0xEB05 0x000A      ADD      R0,R5,R10
   \   00000084   0xF890 0x0023      LDRB     R0,[R0, #+35]
   \   00000088   0x284E             CMP      R0,#+78
   \   0000008A   0xD107             BNE.N    ??updateUart_4
   \   0000008C   0xEB05 0x000A      ADD      R0,R5,R10
   \   00000090   0xF890 0x0024      LDRB     R0,[R0, #+36]
   \   00000094   0x2847             CMP      R0,#+71
   \   00000096   0xD101             BNE.N    ??updateUart_4
     75                {
     76                  start = i;
   \   00000098   0xF8C5 0xA00C      STR      R10,[R5, #+12]
     77                }
     78                
     79                
     80                if(i >= address0)
   \                     ??updateUart_4: (+1)
   \   0000009C   0x45C2             CMP      R10,R8
   \   0000009E   0xDB02             BLT.N    ??updateUart_5
     81                {
     82                  
     83                  loopFlag = true;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0x0004             MOVS     R4,R0
     84                  break;
   \   000000A4   0xE002             B.N      ??updateUart_3
     85                }
     86              }
   \                     ??updateUart_5: (+1)
   \   000000A6   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000000AA   0xE7D7             B.N      ??updateUart_2
     87              
     88              if(loopFlag)
   \                     ??updateUart_3: (+1)
   \   000000AC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AE   0x2C00             CMP      R4,#+0
   \   000000B0   0xD113             BNE.N    ??updateUart_1
     89              {
     90                break;
     91              }
     92              
     93              //    char checkSum = 0; //注意每个包的checkSum都要清零
     94              //    for(int k = i - (packageLength - 1); k < i - 1; k++)
     95              //    {
     96              //      checkSum += uartData[k];
     97              //    }
     98              //    if(checkSum != uartData[i-1])
     99              //    {
    100              //      continue;
    101              //    }
    102              //byte_lastTime = t;
    103              i0 = i + 1; 
   \                     ??updateUart_6: (+1)
   \   000000B2   0xF11A 0x0001      ADDS     R0,R10,#+1
   \   000000B6   0x0007             MOVS     R7,R0
    104              end = i;
   \   000000B8   0xF8C5 0xA010      STR      R10,[R5, #+16]
    105              
    106              // unpack(start, i);
    107              if(end-start > 1)unpack(start, i);
   \   000000BC   0x6929             LDR      R1,[R5, #+16]
   \   000000BE   0x68E8             LDR      R0,[R5, #+12]
   \   000000C0   0x1A09             SUBS     R1,R1,R0
   \   000000C2   0x2902             CMP      R1,#+2
   \   000000C4   0xDB04             BLT.N    ??updateUart_7
   \   000000C6   0x4652             MOV      R2,R10
   \   000000C8   0x68E9             LDR      R1,[R5, #+12]
   \   000000CA   0x0028             MOVS     R0,R5
   \   000000CC   0x.... 0x....      BL       _ZN4CGPS6unpackEii
    108              
    109              byte_lastAddress = address0;
   \                     ??updateUart_7: (+1)
   \   000000D0   0xF8C5 0x8008      STR      R8,[R5, #+8]
    110            }
   \   000000D4   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000000D8   0xE7BE             B.N      ??updateUart_0
    111            moveLength = (DMA0->TCD[DMA_CHn_Rx].DADDR - (uint32)&GPS_BUF[0]) - i0;
   \                     ??updateUart_1: (+1)
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable4_12  ;; 0x40009000
   \   000000DE   0xF895 0x1020      LDRB     R1,[R5, #+32]
   \   000000E2   0x0149             LSLS     R1,R1,#+5
   \   000000E4   0x4408             ADD      R0,R0,R1
   \   000000E6   0x6901             LDR      R1,[R0, #+16]
   \   000000E8   0xF115 0x0021      ADDS     R0,R5,#+33
   \   000000EC   0x1A08             SUBS     R0,R1,R0
   \   000000EE   0x1BC0             SUBS     R0,R0,R7
    112            if(moveLength < 0) moveLength = 0;
   \   000000F0   0x2800             CMP      R0,#+0
   \   000000F2   0xD501             BPL.N    ??updateUart_8
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x0008             MOVS     R0,R1
    113            
    114            DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&GPS_BUF[0] + moveLength);
   \                     ??updateUart_8: (+1)
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable4_12  ;; 0x40009000
   \   000000FC   0xF895 0x2020      LDRB     R2,[R5, #+32]
   \   00000100   0x0152             LSLS     R2,R2,#+5
   \   00000102   0x4411             ADD      R1,R1,R2
   \   00000104   0xF115 0x0221      ADDS     R2,R5,#+33
   \   00000108   0x1882             ADDS     R2,R0,R2
   \   0000010A   0x610A             STR      R2,[R1, #+16]
    115            for(i = 0; i < moveLength; i++)
   \   0000010C   0x2100             MOVS     R1,#+0
   \                     ??updateUart_9: (+1)
   \   0000010E   0x4281             CMP      R1,R0
   \   00000110   0xDA09             BGE.N    ??updateUart_10
    116            {
    117              GPS_BUF[i] = GPS_BUF[i0 + i];
   \   00000112   0x19CA             ADDS     R2,R1,R7
   \   00000114   0x442A             ADD      R2,R5,R2
   \   00000116   0xF892 0x2021      LDRB     R2,[R2, #+33]
   \   0000011A   0xEB05 0x0301      ADD      R3,R5,R1
   \   0000011E   0xF883 0x2021      STRB     R2,[R3, #+33]
    118            }
   \   00000122   0x1C49             ADDS     R1,R1,#+1
   \   00000124   0xE7F3             B.N      ??updateUart_9
    119            // memset(GPS_BUF + moveLength, 0, 500 * sizeof(char));
    120            if(address0 > 500)
   \                     ??updateUart_10: (+1)
   \   00000126   0xF240 0x12F5      MOVW     R2,#+501
   \   0000012A   0x4590             CMP      R8,R2
   \   0000012C   0xDB08             BLT.N    ??updateUart_11
    121            {
    122              DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&GPS_BUF[0]);
   \   0000012E   0x.... 0x....      LDR.W    R2,??DataTable4_12  ;; 0x40009000
   \   00000132   0xF895 0x3020      LDRB     R3,[R5, #+32]
   \   00000136   0x015B             LSLS     R3,R3,#+5
   \   00000138   0x441A             ADD      R2,R2,R3
   \   0000013A   0xF115 0x0321      ADDS     R3,R5,#+33
   \   0000013E   0x6113             STR      R3,[R2, #+16]
    123            }
    124            
    125            
    126            
    127          }
   \                     ??updateUart_11: (+1)
   \                     ??updateUart_12: (+1)
   \   00000140   0xE8BD 0x87FF      POP      {R0-R10,PC}      ;; return
    128          //将获取文本信息转换为double型
    129          

   \                                 In section .text, align 2, keep-with-next
    130          double CGPS::get_double_number(char *s)
    131          {
   \                     _ZN4CGPS17get_double_numberEPc: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0A0             SUB      SP,SP,#+128
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    132            char buf[128];
    133            int i;
    134            double rev;
    135            i=GetComma(1,s);
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \   00000012   0x0006             MOVS     R6,R0
    136            strncpy(buf,s,i);
   \   00000014   0x0032             MOVS     R2,R6
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x.... 0x....      BL       strncpy
    137            buf[i]=0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x5588             STRB     R0,[R1, R6]
    138            rev=atof(buf);
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x.... 0x....      BL       atof
    139            
    140            return rev;
   \   0000002A   0xB020             ADD      SP,SP,#+128
   \   0000002C   0xBD70             POP      {R4-R6,PC}       ;; return
    141          }
    142          

   \                                 In section .text, align 2, keep-with-next
    143          double CGPS::get_locate(double temp)
    144          {
   \                     _ZN4CGPS10get_locateEd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0xED2D 0x8B04      VPUSH    {D8-D9}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000000C   0xEEF0 0x8A60      VMOV.F32 S17,S1
    145            int m;
    146            double  n;
    147            m=(int)temp/100;
   \   00000010   0xEC51 0x0B18      VMOV     R0,R1,D8
   \   00000014   0x.... 0x....      BL       __aeabi_d2iz
   \   00000018   0x2164             MOVS     R1,#+100
   \   0000001A   0xFB90 0xF5F1      SDIV     R5,R0,R1
    148            n=(temp-m*100)/60;
   \   0000001E   0x2064             MOVS     R0,#+100
   \   00000020   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000024   0x.... 0x....      BL       __aeabi_i2d
   \   00000028   0x0002             MOVS     R2,R0
   \   0000002A   0x000B             MOVS     R3,R1
   \   0000002C   0xEC51 0x0B18      VMOV     R0,R1,D8
   \   00000030   0x.... 0x....      BL       __aeabi_dsub
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x.... 0x....      LDR.W    R3,??DataTable4_13  ;; 0x404e0000
   \   0000003A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000003E   0xEC41 0x0B19      VMOV     D9,R0,R1
    149            n=n+m;
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0x.... 0x....      BL       __aeabi_i2d
   \   00000048   0xEC53 0x2B19      VMOV     R2,R3,D9
   \   0000004C   0x.... 0x....      BL       __aeabi_dadd
   \   00000050   0xEC41 0x0B10      VMOV     D0,R0,R1
    150            return n;
   \   00000054   0xECBD 0x8B04      VPOP     {D8-D9}
   \   00000058   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    151            
    152          }
    153          
    154          

   \                                 In section .text, align 2, keep-with-next
    155          void CGPS::unpack(int start, int end)
    156          {
   \                     _ZN4CGPS6unpackEii: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x000D             MOVS     R5,R1
   \   0000000C   0x0016             MOVS     R6,R2
    157            //int tmp;
    158            
    159            c = GPS_BUF[start+5];
   \   0000000E   0xEB04 0x0005      ADD      R0,R4,R5
   \   00000012   0xF890 0x0026      LDRB     R0,[R0, #+38]
   \   00000016   0xF884 0x0460      STRB     R0,[R4, #+1120]
    160            if(c=='A')
   \   0000001A   0xF894 0x0460      LDRB     R0,[R4, #+1120]
   \   0000001E   0x2841             CMP      R0,#+65
   \   00000020   0xF040 0x818D      BNE.W    ??unpack_0
    161            {
    162              //"GNGGA"
    163              D.hour   =(GPS_BUF[start+ 7]-'0')*10+(GPS_BUF[start+ 8]-'0');
   \   00000024   0xEB04 0x0005      ADD      R0,R4,R5
   \   00000028   0xF890 0x1028      LDRB     R1,[R0, #+40]
   \   0000002C   0x220A             MOVS     R2,#+10
   \   0000002E   0xEB04 0x0005      ADD      R0,R4,R5
   \   00000032   0xF890 0x0029      LDRB     R0,[R0, #+41]
   \   00000036   0xFB02 0x0101      MLA      R1,R2,R1,R0
   \   0000003A   0xF5B1 0x7104      SUBS     R1,R1,#+528
   \   0000003E   0xF8C4 0x140C      STR      R1,[R4, #+1036]
    164              D.minute =(GPS_BUF[start+ 9]-'0')*10+(GPS_BUF[start+10]-'0');
   \   00000042   0xEB04 0x0005      ADD      R0,R4,R5
   \   00000046   0xF890 0x102A      LDRB     R1,[R0, #+42]
   \   0000004A   0x220A             MOVS     R2,#+10
   \   0000004C   0xEB04 0x0005      ADD      R0,R4,R5
   \   00000050   0xF890 0x002B      LDRB     R0,[R0, #+43]
   \   00000054   0xFB02 0x0101      MLA      R1,R2,R1,R0
   \   00000058   0xF5B1 0x7104      SUBS     R1,R1,#+528
   \   0000005C   0xF8C4 0x1410      STR      R1,[R4, #+1040]
    165              D.second =(GPS_BUF[start+11]-'0')*10+(GPS_BUF[start+12]-'0');
   \   00000060   0xEB04 0x0005      ADD      R0,R4,R5
   \   00000064   0xF890 0x102C      LDRB     R1,[R0, #+44]
   \   00000068   0x220A             MOVS     R2,#+10
   \   0000006A   0xEB04 0x0005      ADD      R0,R4,R5
   \   0000006E   0xF890 0x002D      LDRB     R0,[R0, #+45]
   \   00000072   0xFB02 0x0101      MLA      R1,R2,R1,R0
   \   00000076   0xF5B1 0x7104      SUBS     R1,R1,#+528
   \   0000007A   0xF8C4 0x1414      STR      R1,[R4, #+1044]
    166              //tmp = GetComma(9,GPS_BUF);
    167              //D.day    =(GPS_BUF[tmp+0]-'0')*10+(GPS_BUF[tmp+1]-'0');
    168              //D.month  =(GPS_BUF[tmp+2]-'0')*10+(GPS_BUF[tmp+3]-'0');
    169              //D.year   =(GPS_BUF[tmp+4]-'0')*10+(GPS_BUF[tmp+5]-'0')+2000;
    170              
    171              status   = GPS_BUF[GetComma(6, GPS_BUF)];
   \   0000007E   0xF114 0x0221      ADDS     R2,R4,#+33
   \   00000082   0x2106             MOVS     R1,#+6
   \   00000084   0x0020             MOVS     R0,R4
   \   00000086   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \   0000008A   0x4420             ADD      R0,R4,R0
   \   0000008C   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \   00000090   0xF884 0x0461      STRB     R0,[R4, #+1121]
    172              if(status == '1' || status == '4' || status == '5')
   \   00000094   0xF894 0x0461      LDRB     R0,[R4, #+1121]
   \   00000098   0x2831             CMP      R0,#+49
   \   0000009A   0xD007             BEQ.N    ??unpack_1
   \   0000009C   0xF894 0x0461      LDRB     R0,[R4, #+1121]
   \   000000A0   0x2834             CMP      R0,#+52
   \   000000A2   0xD003             BEQ.N    ??unpack_1
   \   000000A4   0xF894 0x0461      LDRB     R0,[R4, #+1121]
   \   000000A8   0x2835             CMP      R0,#+53
   \   000000AA   0xD15C             BNE.N    ??unpack_2
    173              {
    174                latitude = get_locate(get_double_number(&GPS_BUF[GetComma(2, GPS_BUF)]));
   \                     ??unpack_1: (+1)
   \   000000AC   0xF114 0x0221      ADDS     R2,R4,#+33
   \   000000B0   0x2102             MOVS     R1,#+2
   \   000000B2   0x0020             MOVS     R0,R4
   \   000000B4   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \   000000B8   0x4420             ADD      R0,R4,R0
   \   000000BA   0xF110 0x0121      ADDS     R1,R0,#+33
   \   000000BE   0x0020             MOVS     R0,R4
   \   000000C0   0x.... 0x....      BL       _ZN4CGPS17get_double_numberEPc
   \   000000C4   0x0020             MOVS     R0,R4
   \   000000C6   0x.... 0x....      BL       _ZN4CGPS10get_locateEd
   \   000000CA   0xF514 0x6084      ADDS     R0,R4,#+1056
   \   000000CE   0xED80 0x0B00      VSTR     D0,[R0, #0]
    175                NS       = GPS_BUF[GetComma(3, GPS_BUF)];
   \   000000D2   0xF114 0x0221      ADDS     R2,R4,#+33
   \   000000D6   0x2103             MOVS     R1,#+3
   \   000000D8   0x0020             MOVS     R0,R4
   \   000000DA   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \   000000DE   0x4420             ADD      R0,R4,R0
   \   000000E0   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \   000000E4   0xF884 0x0462      STRB     R0,[R4, #+1122]
    176                longitude= get_locate(get_double_number(&GPS_BUF[GetComma(4, GPS_BUF)]));
   \   000000E8   0xF114 0x0221      ADDS     R2,R4,#+33
   \   000000EC   0x2104             MOVS     R1,#+4
   \   000000EE   0x0020             MOVS     R0,R4
   \   000000F0   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \   000000F4   0x4420             ADD      R0,R4,R0
   \   000000F6   0xF110 0x0121      ADDS     R1,R0,#+33
   \   000000FA   0x0020             MOVS     R0,R4
   \   000000FC   0x.... 0x....      BL       _ZN4CGPS17get_double_numberEPc
   \   00000100   0x0020             MOVS     R0,R4
   \   00000102   0x.... 0x....      BL       _ZN4CGPS10get_locateEd
   \   00000106   0xF514 0x6085      ADDS     R0,R4,#+1064
   \   0000010A   0xED80 0x0B00      VSTR     D0,[R0, #0]
    177                EW       = GPS_BUF[GetComma(5, GPS_BUF)];
   \   0000010E   0xF114 0x0221      ADDS     R2,R4,#+33
   \   00000112   0x2105             MOVS     R1,#+5
   \   00000114   0x0020             MOVS     R0,R4
   \   00000116   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \   0000011A   0x4420             ADD      R0,R4,R0
   \   0000011C   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \   00000120   0xF884 0x0463      STRB     R0,[R4, #+1123]
    178                satqua   = get_double_number(&GPS_BUF[GetComma(7, GPS_BUF)]);
   \   00000124   0xF114 0x0221      ADDS     R2,R4,#+33
   \   00000128   0x2107             MOVS     R1,#+7
   \   0000012A   0x0020             MOVS     R0,R4
   \   0000012C   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \   00000130   0x4420             ADD      R0,R4,R0
   \   00000132   0xF110 0x0121      ADDS     R1,R0,#+33
   \   00000136   0x0020             MOVS     R0,R4
   \   00000138   0x.... 0x....      BL       _ZN4CGPS17get_double_numberEPc
   \   0000013C   0xF514 0x608D      ADDS     R0,R4,#+1128
   \   00000140   0xED80 0x0B00      VSTR     D0,[R0, #0]
    179                altitude = get_double_number(&GPS_BUF[GetComma(9, GPS_BUF)]);
   \   00000144   0xF114 0x0221      ADDS     R2,R4,#+33
   \   00000148   0x2109             MOVS     R1,#+9
   \   0000014A   0x0020             MOVS     R0,R4
   \   0000014C   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \   00000150   0x4420             ADD      R0,R4,R0
   \   00000152   0xF110 0x0121      ADDS     R1,R0,#+33
   \   00000156   0x0020             MOVS     R0,R4
   \   00000158   0x.... 0x....      BL       _ZN4CGPS17get_double_numberEPc
   \   0000015C   0xF514 0x6086      ADDS     R0,R4,#+1072
   \   00000160   0xED80 0x0B00      VSTR     D0,[R0, #0]
   \   00000164   0xE001             B.N      ??unpack_3
    180              }
    181              else
    182              {
    183                valid = false;
   \                     ??unpack_2: (+1)
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0x7520             STRB     R0,[R4, #+20]
    184              }
    185              
    186              //UTC2BTC(&GPS->D);//世界时间 
    187              GPS->dy = (GPS->latitude - GPS->latitude_reference) * 111133;
   \                     ??unpack_3: (+1)
   \   0000016A   0x....             LDR.N    R0,??DataTable4_2
   \   0000016C   0x6800             LDR      R0,[R0, #+0]
   \   0000016E   0xF510 0x6084      ADDS     R0,R0,#+1056
   \   00000172   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \   00000176   0x....             LDR.N    R2,??DataTable4_2
   \   00000178   0x6812             LDR      R2,[R2, #+0]
   \   0000017A   0xF512 0x6288      ADDS     R2,R2,#+1088
   \   0000017E   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   00000182   0x.... 0x....      BL       __aeabi_dsub
   \   00000186   0x2200             MOVS     R2,#+0
   \   00000188   0x....             LDR.N    R3,??DataTable4_14  ;; 0x40fb21d0
   \   0000018A   0x.... 0x....      BL       __aeabi_dmul
   \   0000018E   0x....             LDR.N    R2,??DataTable4_2
   \   00000190   0x6812             LDR      R2,[R2, #+0]
   \   00000192   0xF512 0x628B      ADDS     R2,R2,#+1112
   \   00000196   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
    188              GPS->dx = (GPS->longitude - GPS->longitude_reference) * 111319 * arm_cos_f32((GPS->longitude - GPS->longitude_reference) / 57.2957795);
   \   0000019A   0x....             LDR.N    R0,??DataTable4_2
   \   0000019C   0x6800             LDR      R0,[R0, #+0]
   \   0000019E   0xF510 0x6085      ADDS     R0,R0,#+1064
   \   000001A2   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \   000001A6   0x....             LDR.N    R2,??DataTable4_2
   \   000001A8   0x6812             LDR      R2,[R2, #+0]
   \   000001AA   0xF512 0x6289      ADDS     R2,R2,#+1096
   \   000001AE   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   000001B2   0x.... 0x....      BL       __aeabi_dsub
   \   000001B6   0x....             LDR.N    R2,??DataTable4_15  ;; 0x1a47a9e3
   \   000001B8   0x....             LDR.N    R3,??DataTable4_16  ;; 0x404ca5dc
   \   000001BA   0x.... 0x....      BL       __aeabi_ddiv
   \   000001BE   0x.... 0x....      BL       __aeabi_d2f
   \   000001C2   0xEE00 0x0A10      VMOV     S0,R0
   \   000001C6   0x.... 0x....      BL       arm_cos_f32
   \   000001CA   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   000001CE   0x....             LDR.N    R0,??DataTable4_2
   \   000001D0   0x6800             LDR      R0,[R0, #+0]
   \   000001D2   0xF510 0x6085      ADDS     R0,R0,#+1064
   \   000001D6   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \   000001DA   0x....             LDR.N    R2,??DataTable4_2
   \   000001DC   0x6812             LDR      R2,[R2, #+0]
   \   000001DE   0xF512 0x6289      ADDS     R2,R2,#+1096
   \   000001E2   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   000001E6   0x.... 0x....      BL       __aeabi_dsub
   \   000001EA   0x2200             MOVS     R2,#+0
   \   000001EC   0x....             LDR.N    R3,??DataTable4_17  ;; 0x40fb2d70
   \   000001EE   0x.... 0x....      BL       __aeabi_dmul
   \   000001F2   0x4680             MOV      R8,R0
   \   000001F4   0x4689             MOV      R9,R1
   \   000001F6   0xEE18 0x0A10      VMOV     R0,S16
   \   000001FA   0x.... 0x....      BL       __aeabi_f2d
   \   000001FE   0x4642             MOV      R2,R8
   \   00000200   0x464B             MOV      R3,R9
   \   00000202   0x.... 0x....      BL       __aeabi_dmul
   \   00000206   0x....             LDR.N    R2,??DataTable4_2
   \   00000208   0x6812             LDR      R2,[R2, #+0]
   \   0000020A   0xF512 0x628A      ADDS     R2,R2,#+1104
   \   0000020E   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
    189              
    190              
    191              dx_local = positionFilterX.newData3(dy * arm_cos_f32(angle / 57.2957795) - dx * arm_sin_f32(angle / 57.2957795), t);
   \   00000212   0xF8D4 0x0478      LDR      R0,[R4, #+1144]
   \   00000216   0x.... 0x....      BL       __aeabi_f2d
   \   0000021A   0x....             LDR.N    R2,??DataTable4_15  ;; 0x1a47a9e3
   \   0000021C   0x....             LDR.N    R3,??DataTable4_16  ;; 0x404ca5dc
   \   0000021E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000222   0x.... 0x....      BL       __aeabi_d2f
   \   00000226   0xEE00 0x0A10      VMOV     S0,R0
   \   0000022A   0x.... 0x....      BL       arm_cos_f32
   \   0000022E   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000232   0xF8D4 0x0478      LDR      R0,[R4, #+1144]
   \   00000236   0x.... 0x....      BL       __aeabi_f2d
   \   0000023A   0x....             LDR.N    R2,??DataTable4_15  ;; 0x1a47a9e3
   \   0000023C   0x....             LDR.N    R3,??DataTable4_16  ;; 0x404ca5dc
   \   0000023E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000242   0x.... 0x....      BL       __aeabi_d2f
   \   00000246   0xEE00 0x0A10      VMOV     S0,R0
   \   0000024A   0x.... 0x....      BL       arm_sin_f32
   \   0000024E   0xEEF0 0x8A40      VMOV.F32 S17,S0
   \   00000252   0x....             LDR.N    R0,??DataTable4_11
   \   00000254   0x6801             LDR      R1,[R0, #+0]
   \   00000256   0x000F             MOVS     R7,R1
   \   00000258   0xEE18 0x0A10      VMOV     R0,S16
   \   0000025C   0x.... 0x....      BL       __aeabi_f2d
   \   00000260   0xF514 0x628B      ADDS     R2,R4,#+1112
   \   00000264   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   00000268   0x.... 0x....      BL       __aeabi_dmul
   \   0000026C   0x4680             MOV      R8,R0
   \   0000026E   0x4689             MOV      R9,R1
   \   00000270   0xEE18 0x0A90      VMOV     R0,S17
   \   00000274   0x.... 0x....      BL       __aeabi_f2d
   \   00000278   0xF514 0x628A      ADDS     R2,R4,#+1104
   \   0000027C   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   00000280   0x.... 0x....      BL       __aeabi_dmul
   \   00000284   0x0002             MOVS     R2,R0
   \   00000286   0x000B             MOVS     R3,R1
   \   00000288   0x4640             MOV      R0,R8
   \   0000028A   0x4649             MOV      R1,R9
   \   0000028C   0x.... 0x....      BL       __aeabi_dsub
   \   00000290   0x.... 0x....      BL       __aeabi_d2f
   \   00000294   0xEE00 0x0A10      VMOV     S0,R0
   \   00000298   0x0039             MOVS     R1,R7
   \   0000029A   0xF204 0x407C      ADDW     R0,R4,#+1148
   \   0000029E   0x.... 0x....      BL       _ZN11CJumpFilter8newData3Efi
   \   000002A2   0xF204 0x4070      ADDW     R0,R4,#+1136
   \   000002A6   0xED80 0x0A00      VSTR     S0,[R0, #0]
    192              dy_local = positionFilterY.newData3(dy * arm_sin_f32(angle / 57.2957795) + dx * arm_cos_f32(angle / 57.2957795), t);
   \   000002AA   0xF8D4 0x0478      LDR      R0,[R4, #+1144]
   \   000002AE   0x.... 0x....      BL       __aeabi_f2d
   \   000002B2   0x....             LDR.N    R2,??DataTable4_15  ;; 0x1a47a9e3
   \   000002B4   0x....             LDR.N    R3,??DataTable4_16  ;; 0x404ca5dc
   \   000002B6   0x.... 0x....      BL       __aeabi_ddiv
   \   000002BA   0x.... 0x....      BL       __aeabi_d2f
   \   000002BE   0xEE00 0x0A10      VMOV     S0,R0
   \   000002C2   0x.... 0x....      BL       arm_sin_f32
   \   000002C6   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   000002CA   0xF8D4 0x0478      LDR      R0,[R4, #+1144]
   \   000002CE   0x.... 0x....      BL       __aeabi_f2d
   \   000002D2   0x....             LDR.N    R2,??DataTable4_15  ;; 0x1a47a9e3
   \   000002D4   0x....             LDR.N    R3,??DataTable4_16  ;; 0x404ca5dc
   \   000002D6   0x.... 0x....      BL       __aeabi_ddiv
   \   000002DA   0x.... 0x....      BL       __aeabi_d2f
   \   000002DE   0xEE00 0x0A10      VMOV     S0,R0
   \   000002E2   0x.... 0x....      BL       arm_cos_f32
   \   000002E6   0xEEF0 0x8A40      VMOV.F32 S17,S0
   \   000002EA   0x....             LDR.N    R0,??DataTable4_11
   \   000002EC   0x6801             LDR      R1,[R0, #+0]
   \   000002EE   0x000F             MOVS     R7,R1
   \   000002F0   0xEE18 0x0A10      VMOV     R0,S16
   \   000002F4   0x.... 0x....      BL       __aeabi_f2d
   \   000002F8   0xF514 0x628B      ADDS     R2,R4,#+1112
   \   000002FC   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   00000300   0x.... 0x....      BL       __aeabi_dmul
   \   00000304   0x4680             MOV      R8,R0
   \   00000306   0x4689             MOV      R9,R1
   \   00000308   0xEE18 0x0A90      VMOV     R0,S17
   \   0000030C   0x.... 0x....      BL       __aeabi_f2d
   \   00000310   0xF514 0x628A      ADDS     R2,R4,#+1104
   \   00000314   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \   00000318   0x.... 0x....      BL       __aeabi_dmul
   \   0000031C   0x4642             MOV      R2,R8
   \   0000031E   0x464B             MOV      R3,R9
   \   00000320   0x.... 0x....      BL       __aeabi_dadd
   \   00000324   0x.... 0x....      BL       __aeabi_d2f
   \   00000328   0xEE00 0x0A10      VMOV     S0,R0
   \   0000032C   0x0039             MOVS     R1,R7
   \   0000032E   0xF204 0x40B4      ADDW     R0,R4,#+1204
   \   00000332   0x.... 0x....      BL       _ZN11CJumpFilter8newData3Efi
   \   00000336   0xF204 0x4074      ADDW     R0,R4,#+1140
   \   0000033A   0xED80 0x0A00      VSTR     S0,[R0, #0]
    193            }
    194          }
   \                     ??unpack_0: (+1)
   \                     ??unpack_4: (+1)
   \   0000033E   0xECBD 0x8B02      VPOP     {D8}
   \   00000342   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    195          

   \                                 In section .text, align 2, keep-with-next
    196          void CGPS::TX_::startDMA_Transmit()
    197          {
    198            //调整源地址
    199            DMA0->TCD[DMA_CH5].SADDR = DMA_SADDR_SADDR(GPS->TX.data);
   \                     _ZN4CGPS3TX_17startDMA_TransmitEv: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_2
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF201 0x6104      ADDW     R1,R1,#+1540
   \   00000008   0x....             LDR.N    R2,??DataTable4_18  ;; 0x400090a0
   \   0000000A   0x6011             STR      R1,[R2, #+0]
    200            
    201            //设置主循环计数器 current major loop count
    202            DMA0->TCD[DMA_CH5].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(GPS->TX.index);
   \   0000000C   0x....             LDR.N    R1,??DataTable4_2
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0xF8D1 0x1730      LDR      R1,[R1, #+1840]
   \   00000014   0x0449             LSLS     R1,R1,#+17       ;; ZeroExtS R1,R1,#+17,#+17
   \   00000016   0x0C49             LSRS     R1,R1,#+17
   \   00000018   0x....             LDR.N    R2,??DataTable4_19  ;; 0x400090b6
   \   0000001A   0x8011             STRH     R1,[R2, #+0]
    203            
    204            //起始循环计数器，当主循环计数器为零的时候，将装载起始循环计数器的值
    205            DMA0->TCD[DMA_CH5].BITER_ELINKNO = DMA_CITER_ELINKNO_CITER(GPS->TX.index);
   \   0000001C   0x....             LDR.N    R1,??DataTable4_2
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0xF8D1 0x1730      LDR      R1,[R1, #+1840]
   \   00000024   0x0449             LSLS     R1,R1,#+17       ;; ZeroExtS R1,R1,#+17,#+17
   \   00000026   0x0C49             LSRS     R1,R1,#+17
   \   00000028   0x....             LDR.N    R2,??DataTable4_20  ;; 0x400090be
   \   0000002A   0x8011             STRH     R1,[R2, #+0]
    206            
    207            DMA_EnableReq(DMA_CH5);
   \   0000002C   0x....             LDR.N    R1,??DataTable4_21  ;; 0x4000800c
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0xF051 0x0120      ORRS     R1,R1,#0x20
   \   00000034   0x....             LDR.N    R2,??DataTable4_21  ;; 0x4000800c
   \   00000036   0x6011             STR      R1,[R2, #+0]
    208            
    209          }
   \   00000038   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     `GPS_Init()::static guard for GPS_0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     `GPS_Init()::GPS_0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     GPS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x3BB1CE8B         DC32     0x3bb1ce8b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x403ED95C         DC32     0x403ed95c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x2254BE9E         DC32     0x2254be9e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x405DE73F         DC32     0x405de73f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x189374BC         DC32     0x189374bc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x40406604         DC32     0x40406604

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x41A00000         DC32     0x41a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0xC1A00000         DC32     0xc1a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x404E0000         DC32     0x404e0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x40FB21D0         DC32     0x40fb21d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x1A47A9E3         DC32     0x1a47a9e3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x404CA5DC         DC32     0x404ca5dc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x40FB2D70         DC32     0x40fb2d70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x400090A0         DC32     0x400090a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x400090B6         DC32     0x400090b6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x400090BE         DC32     0x400090be

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x4000800C         DC32     0x4000800c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CGPS::CGPS()
         8   -> CJumpFilter::CJumpFilter()
         8   -> CJumpFilter::setParameter(float, int, float)
         8   -> Coordinate::Coordinate()
      24   CGPS::GetComma(int, char *)
        24   -> strlen
       0   CGPS::TX_::startDMA_Transmit()
     144   CGPS::get_double_number(char *)
       144   -> CGPS::GetComma(int, char *)
       144   -> atof
       144   -> strncpy
      32   CGPS::get_locate(double)
        32   -> __aeabi_d2iz
        32   -> __aeabi_dadd
        32   -> __aeabi_ddiv
        32   -> __aeabi_dsub
        32   -> __aeabi_i2d
      40   CGPS::unpack(int, int)
        40   -> CGPS::GetComma(int, char *)
        40   -> CGPS::get_double_number(char *)
        40   -> CGPS::get_locate(double)
        40   -> CJumpFilter::newData3(float, int)
        40   -> __aeabi_d2f
        40   -> __aeabi_dadd
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_dsub
        40   -> __aeabi_f2d
        40   -> arm_cos_f32
        40   -> arm_sin_f32
      48   CGPS::updateUart()
        48   -> CGPS::unpack(int, int)
        48   -> CJumpFilter::checkIsNewData(int)
       0   CJumpFilter::CJumpFilter()
       8   Coordinate::Coordinate()
         8   -> CoordinateElement::CoordinateElement()
       0   CoordinateElement::CoordinateElement()
       8   GPS_Init()
         8   -> CGPS::CGPS()
         8   -> CJumpFilter::setParameter(float, int)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      96  CGPS::CGPS()
      50  CGPS::GetComma(int, char *)
      58  CGPS::TX_::startDMA_Transmit()
      46  CGPS::get_double_number(char *)
      90  CGPS::get_locate(double)
     838  CGPS::unpack(int, int)
     324  CGPS::updateUart()
      24  CJumpFilter::CJumpFilter()
      30  Coordinate::Coordinate()
      28  CoordinateElement::CoordinateElement()
       4  GPS
    1848  GPS_0
     214  GPS_Init()
      33  -- Other

 
    32 bytes in section .ARM.exidx
 1 853 bytes in section .bss
 1 886 bytes in section .text
 
 1 708 bytes of CODE  memory (+ 178 bytes shared)
    32 bytes of CONST memory
 1 853 bytes of DATA  memory

Errors: none
Warnings: 1
