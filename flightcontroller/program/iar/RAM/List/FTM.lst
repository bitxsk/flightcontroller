###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       16/May/2018  07:32:56
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FTM.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EWEDEE.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FTM.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\FTM.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\FTM.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FTM.c
      1          /**
      2           * @file FTM.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FTM底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn)
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init16__NVIC_EnableIRQE4IRQn: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD40A             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000C   0x408A             LSLS     R2,R2,R1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable9  ;; 0xe000e100
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0003             MOVS     R3,R0
   \   00000016   0x095B             LSRS     R3,R3,#+5
   \   00000018   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn)
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init17__NVIC_DisableIRQE4IRQn: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD40A             BMI.N    ??__NVIC_DisableIRQ_0
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000C   0x408A             LSLS     R2,R2,R1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable9_1  ;; 0xe000e180
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0003             MOVS     R3,R0
   \   00000016   0x095B             LSRS     R3,R3,#+5
   \   00000018   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
     23          #include "FTM.h"
     24          extern "C"{
     25          //用户自定义中断服务函数数组
     26          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
     27          FTM_ISR_CALLBACK FTM_ISR[3];
     28          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)

   \                                 In section .bss, align 4
     29          FTM_ISR_CALLBACK FTM_ISR[4];
   \                     FTM_ISR:
   \   00000000                      DS8 16
     30          #endif
     31          
     32          static uint8 FTM_PWM_Init(FTM_InitTypeDef);
     33          static uint8 FTM_IC_Init(FTM_InitTypeDef);
     34          static uint8 FTM_QD_Init(FTM_InitTypeDef);
     35          static uint8 FTM_DEC_Init(FTM_InitTypeDef);
     36          static uint8 FTM_PinInit(FTM_Type *, FtmChnEnum_Type, PortPinsEnum_Type);
     37          static uint8 FTM_PinDeinit(FTM_Type *, FtmChnEnum_Type);
     38          
     39          
     40          /*
     41           * FTM_Init
     42           * FTM模块通用初始化，可初始化为PWM、输入捕获、正交解码、双边捕获模式
     43           *
     44           * 参数:
     45           *    ftm_init_structure--FTM初始化结构体，
     46           *                        具体定义见FTM_InitTypeDef
     47           *
     48           * 输出:
     49           *    0--配置错误
     50           *    1--配置成功
     51           */

   \                                 In section .text, align 2, keep-with-next
     52          uint8 FTM_Init(FTM_InitTypeDef ftm_init_structure)
     53          {
   \                     FTM_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB53E             PUSH     {R1-R5,LR}
     54            uint8 result, i;
     55            //参数检查
     56            ASSERT( ftm_init_structure.FTM_Mode & 
     57                   (FTM_MODE_PWM|FTM_MODE_IC|FTM_MODE_QD|FTM_MODE_DEC));  //判断模式选择
   \   00000004   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   00000008   0xF010 0x0F0F      TST      R0,#0xF
   \   0000000C   0xD104             BNE.N    ??FTM_Init_0
   \   0000000E   0x2139             MOVS     R1,#+57
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable9_2
   \   00000014   0x.... 0x....      BL       assert_failed
     58            
     59            // 使能FTM时钟模块
     60            if(ftm_init_structure.FTM_Ftmx == FTM0)
   \                     ??FTM_Init_0: (+1)
   \   00000018   0x9806             LDR      R0,[SP, #+24]
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x40038000
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD109             BNE.N    ??FTM_Init_1
     61            {
     62              i=0; 
   \   00000022   0x2500             MOVS     R5,#+0
     63              SIM->SCGC6 |= SIM_SCGC6_FTM0_MASK;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x4004803c
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable9_4  ;; 0x4004803c
   \   00000032   0x6008             STR      R0,[R1, #+0]
   \   00000034   0xE02E             B.N      ??FTM_Init_2
     64            }
     65            else if(ftm_init_structure.FTM_Ftmx == FTM1)
   \                     ??FTM_Init_1: (+1)
   \   00000036   0x9806             LDR      R0,[SP, #+24]
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable9_5  ;; 0x40039000
   \   0000003C   0x4288             CMP      R0,R1
   \   0000003E   0xD109             BNE.N    ??FTM_Init_3
     66            {
     67              i=1;
   \   00000040   0x2501             MOVS     R5,#+1
     68              SIM->SCGC6 |= SIM_SCGC6_FTM1_MASK;
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x4004803c
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable9_4  ;; 0x4004803c
   \   00000050   0x6008             STR      R0,[R1, #+0]
   \   00000052   0xE01F             B.N      ??FTM_Init_2
     69            }
     70            else if(ftm_init_structure.FTM_Ftmx == FTM2)
   \                     ??FTM_Init_3: (+1)
   \   00000054   0x9806             LDR      R0,[SP, #+24]
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable9_6  ;; 0x400b8000
   \   0000005A   0x4288             CMP      R0,R1
   \   0000005C   0xD109             BNE.N    ??FTM_Init_4
     71            {
     72              i=2;
   \   0000005E   0x2502             MOVS     R5,#+2
     73              SIM->SCGC3 |= SIM_SCGC3_FTM2_MASK;
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable9_7  ;; 0x40048030
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable9_7  ;; 0x40048030
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE010             B.N      ??FTM_Init_2
     74            }
     75          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
     76            else if(ftm_init_structure.FTM_Ftmx == FTM3)
   \                     ??FTM_Init_4: (+1)
   \   00000072   0x9806             LDR      R0,[SP, #+24]
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable9_8  ;; 0x400b9000
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD109             BNE.N    ??FTM_Init_5
     77            {
     78              i=3;
   \   0000007C   0x2503             MOVS     R5,#+3
     79              SIM->SCGC3 |= SIM_SCGC3_FTM3_MASK;
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable9_7  ;; 0x40048030
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable9_7  ;; 0x40048030
   \   0000008C   0x6008             STR      R0,[R1, #+0]
   \   0000008E   0xE001             B.N      ??FTM_Init_2
     80            }
     81          #endif
     82            else
     83            {
     84              return 0;
   \                     ??FTM_Init_5: (+1)
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xE052             B.N      ??FTM_Init_6
     85            }
     86            
     87            if(ftm_init_structure.FTM_Mode & FTM_MODE_PWM)
   \                     ??FTM_Init_2: (+1)
   \   00000094   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   00000098   0x07C0             LSLS     R0,R0,#+31
   \   0000009A   0xD50A             BPL.N    ??FTM_Init_7
     88            {
     89              result = FTM_PWM_Init(ftm_init_structure);
   \   0000009C   0xA906             ADD      R1,SP,#+24
   \   0000009E   0xB084             SUB      SP,SP,#+16
   \   000000A0   0x4668             MOV      R0,SP
   \   000000A2   0x221C             MOVS     R2,#+28
   \   000000A4   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000A8   0xBC0F             POP      {R0-R3}
   \   000000AA   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init12FTM_PWM_InitE15FTM_InitTypeDef
   \   000000AE   0x0004             MOVS     R4,R0
   \   000000B0   0xE02B             B.N      ??FTM_Init_8
     90            }
     91            else if(ftm_init_structure.FTM_Mode & FTM_MODE_IC)
   \                     ??FTM_Init_7: (+1)
   \   000000B2   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   000000B6   0x0780             LSLS     R0,R0,#+30
   \   000000B8   0xD50A             BPL.N    ??FTM_Init_9
     92            {
     93              result = FTM_IC_Init(ftm_init_structure);
   \   000000BA   0xA906             ADD      R1,SP,#+24
   \   000000BC   0xB084             SUB      SP,SP,#+16
   \   000000BE   0x4668             MOV      R0,SP
   \   000000C0   0x221C             MOVS     R2,#+28
   \   000000C2   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000C6   0xBC0F             POP      {R0-R3}
   \   000000C8   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_IC_InitE15FTM_InitTypeDef
   \   000000CC   0x0004             MOVS     R4,R0
   \   000000CE   0xE01C             B.N      ??FTM_Init_8
     94            }
     95            else if(ftm_init_structure.FTM_Mode & FTM_MODE_QD)
   \                     ??FTM_Init_9: (+1)
   \   000000D0   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   000000D4   0x0740             LSLS     R0,R0,#+29
   \   000000D6   0xD50A             BPL.N    ??FTM_Init_10
     96            {
     97              result = FTM_QD_Init(ftm_init_structure);
   \   000000D8   0xA906             ADD      R1,SP,#+24
   \   000000DA   0xB084             SUB      SP,SP,#+16
   \   000000DC   0x4668             MOV      R0,SP
   \   000000DE   0x221C             MOVS     R2,#+28
   \   000000E0   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000E4   0xBC0F             POP      {R0-R3}
   \   000000E6   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_QD_InitE15FTM_InitTypeDef
   \   000000EA   0x0004             MOVS     R4,R0
   \   000000EC   0xE00D             B.N      ??FTM_Init_8
     98            }
     99            else if(ftm_init_structure.FTM_Mode & FTM_MODE_DEC)
   \                     ??FTM_Init_10: (+1)
   \   000000EE   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   000000F2   0x0700             LSLS     R0,R0,#+28
   \   000000F4   0xD509             BPL.N    ??FTM_Init_8
    100            {
    101              result = FTM_DEC_Init(ftm_init_structure);
   \   000000F6   0xA906             ADD      R1,SP,#+24
   \   000000F8   0xB084             SUB      SP,SP,#+16
   \   000000FA   0x4668             MOV      R0,SP
   \   000000FC   0x221C             MOVS     R2,#+28
   \   000000FE   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000102   0xBC0F             POP      {R0-R3}
   \   00000104   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init12FTM_DEC_InitE15FTM_InitTypeDef
   \   00000108   0x0004             MOVS     R4,R0
    102            }
    103            
    104            if(result == 1)
   \                     ??FTM_Init_8: (+1)
   \   0000010A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000010C   0x2C01             CMP      R4,#+1
   \   0000010E   0xD112             BNE.N    ??FTM_Init_11
    105            {    
    106              //判断是否开启溢出中断
    107              if(ftm_init_structure.FTM_Isr!=NULL)
   \   00000110   0x980C             LDR      R0,[SP, #+48]
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD00F             BEQ.N    ??FTM_Init_11
    108              {      
    109                FTM_ISR[i] = ftm_init_structure.FTM_Isr;
   \   00000116   0x980C             LDR      R0,[SP, #+48]
   \   00000118   0x.... 0x....      LDR.W    R1,??DataTable9_9
   \   0000011C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000011E   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
    110                if(ftm_init_structure.FTM_ToiEnable == TRUE)
   \   00000122   0xF89D 0x002C      LDRB     R0,[SP, #+44]
   \   00000126   0x2801             CMP      R0,#+1
   \   00000128   0xD105             BNE.N    ??FTM_Init_11
    111                {
    112                  ftm_init_structure.FTM_Ftmx->SC |= FTM_SC_TOIE_MASK;
   \   0000012A   0x9806             LDR      R0,[SP, #+24]
   \   0000012C   0x6800             LDR      R0,[R0, #+0]
   \   0000012E   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000132   0x9906             LDR      R1,[SP, #+24]
   \   00000134   0x6008             STR      R0,[R1, #+0]
    113                }
    114              }
    115            }
    116            
    117            return result;
   \                     ??FTM_Init_11: (+1)
   \   00000136   0x0020             MOVS     R0,R4
   \   00000138   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??FTM_Init_6: (+1)
   \   0000013A   0xBC3E             POP      {R1-R5}
   \   0000013C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    118          }
    119          
    120          /*
    121           * FTM_Deinit
    122           * FTM模块通用反初始化
    123           *
    124           * 参数:
    125           *    ftm_init_structure--FTM初始化结构体，
    126           *                        具体定义见FTM_InitTypeDef
    127           *
    128           * 输出:
    129           *    0--配置错误
    130           *    1--配置成功
    131           */

   \                                 In section .text, align 2, keep-with-next
    132          uint8 FTM_Deinit(FTM_InitTypeDef ftm_init_structure)
    133          {
   \                     FTM_Deinit: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB5E0             PUSH     {R5-R7,LR}
    134            if(ftm_init_structure.FTM_Ftmx == FTM0)
   \   00000004   0x9804             LDR      R0,[SP, #+16]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x40038000
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD108             BNE.N    ??FTM_Deinit_0
    135            {
    136              SIM->SCGC6 &= ~SIM_SCGC6_FTM0_MASK;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x4004803c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF030 0x7080      BICS     R0,R0,#0x1000000
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable9_4  ;; 0x4004803c
   \   0000001C   0x6008             STR      R0,[R1, #+0]
   \   0000001E   0xE02B             B.N      ??FTM_Deinit_1
    137            }
    138            else if(ftm_init_structure.FTM_Ftmx == FTM1)
   \                     ??FTM_Deinit_0: (+1)
   \   00000020   0x9804             LDR      R0,[SP, #+16]
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable9_5  ;; 0x40039000
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD108             BNE.N    ??FTM_Deinit_2
    139            {
    140              SIM->SCGC6 &= ~SIM_SCGC6_FTM1_MASK;
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x4004803c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF030 0x7000      BICS     R0,R0,#0x2000000
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable9_4  ;; 0x4004803c
   \   00000038   0x6008             STR      R0,[R1, #+0]
   \   0000003A   0xE01D             B.N      ??FTM_Deinit_1
    141            }
    142            else if(ftm_init_structure.FTM_Ftmx == FTM2)
   \                     ??FTM_Deinit_2: (+1)
   \   0000003C   0x9804             LDR      R0,[SP, #+16]
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable9_6  ;; 0x400b8000
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD108             BNE.N    ??FTM_Deinit_3
    143            {
    144              SIM->SCGC3 &= ~SIM_SCGC3_FTM2_MASK;
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable9_7  ;; 0x40048030
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF030 0x7080      BICS     R0,R0,#0x1000000
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable9_7  ;; 0x40048030
   \   00000054   0x6008             STR      R0,[R1, #+0]
   \   00000056   0xE00F             B.N      ??FTM_Deinit_1
    145            }
    146          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    147            else if(ftm_init_structure.FTM_Ftmx == FTM3)
   \                     ??FTM_Deinit_3: (+1)
   \   00000058   0x9804             LDR      R0,[SP, #+16]
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable9_8  ;; 0x400b9000
   \   0000005E   0x4288             CMP      R0,R1
   \   00000060   0xD108             BNE.N    ??FTM_Deinit_4
    148            {
    149              SIM->SCGC3 &= ~SIM_SCGC3_FTM3_MASK;
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable9_7  ;; 0x40048030
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF030 0x7000      BICS     R0,R0,#0x2000000
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable9_7  ;; 0x40048030
   \   00000070   0x6008             STR      R0,[R1, #+0]
   \   00000072   0xE001             B.N      ??FTM_Deinit_1
    150            }
    151          #endif
    152            else
    153            {
    154              return 0;
   \                     ??FTM_Deinit_4: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xE008             B.N      ??FTM_Deinit_5
    155            }
    156            
    157            return FTM_DisableIrq(ftm_init_structure);
   \                     ??FTM_Deinit_1: (+1)
   \   00000078   0xA904             ADD      R1,SP,#+16
   \   0000007A   0xB084             SUB      SP,SP,#+16
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0x221C             MOVS     R2,#+28
   \   00000080   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000084   0xBC0F             POP      {R0-R3}
   \   00000086   0x.... 0x....      BL       FTM_DisableIrq
   \                     ??FTM_Deinit_5: (+1)
   \   0000008A   0xBC0E             POP      {R1-R3}
   \   0000008C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    158          }
    159          
    160          /*
    161           * FTM_PWM_Enable
    162           * FTM模块PWM模式输出使能，配置输出通道、占空比、指定对应的引脚、对齐方式
    163           * 
    164           * 参数:
    165           *    ftmx--FTMx模块号
    166           *      |__FTM0          --FTM0
    167           *      |__FTM1          --FTM1
    168           *      |__FTM2          --FTM2
    169           *      <注:只有MK60F系列含有FTM3>
    170           *      |__FTM3          --FTM3
    171           *    chn--PWM输出通道
    172           *      <注:只有MK60F系列含有FTM3>
    173           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    174           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    175           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    176           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    177           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    178           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    179           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    180           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    181           *    duty--PWM输出占空比
    182           *      |__0~10000--占空比0.00%~100.00%
    183           *    pin--FTMx通道对应的引脚
    184           *      FTM0
    185           *       FTM_Ch0-PTA3\PTC1
    186           *       FTM_Ch1-PTA4\PTC2
    187           *       FTM_Ch2-PTA5\PTC3
    188           *       FTM_Ch3-PTA6\PTC4
    189           *       FTM_Ch4-PTA7\PTD4
    190           *       FTM_Ch5-PTA0\PTD5
    191           *       FTM_Ch6-PTA1\PTD6
    192           *       FTM_Ch7-PTA2\PTD7
    193           *      FTM1
    194           *       FTM_Ch0-PTA8\PTA12\PTB0
    195           *       FTM_Ch1-PTA9\PTA13\PTB1
    196           *      FTM2
    197           *       FTM_Ch0-PTA10\PTB18
    198           *       FTM_Ch1-PTA11\PTB19
    199           *      <注:只有MK60F系列含有FTM3>
    200           *      FTM3
    201           *       FTM_Ch0-PTE5\PTD0
    202           *       FTM_Ch1-PTE6\PTD1
    203           *       FTM_Ch2-PTE7\PTD2
    204           *       FTM_Ch3-PTE8\PTD3
    205           *       FTM_Ch4-PTE9\PTC8
    206           *       FTM_Ch5-PTE10\PTC9
    207           *       FTM_Ch6-PTE11\PTC10
    208           *       FTM_Ch7-PTE12\PTC11
    209           *    align--脉冲对齐方式
    210           *      |__ALIGN_LEFT    --左对齐
    211           *      |__ALIGN_RIGHT   --右对齐
    212           *
    213           * 输出:
    214           *    0--配置错误
    215           *    1--配置成功
    216           */

   \                                 In section .text, align 2, keep-with-next
    217          uint8 FTM_PWM_Enable(FTM_Type *ftmx, FtmChnEnum_Type chn, uint32 duty, PortPinsEnum_Type pin, uint8 align)
    218          {
   \                     FTM_PWM_Enable: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0017             MOVS     R7,R2
   \   0000000C   0x4698             MOV      R8,R3
   \   0000000E   0x9C08             LDR      R4,[SP, #+32]
    219            uint32 cv;
    220            vuint32 mod;
    221            
    222            //参数检查
    223            ASSERT( duty <= 10000 );                  //判断占空比
   \   00000010   0xF242 0x7011      MOVW     R0,#+10001
   \   00000014   0x4287             CMP      R7,R0
   \   00000016   0xD304             BCC.N    ??FTM_PWM_Enable_0
   \   00000018   0x21DF             MOVS     R1,#+223
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable9_2
   \   0000001E   0x.... 0x....      BL       assert_failed
    224            
    225            if(!FTM_PinInit(ftmx, chn, pin))
   \                     ??FTM_PWM_Enable_0: (+1)
   \   00000022   0x4642             MOV      R2,R8
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0x0031             MOVS     R1,R6
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_PinInitEP8FTM_Type10FtmChnEnum12PortPinsEnum
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD101             BNE.N    ??FTM_PWM_Enable_1
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xE000             B.N      ??FTM_PWM_Enable_2
   \                     ??FTM_PWM_Enable_1: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \                     ??FTM_PWM_Enable_2: (+1)
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD001             BEQ.N    ??FTM_PWM_Enable_3
    226              return 0;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xE019             B.N      ??FTM_PWM_Enable_4
    227            
    228            //如果是右对齐，100%-占空比
    229            if(align == ALIGN_RIGHT)
   \                     ??FTM_PWM_Enable_3: (+1)
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x2C24             CMP      R4,#+36
   \   00000048   0xD102             BNE.N    ??FTM_PWM_Enable_5
    230            {
    231              duty = 10000 - duty;
   \   0000004A   0xF242 0x7010      MOVW     R0,#+10000
   \   0000004E   0x1BC7             SUBS     R7,R0,R7
    232            }
    233            
    234            //占空比 = (CnV-CNTIN)/(MOD-CNTIN+1)
    235            mod = ftmx->MOD;
   \                     ??FTM_PWM_Enable_5: (+1)
   \   00000050   0x68A8             LDR      R0,[R5, #+8]
   \   00000052   0x9000             STR      R0,[SP, #+0]
    236            cv = (duty*(mod-0+1)+0)/10000;
   \   00000054   0x9800             LDR      R0,[SP, #+0]
   \   00000056   0x1C40             ADDS     R0,R0,#+1
   \   00000058   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000005C   0xF242 0x7110      MOVW     R1,#+10000
   \   00000060   0xFBB0 0xF1F1      UDIV     R1,R0,R1
    237            
    238            // 配置FTM通道控制寄存器 
    239            // 通道模式 MSB:MSA-1X, 通道边缘选择 左对齐 ELSB:ELSA-10
    240            // 通道模式 MSB:MSA-1X, 通道边缘选择 右对齐 ELSB:ELSA-X1
    241            ftmx->CONTROLS[chn].CnSC = align;
   \   00000064   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000066   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000068   0xEB05 0x00C6      ADD      R0,R5,R6, LSL #+3
   \   0000006C   0x60C4             STR      R4,[R0, #+12]
    242            // 配置FTM通道值
    243            ftmx->CONTROLS[chn].CnV  = cv;
   \   0000006E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000070   0xEB05 0x00C6      ADD      R0,R5,R6, LSL #+3
   \   00000074   0x6101             STR      R1,[R0, #+16]
    244            
    245            return 1;
   \   00000076   0x2001             MOVS     R0,#+1
   \                     ??FTM_PWM_Enable_4: (+1)
   \   00000078   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    246          }
    247          
    248          /*
    249           * FTM_PWM_ChangeDuty
    250           * 变更FTM模块PWM模式指定通道的输出占空比
    251           *
    252           * 参数:
    253           *    ftmx--FTMx模块号
    254           *      |__FTM0          --FTM0
    255           *      |__FTM1          --FTM1
    256           *      |__FTM2          --FTM2
    257           *      <注:只有MK60F系列含有FTM3>
    258           *      |__FTM3          --FTM3
    259           *    chn--PWM输出通道
    260           *      <注:只有MK60F系列含有FTM3>
    261           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    262           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    263           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    264           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    265           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    266           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    267           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    268           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    269           *    duty--PWM输出占空比
    270           *      |__0~10000--占空比0.00%~100.00%
    271           *
    272           * 输出:
    273           *    0--配置错误
    274           *    1--配置成功
    275           */

   \                                 In section .text, align 2, keep-with-next
    276          uint8 FTM_PWM_ChangeDuty(FTM_Type *ftmx, FtmChnEnum_Type chn, uint32 duty)
    277          {
   \                     FTM_PWM_ChangeDuty: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    278            uint32 cv;
    279            vuint32 mod;
    280            
    281            //参数检查
    282            ASSERT( duty <= 10000 );                  //判断占空比
   \   0000000A   0xF242 0x7011      MOVW     R0,#+10001
   \   0000000E   0x4286             CMP      R6,R0
   \   00000010   0xD305             BCC.N    ??FTM_PWM_ChangeDuty_0
   \   00000012   0xF44F 0x718D      MOV      R1,#+282
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable9_2
   \   0000001A   0x.... 0x....      BL       assert_failed
    283            //if(duty < 0) duty = 0;      //Warning[Pe186]: pointless comparison of unsigned integer with zero.
    284            
    285            //如果是右对齐，100%-占空比
    286            if(ftmx->CONTROLS[chn].CnSC & FTM_CnSC_ELSA_MASK)
   \                     ??FTM_PWM_ChangeDuty_0: (+1)
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \   00000024   0x68C0             LDR      R0,[R0, #+12]
   \   00000026   0x0740             LSLS     R0,R0,#+29
   \   00000028   0xD502             BPL.N    ??FTM_PWM_ChangeDuty_1
    287            {
    288              duty = 10000 - duty;
   \   0000002A   0xF242 0x7010      MOVW     R0,#+10000
   \   0000002E   0x1B86             SUBS     R6,R0,R6
    289            }
    290            
    291            //占空比 = (CnV-CNTIN)/(MOD-CNTIN+1)
    292            mod = ftmx->MOD;
   \                     ??FTM_PWM_ChangeDuty_1: (+1)
   \   00000030   0x68A0             LDR      R0,[R4, #+8]
   \   00000032   0x9000             STR      R0,[SP, #+0]
    293            cv = (duty*(mod-0+1)+0)/10000;
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xFB00 0xF006      MUL      R0,R0,R6
   \   0000003C   0xF242 0x7110      MOVW     R1,#+10000
   \   00000040   0xFBB0 0xF1F1      UDIV     R1,R0,R1
    294           
    295            // 配置FTM通道值
    296            ftmx->CONTROLS[chn].CnV = cv;
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \   0000004A   0x6101             STR      R1,[R0, #+16]
    297            
    298            return 1;
   \   0000004C   0x2001             MOVS     R0,#+1
   \                     ??FTM_PWM_ChangeDuty_2: (+1)
   \   0000004E   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    299          }
    300          
    301          /*
    302           * FTM_DisableChn
    303           * 禁用FTM模块指定通道的输出、输入
    304           *
    305           * 参数:
    306           *    ftmx--FTMx模块号
    307           *      |__FTM0          --FTM0
    308           *      |__FTM1          --FTM1
    309           *      |__FTM2          --FTM2
    310           *      <注:只有MK60F系列含有FTM3>
    311           *      |__FTM3          --FTM3
    312           *    chn--PWM输出通道
    313           *      <注:只有MK60F系列含有FTM3>
    314           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    315           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    316           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    317           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    318           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    319           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    320           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    321           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    322           *
    323           * 输出:
    324           *    0--配置错误
    325           *    1--配置成功
    326           */

   \                                 In section .text, align 2, keep-with-next
    327          uint8 FTM_DisableChn(FTM_Type *ftmx, FtmChnEnum_Type chn)
    328          {
   \                     FTM_DisableChn: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    329            FTM_PinDeinit(ftmx, chn);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init13FTM_PinDeinitEP8FTM_Type10FtmChnEnum
    330            ftmx->CONTROLS[chn].CnSC = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0xEB04 0x01C5      ADD      R1,R4,R5, LSL #+3
   \   00000018   0x60C8             STR      R0,[R1, #+12]
    331            ftmx->CONTROLS[chn].CnV  = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0xEB04 0x01C5      ADD      R1,R4,R5, LSL #+3
   \   00000022   0x6108             STR      R0,[R1, #+16]
    332            
    333            return 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    334          }
    335          
    336          
    337          
    338          /*
    339           * FTM_IC_Enable
    340           * FTM模块输入捕获模式输出使能，配置输入通道、指定对应的引脚、捕获边缘
    341           *
    342           * 参数:
    343           *    ftmx--FTMx模块号
    344           *      |__FTM0          --FTM0
    345           *      |__FTM1          --FTM1
    346           *      |__FTM2          --FTM2
    347           *      <注:只有MK60F系列含有FTM3>
    348           *      |__FTM3          --FTM3
    349           *    chn--PWM输出通道
    350           *      <注:只有MK60F系列含有FTM3>
    351           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    352           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    353           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    354           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    355           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    356           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    357           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    358           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    359           *    duty--PWM输出占空比
    360           *      |__0~10000--占空比0.00%~100.00%
    361           *    pin--FTMx通道对应的引脚
    362           *      FTM0
    363           *       FTM_Ch0-PTA3\PTC1
    364           *       FTM_Ch1-PTA4\PTC2
    365           *       FTM_Ch2-PTA5\PTC3
    366           *       FTM_Ch3-PTA6\PTC4
    367           *       FTM_Ch4-PTA7\PTD4
    368           *       FTM_Ch5-PTA0\PTD5
    369           *       FTM_Ch6-PTA1\PTD6
    370           *       FTM_Ch7-PTA2\PTD7
    371           *      FTM1
    372           *       FTM_Ch0-PTA8\PTA12\PTB0
    373           *       FTM_Ch1-PTA9\PTA13\PTB1
    374           *      FTM2
    375           *       FTM_Ch0-PTA10\PTB18
    376           *       FTM_Ch1-PTA11\PTB19
    377           *      <注:只有MK60F系列含有FTM3>
    378           *      FTM3
    379           *       FTM_Ch0-PTE5\PTD0
    380           *       FTM_Ch1-PTE6\PTD1
    381           *       FTM_Ch2-PTE7\PTD2
    382           *       FTM_Ch3-PTE8\PTD3
    383           *       FTM_Ch4-PTE9\PTC8
    384           *       FTM_Ch5-PTE10\PTC9
    385           *       FTM_Ch6-PTE11\PTC10
    386           *       FTM_Ch7-PTE12\PTC11
    387           *    capture_edge--捕获边缘设置
    388           *      |__CAPTURE_RI    --上升沿捕获
    389           *      |__CAPTURE_FA    --下降沿捕获
    390           *      |__CAPTURE_RIFA  --上升下降沿捕获
    391           *
    392           * 输出:
    393           *    0--配置错误
    394           *    1--配置成功
    395           */

   \                                 In section .text, align 2, keep-with-next
    396          uint8 FTM_IC_Enable(FTM_Type *ftmx, FtmChnEnum_Type chn, PortPinsEnum_Type pin, uint8 capture_edge)
    397          {
   \                     FTM_IC_Enable: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    398            if(!FTM_PinInit(ftmx, chn, pin))
   \   0000000A   0x0032             MOVS     R2,R6
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_PinInitEP8FTM_Type10FtmChnEnum12PortPinsEnum
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??FTM_IC_Enable_0
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE000             B.N      ??FTM_IC_Enable_1
   \                     ??FTM_IC_Enable_0: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \                     ??FTM_IC_Enable_1: (+1)
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD001             BEQ.N    ??FTM_IC_Enable_2
    399              return 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE041             B.N      ??FTM_IC_Enable_3
    400            
    401            ftmx->CONTROLS[chn].CnSC = 0x00;
   \                     ??FTM_IC_Enable_2: (+1)
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0xEB04 0x01C5      ADD      R1,R4,R5, LSL #+3
   \   00000034   0x60C8             STR      R0,[R1, #+12]
    402            
    403            ftmx->CONTROLS[chn].CnSC |= capture_edge;        
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \   0000003C   0x68C0             LDR      R0,[R0, #+12]
   \   0000003E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000040   0x4338             ORRS     R0,R7,R0
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0xEB04 0x01C5      ADD      R1,R4,R5, LSL #+3
   \   00000048   0x60C8             STR      R0,[R1, #+12]
    404            
    405            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_CHF_MASK);
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \   00000050   0x68C0             LDR      R0,[R0, #+12]
   \   00000052   0xF030 0x0080      BICS     R0,R0,#0x80
   \   00000056   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000058   0xEB04 0x01C5      ADD      R1,R4,R5, LSL #+3
   \   0000005C   0x60C8             STR      R0,[R1, #+12]
    406            ftmx->CONTROLS[chn].CnSC |= FTM_CnSC_CHIE_MASK;         //使能通道捕获输入中断
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \   00000064   0x68C0             LDR      R0,[R0, #+12]
   \   00000066   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000006A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006C   0xEB04 0x01C5      ADD      R1,R4,R5, LSL #+3
   \   00000070   0x60C8             STR      R0,[R1, #+12]
    407            
    408            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_MSB_MASK);
   \   00000072   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000074   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \   00000078   0x68C0             LDR      R0,[R0, #+12]
   \   0000007A   0xF030 0x0020      BICS     R0,R0,#0x20
   \   0000007E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000080   0xEB04 0x01C5      ADD      R1,R4,R5, LSL #+3
   \   00000084   0x60C8             STR      R0,[R1, #+12]
    409            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_MSA_MASK);       //配置成Input capture模式
   \   00000086   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000088   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \   0000008C   0x68C0             LDR      R0,[R0, #+12]
   \   0000008E   0xF030 0x0010      BICS     R0,R0,#0x10
   \   00000092   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000094   0xEB04 0x01C5      ADD      R1,R4,R5, LSL #+3
   \   00000098   0x60C8             STR      R0,[R1, #+12]
    410            
    411            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_DMA_MASK);       //关闭DMA
   \   0000009A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009C   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \   000000A0   0x68C0             LDR      R0,[R0, #+12]
   \   000000A2   0x0840             LSRS     R0,R0,#+1
   \   000000A4   0x0040             LSLS     R0,R0,#+1
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0xEB04 0x01C5      ADD      R1,R4,R5, LSL #+3
   \   000000AC   0x60C8             STR      R0,[R1, #+12]
    412            
    413            return 1;
   \   000000AE   0x2001             MOVS     R0,#+1
   \                     ??FTM_IC_Enable_3: (+1)
   \   000000B0   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    414          }
    415          
    416          /*
    417           * FTM_IsTOF
    418           * 判断FTMx是否产生计数溢出中断标志
    419           * 
    420           * 参数:
    421           *    ftmx--FTMx模块号
    422           *      |__FTM0          --FTM0
    423           *      |__FTM1          --FTM1
    424           *      |__FTM2          --FTM2
    425           *      <注:只有MK60F系列含有FTM3>
    426           *      |__FTM3          --FTM3
    427           *
    428           * 输出:
    429           *    TRUE、FALSE
    430           *
    431           */
    432          __INLINE boolean FTM_IsTOF(FTM_Type *ftmx)
    433          {
    434            return (boolean)((ftmx->SC & FTM_SC_TOF_MASK)>>FTM_SC_TOF_SHIFT);
    435          }
    436          
    437          /*
    438           * FTM_ClearTOF
    439           * 清除FTMx计数器溢出中断标志
    440           * 
    441           * 参数:
    442           *    ftmx--FTMx模块号
    443           *      |__FTM0          --FTM0
    444           *      |__FTM1          --FTM1
    445           *      |__FTM2          --FTM2
    446           *      <注:只有MK60F系列含有FTM3>
    447           *      |__FTM3          --FTM3
    448           *
    449           * 输出:
    450           *    无
    451           *
    452           */
    453          __INLINE void FTM_ClearTOF(FTM_Type *ftmx)
    454          {
    455            ftmx->SC = ftmx->SC & ~FTM_SC_TOF_MASK;
    456          }
    457          
    458          /*
    459           * FTM_IsCHnF
    460           * 判断通道n是否产生中断标志
    461           * 
    462           * 参数:
    463           *    ftmx--FTMx模块号
    464           *      |__FTM0          --FTM0
    465           *      |__FTM1          --FTM1
    466           *      |__FTM2          --FTM2
    467           *      <注:只有MK60F系列含有FTM3>
    468           *      |__FTM3          --FTM3
    469           *    chn--PWM输出通道
    470           *      <注:只有MK60F系列含有FTM3>
    471           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    472           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    473           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    474           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    475           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    476           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    477           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    478           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    479           *
    480           * 输出:
    481           *    TRUE、FALSE
    482           *
    483           */
    484          
    485          
    486          /*
    487           * FTM_ClearCHnF
    488           * 清除通道n中断标志
    489           * 
    490           * 参数:
    491           *    ftmx--FTMx模块号
    492           *      |__FTM0          --FTM0
    493           *      |__FTM1          --FTM1
    494           *      |__FTM2          --FTM2
    495           *      <注:只有MK60F系列含有FTM3>
    496           *      |__FTM3          --FTM3
    497           *    chn--PWM输出通道
    498           *      <注:只有MK60F系列含有FTM3>
    499           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    500           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    501           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    502           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    503           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    504           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    505           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    506           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    507           *
    508           * 输出:
    509           *    无
    510           *
    511           */
    512          
    513          
    514          /*
    515           * FTM_GetChVal
    516           * 获取FTMx通道n捕获的FTMx计数值
    517           * 
    518           * 参数:
    519           *    ftmx--FTMx模块号
    520           *      |__FTM0          --FTM0
    521           *      |__FTM1          --FTM1
    522           *      |__FTM2          --FTM2
    523           *      <注:只有MK60F系列含有FTM3>
    524           *      |__FTM3          --FTM3
    525           *    chn--PWM输出通道
    526           *      <注:只有MK60F系列含有FTM3>
    527           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    528           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    529           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    530           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    531           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    532           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    533           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    534           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    535           *
    536           * 输出:
    537           *    0x1~0xFFFF
    538           *
    539           */
    540          
    541          
    542          /*
    543           * FTM_GetClkDiv
    544           * 获取FTMx时钟分频系数
    545           * 
    546           * 参数:
    547           *    ftmx--FTMx模块号
    548           *      |__FTM0          --FTM0
    549           *      |__FTM1          --FTM1
    550           *      |__FTM2          --FTM2
    551           *      <注:只有MK60F系列含有FTM3>
    552           *      |__FTM3          --FTM3
    553           *
    554           * 输出:
    555           *    1、2、4、8、16、32、64、128
    556           *
    557           */
    558          __INLINE uint8 FTM_GetClkDiv(FTM_Type *ftmx)
    559          {
    560            return 1u<<((ftmx->SC & FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT);    //获得时钟分频系数
    561          }
    562          
    563          /*
    564           * FTM_GetCounter
    565           * 获取FTMx计数器值
    566           * 
    567           * 参数:
    568           *    ftmx--FTMx模块号
    569           *      |__FTM0          --FTM0
    570           *      |__FTM1          --FTM1
    571           *      |__FTM2          --FTM2
    572           *      <注:只有MK60F系列含有FTM3>
    573           *      |__FTM3          --FTM3
    574           *
    575           * 输出:
    576           *    16位整形计数值
    577           *
    578           */
    579          __INLINE uint16 FTM_GetCounter(FTM_Type *ftmx)
    580          {
    581            return ftmx->CNT;        //获取FTMx计数器值
    582          }
    583          
    584          /*
    585           * FTM_ClearCounter
    586           * 清空FTMx计数器
    587           * 
    588           * 参数:
    589           *    ftmx--FTMx模块号
    590           *      |__FTM0          --FTM0
    591           *      |__FTM1          --FTM1
    592           *      |__FTM2          --FTM2
    593           *      <注:只有MK60F系列含有FTM3>
    594           *      |__FTM3          --FTM3
    595           *
    596           * 输出:
    597           *    无
    598           *
    599           */
    600          
    601          
    602          /*
    603           * FTM_EnableIrq
    604           * 使能FTMx中断
    605           * 
    606           * 参数:
    607           *    ftm_init_structure--FTM初始化结构体，
    608           *                        具体定义见FTM_InitTypeDef
    609           *
    610           * 输出:
    611           *    0--配置错误
    612           *    1--配置成功
    613           *
    614           */

   \                                 In section .text, align 2, keep-with-next
    615          uint8 FTM_EnableIrq(FTM_InitTypeDef ftm_init_structure)
    616          {
   \                     FTM_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB538             PUSH     {R3-R5,LR}
    617            uint8 i;
    618            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000004   0x9D04             LDR      R5,[SP, #+16]
    619            
    620            if(ftmx == FTM0)
   \   00000006   0x....             LDR.N    R0,??DataTable9_3  ;; 0x40038000
   \   00000008   0x4285             CMP      R5,R0
   \   0000000A   0xD101             BNE.N    ??FTM_EnableIrq_0
    621              i=0;
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xE010             B.N      ??FTM_EnableIrq_1
    622            else if(ftmx == FTM1)
   \                     ??FTM_EnableIrq_0: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable9_5  ;; 0x40039000
   \   00000012   0x4285             CMP      R5,R0
   \   00000014   0xD101             BNE.N    ??FTM_EnableIrq_2
    623              i=1;
   \   00000016   0x2401             MOVS     R4,#+1
   \   00000018   0xE00B             B.N      ??FTM_EnableIrq_1
    624            else if(ftmx == FTM2)
   \                     ??FTM_EnableIrq_2: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable9_6  ;; 0x400b8000
   \   0000001C   0x4285             CMP      R5,R0
   \   0000001E   0xD101             BNE.N    ??FTM_EnableIrq_3
    625              i=2;
   \   00000020   0x2402             MOVS     R4,#+2
   \   00000022   0xE006             B.N      ??FTM_EnableIrq_1
    626          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    627            else if(ftmx == FTM3)
   \                     ??FTM_EnableIrq_3: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable9_8  ;; 0x400b9000
   \   00000026   0x4285             CMP      R5,R0
   \   00000028   0xD101             BNE.N    ??FTM_EnableIrq_4
    628              i=3;
   \   0000002A   0x2403             MOVS     R4,#+3
   \   0000002C   0xE001             B.N      ??FTM_EnableIrq_1
    629          #endif
    630            else
    631              return 0;
   \                     ??FTM_EnableIrq_4: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xE005             B.N      ??FTM_EnableIrq_5
    632          
    633            enable_irq((IRQn_Type)(FTM0_IRQn + i));
   \                     ??FTM_EnableIrq_1: (+1)
   \   00000032   0xF114 0x003E      ADDS     R0,R4,#+62
   \   00000036   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init16__NVIC_EnableIRQE4IRQn
    634            
    635            return 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \                     ??FTM_EnableIrq_5: (+1)
   \   0000003E   0xBC32             POP      {R1,R4,R5}
   \   00000040   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    636          }
    637          
    638          /*
    639           * FTM_DisableIrq
    640           * 禁用FTMx中断
    641           * 
    642           * 参数:
    643           *    ftm_init_structure--FTM初始化结构体，
    644           *                        具体定义见FTM_InitTypeDef
    645           *
    646           * 输出:
    647           *    0--配置错误
    648           *    1--配置成功
    649           *
    650           */

   \                                 In section .text, align 2, keep-with-next
    651          uint8 FTM_DisableIrq(FTM_InitTypeDef ftm_init_structure)
    652          {
   \                     FTM_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB538             PUSH     {R3-R5,LR}
    653            uint8 i;
    654            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000004   0x9D04             LDR      R5,[SP, #+16]
    655            
    656            if(ftmx == FTM0)
   \   00000006   0x....             LDR.N    R0,??DataTable9_3  ;; 0x40038000
   \   00000008   0x4285             CMP      R5,R0
   \   0000000A   0xD101             BNE.N    ??FTM_DisableIrq_0
    657              i=0;
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xE010             B.N      ??FTM_DisableIrq_1
    658            else if(ftmx == FTM1)
   \                     ??FTM_DisableIrq_0: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable9_5  ;; 0x40039000
   \   00000012   0x4285             CMP      R5,R0
   \   00000014   0xD101             BNE.N    ??FTM_DisableIrq_2
    659              i=1;
   \   00000016   0x2401             MOVS     R4,#+1
   \   00000018   0xE00B             B.N      ??FTM_DisableIrq_1
    660            else if(ftmx == FTM2)
   \                     ??FTM_DisableIrq_2: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable9_6  ;; 0x400b8000
   \   0000001C   0x4285             CMP      R5,R0
   \   0000001E   0xD101             BNE.N    ??FTM_DisableIrq_3
    661              i=2;
   \   00000020   0x2402             MOVS     R4,#+2
   \   00000022   0xE006             B.N      ??FTM_DisableIrq_1
    662          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    663            else if(ftmx == FTM3)
   \                     ??FTM_DisableIrq_3: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable9_8  ;; 0x400b9000
   \   00000026   0x4285             CMP      R5,R0
   \   00000028   0xD101             BNE.N    ??FTM_DisableIrq_4
    664              i=3;
   \   0000002A   0x2403             MOVS     R4,#+3
   \   0000002C   0xE001             B.N      ??FTM_DisableIrq_1
    665          #endif
    666            else
    667              return 0;
   \                     ??FTM_DisableIrq_4: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xE005             B.N      ??FTM_DisableIrq_5
    668          
    669            disable_irq((IRQn_Type)(FTM0_IRQn + i));
   \                     ??FTM_DisableIrq_1: (+1)
   \   00000032   0xF114 0x003E      ADDS     R0,R4,#+62
   \   00000036   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init17__NVIC_DisableIRQE4IRQn
    670            
    671            return 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \                     ??FTM_DisableIrq_5: (+1)
   \   0000003E   0xBC32             POP      {R1,R4,R5}
   \   00000040   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    672          }
    673          
    674          /*
    675           * FTM_QD_Enable
    676           * FTM模块正交解码模式输入使能，配置输入通道PHA和PHB
    677           *
    678           * 参数:
    679           *    ftmx--FTMx模块号
    680           *      |__FTM1          --FTM1
    681           *      |__FTM2          --FTM2
    682           *    pha--PHA输入通道引脚
    683           *      FTM1
    684           *        PTA8\PTA12\PTB0
    685           *      FTM2
    686           *        PTA10\PTB18
    687           *    phb--PHB输入通道引脚
    688           *      FTM1
    689           *        PTA9\PTA13\PTB1
    690           *      FTM2
    691           *        PTA11\PTB19
    692           *
    693           * 输出:
    694           *    0--配置错误
    695           *    1--配置成功
    696           */

   \                                 In section .text, align 2, keep-with-next
    697          uint8 FTM_QD_Enable(FTM_Type *ftmx, PortPinsEnum_Type pha, PortPinsEnum_Type phb)
    698          {
   \                     FTM_QD_Enable: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    699            if(!FTM_PinInit(ftmx, FTM_PhA, pha))
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x2108             MOVS     R1,#+8
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_PinInitEP8FTM_Type10FtmChnEnum12PortPinsEnum
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD101             BNE.N    ??FTM_QD_Enable_0
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE000             B.N      ??FTM_QD_Enable_1
   \                     ??FTM_QD_Enable_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \                     ??FTM_QD_Enable_1: (+1)
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD001             BEQ.N    ??FTM_QD_Enable_2
    700              return 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE010             B.N      ??FTM_QD_Enable_3
    701            if(!FTM_PinInit(ftmx, FTM_PhB, phb))
   \                     ??FTM_QD_Enable_2: (+1)
   \   00000028   0x0032             MOVS     R2,R6
   \   0000002A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002C   0x2109             MOVS     R1,#+9
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_PinInitEP8FTM_Type10FtmChnEnum12PortPinsEnum
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD101             BNE.N    ??FTM_QD_Enable_4
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xE000             B.N      ??FTM_QD_Enable_5
   \                     ??FTM_QD_Enable_4: (+1)
   \   0000003C   0x2000             MOVS     R0,#+0
   \                     ??FTM_QD_Enable_5: (+1)
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD001             BEQ.N    ??FTM_QD_Enable_6
    702              return 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xE000             B.N      ??FTM_QD_Enable_3
    703            
    704            return 1;
   \                     ??FTM_QD_Enable_6: (+1)
   \   00000048   0x2001             MOVS     R0,#+1
   \                     ??FTM_QD_Enable_3: (+1)
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
    705          }
    706          
    707          /*
    708           * FTM_QD_Disable
    709           * FTM模块正交解码模式输入禁用
    710           *
    711           * 参数:
    712           *    ftmx--FTMx模块号
    713           *      |__FTM1          --FTM1
    714           *      |__FTM2          --FTM2
    715           *
    716           * 输出:
    717           *    0--配置错误
    718           *    1--配置成功
    719           */

   \                                 In section .text, align 2, keep-with-next
    720          uint8 FTM_QD_Disable(FTM_Type *ftmx)
    721          {
   \                     FTM_QD_Disable: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    722            if(!FTM_PinDeinit(ftmx, FTM_PhA))
   \   00000004   0x2108             MOVS     R1,#+8
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init13FTM_PinDeinitEP8FTM_Type10FtmChnEnum
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??FTM_QD_Disable_0
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE000             B.N      ??FTM_QD_Disable_1
   \                     ??FTM_QD_Disable_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??FTM_QD_Disable_1: (+1)
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD001             BEQ.N    ??FTM_QD_Disable_2
    723              return 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE00E             B.N      ??FTM_QD_Disable_3
    724            if(!FTM_PinDeinit(ftmx, FTM_PhB))
   \                     ??FTM_QD_Disable_2: (+1)
   \   00000020   0x2109             MOVS     R1,#+9
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init13FTM_PinDeinitEP8FTM_Type10FtmChnEnum
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD101             BNE.N    ??FTM_QD_Disable_4
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xE000             B.N      ??FTM_QD_Disable_5
   \                     ??FTM_QD_Disable_4: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \                     ??FTM_QD_Disable_5: (+1)
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD001             BEQ.N    ??FTM_QD_Disable_6
    725              return 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE000             B.N      ??FTM_QD_Disable_3
    726            
    727            return 1;
   \                     ??FTM_QD_Disable_6: (+1)
   \   0000003C   0x2001             MOVS     R0,#+1
   \                     ??FTM_QD_Disable_3: (+1)
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    728          }
    729          
    730          /*
    731           * FTM_PWM_Init
    732           * FTM模块PWM模式初始化，内部调用
    733           */

   \                                 In section .text, align 2, keep-with-next
    734          static uint8 FTM_PWM_Init(FTM_InitTypeDef ftm_init_structure)
    735          {
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init12FTM_PWM_InitE15FTM_InitTypeDef: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    736            uint32 bus_clk_hz;
    737            uint32 mod, mod2;
    738            uint8 ps;
    739            uint32 freq = ftm_init_structure.FTM_PwmFreq;
   \   00000006   0x9C08             LDR      R4,[SP, #+32]
    740            uint32 dt_en = ftm_init_structure.FTM_PwmDeadtimeCfg;
   \   00000008   0x9D09             LDR      R5,[SP, #+36]
    741            uint8 dt_div = ftm_init_structure.FTM_PwmDeadtimeDiv;
   \   0000000A   0xF89D 0x6028      LDRB     R6,[SP, #+40]
    742            uint8 dt_val = ftm_init_structure.FTM_PwmDeadtimeVal;
   \   0000000E   0xF89D 0x7029      LDRB     R7,[SP, #+41]
    743            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000012   0xF8DD 0x8018      LDR      R8,[SP, #+24]
    744            
    745            //参数检查
    746            ASSERT( freq );                  //判断频率
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0xD104             BNE.N    ??FTM_PWM_Init_0
   \   0000001A   0xF240 0x21EA      MOVW     R1,#+746
   \   0000001E   0x....             LDR.N    R0,??DataTable9_2
   \   00000020   0x.... 0x....      BL       assert_failed
    747            ASSERT( dt_val<=63 );            //判断死区插入值
   \                     ??FTM_PWM_Init_0: (+1)
   \   00000024   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000026   0x2F40             CMP      R7,#+64
   \   00000028   0xDB04             BLT.N    ??FTM_PWM_Init_1
   \   0000002A   0xF240 0x21EB      MOVW     R1,#+747
   \   0000002E   0x....             LDR.N    R0,??DataTable9_2
   \   00000030   0x.... 0x....      BL       assert_failed
    748            
    749            bus_clk_hz = g_bus_clock;
   \                     ??FTM_PWM_Init_1: (+1)
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000038   0x6801             LDR      R1,[R0, #+0]
    750            
    751            if(freq>bus_clk_hz) return 0;
   \   0000003A   0x42A1             CMP      R1,R4
   \   0000003C   0xD201             BCS.N    ??FTM_PWM_Init_2
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE079             B.N      ??FTM_PWM_Init_3
    752            
    753            if((mod=bus_clk_hz/(freq*128)) < 0xFFFFu)
   \                     ??FTM_PWM_Init_2: (+1)
   \   00000042   0x2080             MOVS     R0,#+128
   \   00000044   0xFB00 0xF004      MUL      R0,R0,R4
   \   00000048   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   0000004C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000050   0x4282             CMP      R2,R0
   \   00000052   0xD26F             BCS.N    ??FTM_PWM_Init_4
    754            {
    755              ps = 7;
   \   00000054   0x2307             MOVS     R3,#+7
    756              mod2=mod;
    757              if((mod=bus_clk_hz/(freq*64)) < 0xFFFFu)
   \   00000056   0x2040             MOVS     R0,#+64
   \   00000058   0xFB00 0xF004      MUL      R0,R0,R4
   \   0000005C   0xFBB1 0xFCF0      UDIV     R12,R1,R0
   \   00000060   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000064   0x4584             CMP      R12,R0
   \   00000066   0xD243             BCS.N    ??FTM_PWM_Init_5
    758              {
    759                ps = 6;  
   \   00000068   0x2006             MOVS     R0,#+6
   \   0000006A   0x0003             MOVS     R3,R0
    760                mod2=mod;  
   \   0000006C   0x4662             MOV      R2,R12
    761                if((mod=bus_clk_hz/(freq*32)) < 0xFFFFu)
   \   0000006E   0x0160             LSLS     R0,R4,#+5
   \   00000070   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   00000074   0x4684             MOV      R12,R0
   \   00000076   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000007A   0x4584             CMP      R12,R0
   \   0000007C   0xD238             BCS.N    ??FTM_PWM_Init_5
    762                {
    763                  ps = 5;  
   \   0000007E   0x2005             MOVS     R0,#+5
   \   00000080   0x0003             MOVS     R3,R0
    764                  mod2=mod;
   \   00000082   0x4662             MOV      R2,R12
    765                  if((mod=bus_clk_hz/(freq*16)) < 0xFFFFu)
   \   00000084   0x0120             LSLS     R0,R4,#+4
   \   00000086   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   0000008A   0x4684             MOV      R12,R0
   \   0000008C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000090   0x4584             CMP      R12,R0
   \   00000092   0xD22D             BCS.N    ??FTM_PWM_Init_5
    766                  {
    767                    ps = 4;  
   \   00000094   0x2004             MOVS     R0,#+4
   \   00000096   0x0003             MOVS     R3,R0
    768                    mod2=mod;   
   \   00000098   0x4662             MOV      R2,R12
    769                    if((mod=bus_clk_hz/(freq*8)) < 0xFFFFu)
   \   0000009A   0x00E0             LSLS     R0,R4,#+3
   \   0000009C   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   000000A0   0x4684             MOV      R12,R0
   \   000000A2   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000A6   0x4584             CMP      R12,R0
   \   000000A8   0xD222             BCS.N    ??FTM_PWM_Init_5
    770                    {
    771                      ps = 3;
   \   000000AA   0x2003             MOVS     R0,#+3
   \   000000AC   0x0003             MOVS     R3,R0
    772                      mod2=mod;
   \   000000AE   0x4662             MOV      R2,R12
    773                      if((mod=bus_clk_hz/(freq*4)) < 0xFFFFu)
   \   000000B0   0x00A0             LSLS     R0,R4,#+2
   \   000000B2   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   000000B6   0x4684             MOV      R12,R0
   \   000000B8   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000BC   0x4584             CMP      R12,R0
   \   000000BE   0xD217             BCS.N    ??FTM_PWM_Init_5
    774                      {
    775                        ps = 2;
   \   000000C0   0x2002             MOVS     R0,#+2
   \   000000C2   0x0003             MOVS     R3,R0
    776                        mod2=mod;
   \   000000C4   0x4662             MOV      R2,R12
    777                        if((mod=bus_clk_hz/(freq*2)) < 0xFFFFu)
   \   000000C6   0x0060             LSLS     R0,R4,#+1
   \   000000C8   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   000000CC   0x4684             MOV      R12,R0
   \   000000CE   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000D2   0x4584             CMP      R12,R0
   \   000000D4   0xD20C             BCS.N    ??FTM_PWM_Init_5
    778                        {
    779                          ps = 1;
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0x0003             MOVS     R3,R0
    780                          mod2=mod;
   \   000000DA   0x4662             MOV      R2,R12
    781                          if((mod=bus_clk_hz/(freq*1)) < 0xFFFFu)
   \   000000DC   0xFBB1 0xF0F4      UDIV     R0,R1,R4
   \   000000E0   0x4684             MOV      R12,R0
   \   000000E2   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000E6   0x4584             CMP      R12,R0
   \   000000E8   0xD202             BCS.N    ??FTM_PWM_Init_5
    782                          {
    783                            ps = 0;
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x0003             MOVS     R3,R0
    784                            mod2=mod;
   \   000000EE   0x4662             MOV      R2,R12
    785                          }
    786                        }
    787                      }
    788                    }
    789                  }  
    790                }
    791              }
    792            }
    793            else
    794            {
    795              return 0;
    796            }
    797            
    798            ftmx->SC = 0;
   \                     ??FTM_PWM_Init_5: (+1)
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0xF8C8 0x0000      STR      R0,[R8, #+0]
    799            
    800            // 设置PWM周期及占空比
    801            //    PWM周期 = (MOD-CNTIN+1)*FTM时钟周期 :
    802            // 配置FTM计数初始值
    803            ftmx->CNT = 0;
   \   000000F6   0x2000             MOVS     R0,#+0
   \   000000F8   0xF8C8 0x0004      STR      R0,[R8, #+4]
    804            ftmx->CNTIN = 0;
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0xF8C8 0x004C      STR      R0,[R8, #+76]
    805            // 配置FTM计数MOD值
    806            ftmx->MOD = mod2;
   \   00000102   0xF8C8 0x2008      STR      R2,[R8, #+8]
    807            
    808            ftmx->DEADTIME = FTM_DEADTIME_DTPS(dt_div) | FTM_DEADTIME_DTVAL(dt_val);
   \   00000106   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000108   0xEA5F 0x1E86      LSLS     LR,R6,#+6
   \   0000010C   0xF01E 0x0EC0      ANDS     LR,LR,#0xC0
   \   00000110   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000112   0xF017 0x003F      ANDS     R0,R7,#0x3F
   \   00000116   0xEA50 0x0E0E      ORRS     LR,R0,LR
   \   0000011A   0xF8C8 0xE068      STR      LR,[R8, #+104]
    809            ftmx->COMBINE = dt_en;        //使能死区
   \   0000011E   0xF8C8 0x5064      STR      R5,[R8, #+100]
    810            
    811            // 配置FTM控制寄存器
    812            // 禁用中断, 加计数模式, 时钟源:System clock（Bus Clk）, 分频系数:8
    813            // 假设SysClk = 50MHz, SC_PS=3, FTM Clk = 50MHz/2^3 = 6.25MHz
    814            ftmx->SC = FTM_SC_CLKS(1)|FTM_SC_PS(ps);
   \   00000122   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000124   0xF013 0x0007      ANDS     R0,R3,#0x7
   \   00000128   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000012C   0xF8C8 0x0000      STR      R0,[R8, #+0]
    815            
    816            return 1;
   \   00000130   0x2001             MOVS     R0,#+1
   \   00000132   0xE000             B.N      ??FTM_PWM_Init_3
   \                     ??FTM_PWM_Init_4: (+1)
   \   00000134   0x2000             MOVS     R0,#+0
   \                     ??FTM_PWM_Init_3: (+1)
   \   00000136   0xE8BD 0x01F0      POP      {R4-R8}
   \   0000013A   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    817          }
    818          
    819          /*
    820           * FTM_IC_Init
    821           * FTM模块输入捕获模式初始化，内部调用
    822           */

   \                                 In section .text, align 2, keep-with-next
    823          static uint8 FTM_IC_Init(FTM_InitTypeDef ftm_init_structure)
    824          {
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_IC_InitE15FTM_InitTypeDef: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB5F8             PUSH     {R3-R7,LR}
    825            uint8 i;
    826            uint8 ps = ftm_init_structure.FTM_ClkDiv;
   \   00000004   0xF89D 0x502B      LDRB     R5,[SP, #+43]
    827            FTM_ISR_CALLBACK isr_func = ftm_init_structure.FTM_Isr;
   \   00000008   0x9E0C             LDR      R6,[SP, #+48]
    828            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   0000000A   0x9F06             LDR      R7,[SP, #+24]
    829            
    830            //参数检查
    831            ASSERT( ps <= 7);             //时钟分频系数
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x2D08             CMP      R5,#+8
   \   00000010   0xDB04             BLT.N    ??FTM_IC_Init_0
   \   00000012   0xF240 0x313F      MOVW     R1,#+831
   \   00000016   0x....             LDR.N    R0,??DataTable9_2
   \   00000018   0x.... 0x....      BL       assert_failed
    832            
    833            ftmx->CONF=FTM_CONF_BDMMODE(0x3);
   \                     ??FTM_IC_Init_0: (+1)
   \   0000001C   0x20C0             MOVS     R0,#+192
   \   0000001E   0xF8C7 0x0084      STR      R0,[R7, #+132]
    834            
    835            ftmx->SC = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x6038             STR      R0,[R7, #+0]
    836            
    837            ftmx->CNT = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x6078             STR      R0,[R7, #+4]
    838            ftmx->CNTIN = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x64F8             STR      R0,[R7, #+76]
    839            ftmx->MOD = 0;                           
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x60B8             STR      R0,[R7, #+8]
    840            ftmx->QDCTRL = (~FTM_QDCTRL_QUADEN_MASK); //关闭正交解码
   \   00000032   0xF07F 0x0001      MVNS     R0,#+1
   \   00000036   0xF8C7 0x0080      STR      R0,[R7, #+128]
    841            ftmx->FILTER = 0x00;                      //关过虑器
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x67B8             STR      R0,[R7, #+120]
    842            
    843            // 配置FTM控制寄存器
    844            // 将FTM Counter配置成Free Counter
    845            // 禁用中断, 加计数模式, 时钟源:System clock（Bus Clk）, 分频系数:PS
    846            // 假设SysClk = 50MHz, SC_PS=3, FTM Clk = 50MHz/2^3 = 6.25MHz
    847            ftmx->SC |= FTM_SC_CLKS(1)|FTM_SC_PS(ps);
   \   0000003E   0x6838             LDR      R0,[R7, #+0]
   \   00000040   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000042   0xF015 0x0107      ANDS     R1,R5,#0x7
   \   00000046   0xF051 0x0108      ORRS     R1,R1,#0x8
   \   0000004A   0x4308             ORRS     R0,R1,R0
   \   0000004C   0x6038             STR      R0,[R7, #+0]
    848            //ftmx->SC |= FTM_SC_TOIE_MASK;             //使能计数溢出中断
    849            ftmx->SC &= (~FTM_SC_CPWMS_MASK);         //FTM加计数
   \   0000004E   0x6838             LDR      R0,[R7, #+0]
   \   00000050   0xF030 0x0020      BICS     R0,R0,#0x20
   \   00000054   0x6038             STR      R0,[R7, #+0]
    850          
    851            //设置中断函数入口地址并开启中断
    852            if(isr_func!=NULL)
   \   00000056   0x0030             MOVS     R0,R6
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD01D             BEQ.N    ??FTM_IC_Init_1
    853            {
    854              if(ftmx == FTM0)
   \   0000005C   0x....             LDR.N    R0,??DataTable9_3  ;; 0x40038000
   \   0000005E   0x4287             CMP      R7,R0
   \   00000060   0xD102             BNE.N    ??FTM_IC_Init_2
    855                i=0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x0004             MOVS     R4,R0
   \   00000066   0xE013             B.N      ??FTM_IC_Init_3
    856              else if(ftmx == FTM1)
   \                     ??FTM_IC_Init_2: (+1)
   \   00000068   0x....             LDR.N    R0,??DataTable9_5  ;; 0x40039000
   \   0000006A   0x4287             CMP      R7,R0
   \   0000006C   0xD102             BNE.N    ??FTM_IC_Init_4
    857                i=1;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x0004             MOVS     R4,R0
   \   00000072   0xE00D             B.N      ??FTM_IC_Init_3
    858              else if(ftmx == FTM2)
   \                     ??FTM_IC_Init_4: (+1)
   \   00000074   0x....             LDR.N    R0,??DataTable9_6  ;; 0x400b8000
   \   00000076   0x4287             CMP      R7,R0
   \   00000078   0xD102             BNE.N    ??FTM_IC_Init_5
    859                i=2;
   \   0000007A   0x2002             MOVS     R0,#+2
   \   0000007C   0x0004             MOVS     R4,R0
   \   0000007E   0xE007             B.N      ??FTM_IC_Init_3
    860          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    861              else if(ftmx == FTM3)
   \                     ??FTM_IC_Init_5: (+1)
   \   00000080   0x....             LDR.N    R0,??DataTable9_8  ;; 0x400b9000
   \   00000082   0x4287             CMP      R7,R0
   \   00000084   0xD102             BNE.N    ??FTM_IC_Init_6
    862                i=3;
   \   00000086   0x2003             MOVS     R0,#+3
   \   00000088   0x0004             MOVS     R4,R0
   \   0000008A   0xE001             B.N      ??FTM_IC_Init_3
    863          #endif   
    864              else
    865                return 0;
   \                     ??FTM_IC_Init_6: (+1)
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xE004             B.N      ??FTM_IC_Init_7
    866              FTM_ISR[i] = isr_func;
   \                     ??FTM_IC_Init_3: (+1)
   \   00000090   0x....             LDR.N    R0,??DataTable9_9
   \   00000092   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000094   0xF840 0x6024      STR      R6,[R0, R4, LSL #+2]
    867            }
    868          
    869            return 1;
   \                     ??FTM_IC_Init_1: (+1)
   \   00000098   0x2001             MOVS     R0,#+1
   \                     ??FTM_IC_Init_7: (+1)
   \   0000009A   0xBCF2             POP      {R1,R4-R7}
   \   0000009C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    870          }
    871          
    872          /*
    873           * FTM_PinInit
    874           * 初始化通道n指定引脚的FTM复用功能，内部调用
    875           */

   \                                 In section .text, align 2, keep-with-next
    876          static uint8 FTM_PinInit(FTM_Type *ftmx, FtmChnEnum_Type chn, PortPinsEnum_Type pin)
    877          { 
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_PinInitEP8FTM_Type10FtmChnEnum12PortPinsEnum: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0003             MOVS     R3,R0
    878            //根据ftmx使能相应pin的ftm功能
    879            if(ftmx == FTM0)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x40038000
   \   00000008   0x4283             CMP      R3,R0
   \   0000000A   0xF040 0x810D      BNE.W    ??FTM_PinInit_0
    880            {
    881              switch(chn)
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD00F             BEQ.N    ??FTM_PinInit_1
   \   00000014   0x2902             CMP      R1,#+2
   \   00000016   0xD04B             BEQ.N    ??FTM_PinInit_2
   \   00000018   0xD32B             BCC.N    ??FTM_PinInit_3
   \   0000001A   0x2904             CMP      R1,#+4
   \   0000001C   0xF000 0x8086      BEQ.W    ??FTM_PinInit_4
   \   00000020   0xD365             BCC.N    ??FTM_PinInit_5
   \   00000022   0x2906             CMP      R1,#+6
   \   00000024   0xF000 0x80C0      BEQ.W    ??FTM_PinInit_6
   \   00000028   0xF0C0 0x809F      BCC.W    ??FTM_PinInit_7
   \   0000002C   0x2907             CMP      R1,#+7
   \   0000002E   0xF000 0x80DA      BEQ.W    ??FTM_PinInit_8
   \   00000032   0xE0F7             B.N      ??FTM_PinInit_9
    882              {
    883              case FTM_Ch0:
    884                if(pin == PTA3)
   \                     ??FTM_PinInit_1: (+1)
   \   00000034   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000036   0x2A03             CMP      R2,#+3
   \   00000038   0xD10A             BNE.N    ??FTM_PinInit_10
    885                  PORTA->PCR[3] = PORTA->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x4004900c
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000044   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000048   0x.... 0x....      LDR.W    R4,??DataTable10_2  ;; 0x4004900c
   \   0000004C   0x6020             STR      R0,[R4, #+0]
   \   0000004E   0xE00F             B.N      ??FTM_PinInit_11
    886                else if(pin == PTC1)
   \                     ??FTM_PinInit_10: (+1)
   \   00000050   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000052   0x2A3D             CMP      R2,#+61
   \   00000054   0xD10A             BNE.N    ??FTM_PinInit_12
    887                  PORTC->PCR[1] = PORTC->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x4004b004
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000060   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000064   0x.... 0x....      LDR.W    R4,??DataTable10_3  ;; 0x4004b004
   \   00000068   0x6020             STR      R0,[R4, #+0]
   \   0000006A   0xE001             B.N      ??FTM_PinInit_11
    888                else
    889                  return 0;
   \                     ??FTM_PinInit_12: (+1)
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xE340             B.N      ??FTM_PinInit_13
    890                break;
   \                     ??FTM_PinInit_11: (+1)
   \   00000070   0xE33E             B.N      ??FTM_PinInit_14
    891              case FTM_Ch1:
    892                if(pin == PTA4)
   \                     ??FTM_PinInit_3: (+1)
   \   00000072   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000074   0x2A04             CMP      R2,#+4
   \   00000076   0xD10A             BNE.N    ??FTM_PinInit_15
    893                  PORTA->PCR[4] = PORTA->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40049010
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000082   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000086   0x.... 0x....      LDR.W    R4,??DataTable10_4  ;; 0x40049010
   \   0000008A   0x6020             STR      R0,[R4, #+0]
   \   0000008C   0xE00F             B.N      ??FTM_PinInit_16
    894                else if(pin == PTC2)
   \                     ??FTM_PinInit_15: (+1)
   \   0000008E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000090   0x2A3E             CMP      R2,#+62
   \   00000092   0xD10A             BNE.N    ??FTM_PinInit_17
    895                  PORTC->PCR[2] = PORTC->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x4004b008
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000009E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000000A2   0x.... 0x....      LDR.W    R4,??DataTable10_5  ;; 0x4004b008
   \   000000A6   0x6020             STR      R0,[R4, #+0]
   \   000000A8   0xE001             B.N      ??FTM_PinInit_16
    896                else
    897                  return 0;
   \                     ??FTM_PinInit_17: (+1)
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0xE321             B.N      ??FTM_PinInit_13
    898                break;
   \                     ??FTM_PinInit_16: (+1)
   \   000000AE   0xE31F             B.N      ??FTM_PinInit_14
    899              case FTM_Ch2:
    900                if(pin == PTA5)
   \                     ??FTM_PinInit_2: (+1)
   \   000000B0   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000B2   0x2A05             CMP      R2,#+5
   \   000000B4   0xD10A             BNE.N    ??FTM_PinInit_18
    901                  PORTA->PCR[5] = PORTA->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40049014
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000000C0   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000000C4   0x.... 0x....      LDR.W    R4,??DataTable10_6  ;; 0x40049014
   \   000000C8   0x6020             STR      R0,[R4, #+0]
   \   000000CA   0xE00F             B.N      ??FTM_PinInit_19
    902                else if(pin == PTC3)
   \                     ??FTM_PinInit_18: (+1)
   \   000000CC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000CE   0x2A3F             CMP      R2,#+63
   \   000000D0   0xD10A             BNE.N    ??FTM_PinInit_20
    903                  PORTC->PCR[3] = PORTC->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x4004b00c
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000000DC   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000000E0   0x.... 0x....      LDR.W    R4,??DataTable10_7  ;; 0x4004b00c
   \   000000E4   0x6020             STR      R0,[R4, #+0]
   \   000000E6   0xE001             B.N      ??FTM_PinInit_19
    904                else
    905                  return 0;
   \                     ??FTM_PinInit_20: (+1)
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0xE302             B.N      ??FTM_PinInit_13
    906                break;
   \                     ??FTM_PinInit_19: (+1)
   \   000000EC   0xE300             B.N      ??FTM_PinInit_14
    907              case FTM_Ch3:
    908                if(pin == PTA6)
   \                     ??FTM_PinInit_5: (+1)
   \   000000EE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000F0   0x2A06             CMP      R2,#+6
   \   000000F2   0xD10A             BNE.N    ??FTM_PinInit_21
    909                  PORTA->PCR[6] = PORTA->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0x40049018
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000000FE   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000102   0x.... 0x....      LDR.W    R4,??DataTable10_8  ;; 0x40049018
   \   00000106   0x6020             STR      R0,[R4, #+0]
   \   00000108   0xE00F             B.N      ??FTM_PinInit_22
    910                else if(pin == PTC4)
   \                     ??FTM_PinInit_21: (+1)
   \   0000010A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000010C   0x2A40             CMP      R2,#+64
   \   0000010E   0xD10A             BNE.N    ??FTM_PinInit_23
    911                  PORTC->PCR[4] = PORTC->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x4004b010
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000011A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000011E   0x.... 0x....      LDR.W    R4,??DataTable10_9  ;; 0x4004b010
   \   00000122   0x6020             STR      R0,[R4, #+0]
   \   00000124   0xE001             B.N      ??FTM_PinInit_22
    912                else
    913                  return 0;
   \                     ??FTM_PinInit_23: (+1)
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0xE2E3             B.N      ??FTM_PinInit_13
    914                break;
   \                     ??FTM_PinInit_22: (+1)
   \   0000012A   0xE2E1             B.N      ??FTM_PinInit_14
    915              case FTM_Ch4:
    916                if(pin == PTA7)
   \                     ??FTM_PinInit_4: (+1)
   \   0000012C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000012E   0x2A07             CMP      R2,#+7
   \   00000130   0xD10A             BNE.N    ??FTM_PinInit_24
    917                  PORTA->PCR[7] = PORTA->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x4004901c
   \   00000136   0x6800             LDR      R0,[R0, #+0]
   \   00000138   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000013C   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000140   0x.... 0x....      LDR.W    R4,??DataTable10_10  ;; 0x4004901c
   \   00000144   0x6020             STR      R0,[R4, #+0]
   \   00000146   0xE00F             B.N      ??FTM_PinInit_25
    918                else if(pin == PTD4)
   \                     ??FTM_PinInit_24: (+1)
   \   00000148   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000014A   0x2A60             CMP      R2,#+96
   \   0000014C   0xD10A             BNE.N    ??FTM_PinInit_26
    919                  PORTD->PCR[4] = PORTD->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x4004c010
   \   00000152   0x6800             LDR      R0,[R0, #+0]
   \   00000154   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000158   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000015C   0x.... 0x....      LDR.W    R4,??DataTable10_11  ;; 0x4004c010
   \   00000160   0x6020             STR      R0,[R4, #+0]
   \   00000162   0xE001             B.N      ??FTM_PinInit_25
    920                else
    921                  return 0;
   \                     ??FTM_PinInit_26: (+1)
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0xE2C4             B.N      ??FTM_PinInit_13
    922                break;
   \                     ??FTM_PinInit_25: (+1)
   \   00000168   0xE2C2             B.N      ??FTM_PinInit_14
    923              case FTM_Ch5:
    924                if(pin == PTA0)
   \                     ??FTM_PinInit_7: (+1)
   \   0000016A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000016C   0x2A00             CMP      R2,#+0
   \   0000016E   0xD10A             BNE.N    ??FTM_PinInit_27
    925                  PORTA->PCR[0] = PORTA->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable10_12  ;; 0x40049000
   \   00000174   0x6800             LDR      R0,[R0, #+0]
   \   00000176   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000017A   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000017E   0x.... 0x....      LDR.W    R4,??DataTable10_12  ;; 0x40049000
   \   00000182   0x6020             STR      R0,[R4, #+0]
   \   00000184   0xE00F             B.N      ??FTM_PinInit_28
    926                else if(pin == PTD5)
   \                     ??FTM_PinInit_27: (+1)
   \   00000186   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000188   0x2A61             CMP      R2,#+97
   \   0000018A   0xD10A             BNE.N    ??FTM_PinInit_29
    927                  PORTD->PCR[5] = PORTD->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   0000018C   0x.... 0x....      LDR.W    R0,??DataTable10_13  ;; 0x4004c014
   \   00000190   0x6800             LDR      R0,[R0, #+0]
   \   00000192   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000196   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000019A   0x.... 0x....      LDR.W    R4,??DataTable10_13  ;; 0x4004c014
   \   0000019E   0x6020             STR      R0,[R4, #+0]
   \   000001A0   0xE001             B.N      ??FTM_PinInit_28
    928                else
    929                  return 0;
   \                     ??FTM_PinInit_29: (+1)
   \   000001A2   0x2000             MOVS     R0,#+0
   \   000001A4   0xE2A5             B.N      ??FTM_PinInit_13
    930                break;
   \                     ??FTM_PinInit_28: (+1)
   \   000001A6   0xE2A3             B.N      ??FTM_PinInit_14
    931              case FTM_Ch6:
    932                if(pin == PTA1)
   \                     ??FTM_PinInit_6: (+1)
   \   000001A8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001AA   0x2A01             CMP      R2,#+1
   \   000001AC   0xD10A             BNE.N    ??FTM_PinInit_30
    933                  PORTA->PCR[1] = PORTA->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable10_14  ;; 0x40049004
   \   000001B2   0x6800             LDR      R0,[R0, #+0]
   \   000001B4   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000001B8   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000001BC   0x.... 0x....      LDR.W    R4,??DataTable10_14  ;; 0x40049004
   \   000001C0   0x6020             STR      R0,[R4, #+0]
   \   000001C2   0xE00F             B.N      ??FTM_PinInit_31
    934                else if(pin == PTD6)
   \                     ??FTM_PinInit_30: (+1)
   \   000001C4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001C6   0x2A62             CMP      R2,#+98
   \   000001C8   0xD10A             BNE.N    ??FTM_PinInit_32
    935                  PORTD->PCR[6] = PORTD->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable10_15  ;; 0x4004c018
   \   000001CE   0x6800             LDR      R0,[R0, #+0]
   \   000001D0   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000001D4   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001D8   0x.... 0x....      LDR.W    R4,??DataTable10_15  ;; 0x4004c018
   \   000001DC   0x6020             STR      R0,[R4, #+0]
   \   000001DE   0xE001             B.N      ??FTM_PinInit_31
    936                else
    937                  return 0;
   \                     ??FTM_PinInit_32: (+1)
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0xE286             B.N      ??FTM_PinInit_13
    938                break;
   \                     ??FTM_PinInit_31: (+1)
   \   000001E4   0xE284             B.N      ??FTM_PinInit_14
    939              case FTM_Ch7:
    940                if(pin == PTA2)
   \                     ??FTM_PinInit_8: (+1)
   \   000001E6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001E8   0x2A02             CMP      R2,#+2
   \   000001EA   0xD10A             BNE.N    ??FTM_PinInit_33
    941                  PORTA->PCR[2] = PORTA->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable10_16  ;; 0x40049008
   \   000001F0   0x6800             LDR      R0,[R0, #+0]
   \   000001F2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000001F6   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000001FA   0x.... 0x....      LDR.W    R4,??DataTable10_16  ;; 0x40049008
   \   000001FE   0x6020             STR      R0,[R4, #+0]
   \   00000200   0xE00F             B.N      ??FTM_PinInit_34
    942                else if(pin == PTD7)
   \                     ??FTM_PinInit_33: (+1)
   \   00000202   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000204   0x2A63             CMP      R2,#+99
   \   00000206   0xD10A             BNE.N    ??FTM_PinInit_35
    943                  PORTD->PCR[7] = PORTD->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   00000208   0x.... 0x....      LDR.W    R0,??DataTable10_17  ;; 0x4004c01c
   \   0000020C   0x6800             LDR      R0,[R0, #+0]
   \   0000020E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000212   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000216   0x.... 0x....      LDR.W    R4,??DataTable10_17  ;; 0x4004c01c
   \   0000021A   0x6020             STR      R0,[R4, #+0]
   \   0000021C   0xE001             B.N      ??FTM_PinInit_34
    944                else
    945                  return 0;
   \                     ??FTM_PinInit_35: (+1)
   \   0000021E   0x2000             MOVS     R0,#+0
   \   00000220   0xE267             B.N      ??FTM_PinInit_13
    946                break;
   \                     ??FTM_PinInit_34: (+1)
   \   00000222   0xE265             B.N      ??FTM_PinInit_14
    947              default:
    948                return 0;     
   \                     ??FTM_PinInit_9: (+1)
   \   00000224   0x2000             MOVS     R0,#+0
   \   00000226   0xE264             B.N      ??FTM_PinInit_13
    949              }
    950            }
    951            else if(ftmx == FTM1)
   \                     ??FTM_PinInit_0: (+1)
   \   00000228   0x.... 0x....      LDR.W    R0,??DataTable10_18  ;; 0x40039000
   \   0000022C   0x4283             CMP      R3,R0
   \   0000022E   0xF040 0x80BD      BNE.W    ??FTM_PinInit_36
    952            {
    953              switch(chn)
   \   00000232   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000234   0x0008             MOVS     R0,R1
   \   00000236   0x2800             CMP      R0,#+0
   \   00000238   0xD007             BEQ.N    ??FTM_PinInit_37
   \   0000023A   0x2801             CMP      R0,#+1
   \   0000023C   0xD032             BEQ.N    ??FTM_PinInit_38
   \   0000023E   0x2808             CMP      R0,#+8
   \   00000240   0xD05D             BEQ.N    ??FTM_PinInit_39
   \   00000242   0x2809             CMP      R0,#+9
   \   00000244   0xF000 0x8086      BEQ.W    ??FTM_PinInit_40
   \   00000248   0xE0AE             B.N      ??FTM_PinInit_41
    954              {
    955              case FTM_Ch0:
    956                if(pin == PTA8)
   \                     ??FTM_PinInit_37: (+1)
   \   0000024A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000024C   0x2A08             CMP      R2,#+8
   \   0000024E   0xD10A             BNE.N    ??FTM_PinInit_42
    957                  PORTA->PCR[8] = PORTA->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   00000250   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x40049020
   \   00000254   0x6800             LDR      R0,[R0, #+0]
   \   00000256   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000025A   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000025E   0x.... 0x....      LDR.W    R4,??DataTable11  ;; 0x40049020
   \   00000262   0x6020             STR      R0,[R4, #+0]
   \   00000264   0xE01D             B.N      ??FTM_PinInit_43
    958                else if(pin == PTA12)
   \                     ??FTM_PinInit_42: (+1)
   \   00000266   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000268   0x2A0C             CMP      R2,#+12
   \   0000026A   0xD10A             BNE.N    ??FTM_PinInit_44
    959                  PORTA->PCR[12] = PORTA->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \   0000026C   0x.... 0x....      LDR.W    R0,??DataTable11_1  ;; 0x40049030
   \   00000270   0x6800             LDR      R0,[R0, #+0]
   \   00000272   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000276   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000027A   0x.... 0x....      LDR.W    R4,??DataTable11_1  ;; 0x40049030
   \   0000027E   0x6020             STR      R0,[R4, #+0]
   \   00000280   0xE00F             B.N      ??FTM_PinInit_43
    960                else if(pin == PTB0)
   \                     ??FTM_PinInit_44: (+1)
   \   00000282   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000284   0x2A20             CMP      R2,#+32
   \   00000286   0xD10A             BNE.N    ??FTM_PinInit_45
    961                  PORTB->PCR[0] = PORTB->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \   00000288   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x4004a000
   \   0000028C   0x6800             LDR      R0,[R0, #+0]
   \   0000028E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000292   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000296   0x.... 0x....      LDR.W    R4,??DataTable12  ;; 0x4004a000
   \   0000029A   0x6020             STR      R0,[R4, #+0]
   \   0000029C   0xE001             B.N      ??FTM_PinInit_43
    962                else
    963                  return 0;
   \                     ??FTM_PinInit_45: (+1)
   \   0000029E   0x2000             MOVS     R0,#+0
   \   000002A0   0xE227             B.N      ??FTM_PinInit_13
    964                break;
   \                     ??FTM_PinInit_43: (+1)
   \   000002A2   0xE225             B.N      ??FTM_PinInit_14
    965              case FTM_Ch1:
    966                if(pin == PTA9)
   \                     ??FTM_PinInit_38: (+1)
   \   000002A4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002A6   0x2A09             CMP      R2,#+9
   \   000002A8   0xD10A             BNE.N    ??FTM_PinInit_46
    967                  PORTA->PCR[9] = PORTA->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   000002AA   0x.... 0x....      LDR.W    R0,??DataTable14  ;; 0x40049024
   \   000002AE   0x6800             LDR      R0,[R0, #+0]
   \   000002B0   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000002B4   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000002B8   0x.... 0x....      LDR.W    R4,??DataTable14  ;; 0x40049024
   \   000002BC   0x6020             STR      R0,[R4, #+0]
   \   000002BE   0xE01D             B.N      ??FTM_PinInit_47
    968                else if(pin == PTA13)
   \                     ??FTM_PinInit_46: (+1)
   \   000002C0   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002C2   0x2A0D             CMP      R2,#+13
   \   000002C4   0xD10A             BNE.N    ??FTM_PinInit_48
    969                  PORTA->PCR[13] = PORTA->PCR[13] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \   000002C6   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40049034
   \   000002CA   0x6800             LDR      R0,[R0, #+0]
   \   000002CC   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000002D0   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000002D4   0x.... 0x....      LDR.W    R4,??DataTable15  ;; 0x40049034
   \   000002D8   0x6020             STR      R0,[R4, #+0]
   \   000002DA   0xE00F             B.N      ??FTM_PinInit_47
    970                else if(pin == PTB1)
   \                     ??FTM_PinInit_48: (+1)
   \   000002DC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002DE   0x2A21             CMP      R2,#+33
   \   000002E0   0xD10A             BNE.N    ??FTM_PinInit_49
    971                  PORTB->PCR[1] = PORTB->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \   000002E2   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x4004a004
   \   000002E6   0x6800             LDR      R0,[R0, #+0]
   \   000002E8   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000002EC   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000002F0   0x.... 0x....      LDR.W    R4,??DataTable15_1  ;; 0x4004a004
   \   000002F4   0x6020             STR      R0,[R4, #+0]
   \   000002F6   0xE001             B.N      ??FTM_PinInit_47
    972                else
    973                  return 0;
   \                     ??FTM_PinInit_49: (+1)
   \   000002F8   0x2000             MOVS     R0,#+0
   \   000002FA   0xE1FA             B.N      ??FTM_PinInit_13
    974                break;
   \                     ??FTM_PinInit_47: (+1)
   \   000002FC   0xE1F8             B.N      ??FTM_PinInit_14
    975              case FTM_PhA:
    976                if(pin == PTA8)
   \                     ??FTM_PinInit_39: (+1)
   \   000002FE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000300   0x2A08             CMP      R2,#+8
   \   00000302   0xD10A             BNE.N    ??FTM_PinInit_50
    977                  PORTA->PCR[8] = PORTA->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   00000304   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x40049020
   \   00000308   0x6800             LDR      R0,[R0, #+0]
   \   0000030A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000030E   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000312   0x.... 0x....      LDR.W    R4,??DataTable11  ;; 0x40049020
   \   00000316   0x6020             STR      R0,[R4, #+0]
   \   00000318   0xE01B             B.N      ??FTM_PinInit_51
    978                else if(pin == PTA12)
   \                     ??FTM_PinInit_50: (+1)
   \   0000031A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000031C   0x2A0C             CMP      R2,#+12
   \   0000031E   0xD108             BNE.N    ??FTM_PinInit_52
    979                  PORTA->PCR[12] = PORTA->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(7);
   \   00000320   0x.... 0x....      LDR.W    R0,??DataTable11_1  ;; 0x40049030
   \   00000324   0x6800             LDR      R0,[R0, #+0]
   \   00000326   0xF450 0x60E0      ORRS     R0,R0,#0x700
   \   0000032A   0x.... 0x....      LDR.W    R4,??DataTable11_1  ;; 0x40049030
   \   0000032E   0x6020             STR      R0,[R4, #+0]
   \   00000330   0xE00F             B.N      ??FTM_PinInit_51
    980                else if(pin == PTB0)
   \                     ??FTM_PinInit_52: (+1)
   \   00000332   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000334   0x2A20             CMP      R2,#+32
   \   00000336   0xD10A             BNE.N    ??FTM_PinInit_53
    981                  PORTB->PCR[0] = PORTB->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   \   00000338   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x4004a000
   \   0000033C   0x6800             LDR      R0,[R0, #+0]
   \   0000033E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000342   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000346   0x.... 0x....      LDR.W    R4,??DataTable12  ;; 0x4004a000
   \   0000034A   0x6020             STR      R0,[R4, #+0]
   \   0000034C   0xE001             B.N      ??FTM_PinInit_51
    982                else
    983                  return 0;
   \                     ??FTM_PinInit_53: (+1)
   \   0000034E   0x2000             MOVS     R0,#+0
   \   00000350   0xE1CF             B.N      ??FTM_PinInit_13
    984                break;
   \                     ??FTM_PinInit_51: (+1)
   \   00000352   0xE1CD             B.N      ??FTM_PinInit_14
    985              case FTM_PhB:
    986                if(pin == PTA9)
   \                     ??FTM_PinInit_40: (+1)
   \   00000354   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000356   0x2A09             CMP      R2,#+9
   \   00000358   0xD10A             BNE.N    ??FTM_PinInit_54
    987                  PORTA->PCR[9] = PORTA->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   0000035A   0x.... 0x....      LDR.W    R0,??DataTable14  ;; 0x40049024
   \   0000035E   0x6800             LDR      R0,[R0, #+0]
   \   00000360   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000364   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000368   0x.... 0x....      LDR.W    R4,??DataTable14  ;; 0x40049024
   \   0000036C   0x6020             STR      R0,[R4, #+0]
   \   0000036E   0xE01B             B.N      ??FTM_PinInit_41
    988                else if(pin == PTA13)
   \                     ??FTM_PinInit_54: (+1)
   \   00000370   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000372   0x2A0D             CMP      R2,#+13
   \   00000374   0xD108             BNE.N    ??FTM_PinInit_55
    989                  PORTA->PCR[13] = PORTA->PCR[13] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(7);
   \   00000376   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40049034
   \   0000037A   0x6800             LDR      R0,[R0, #+0]
   \   0000037C   0xF450 0x60E0      ORRS     R0,R0,#0x700
   \   00000380   0x.... 0x....      LDR.W    R4,??DataTable15  ;; 0x40049034
   \   00000384   0x6020             STR      R0,[R4, #+0]
   \   00000386   0xE00F             B.N      ??FTM_PinInit_41
    990                else if(pin == PTB1)
   \                     ??FTM_PinInit_55: (+1)
   \   00000388   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000038A   0x2A21             CMP      R2,#+33
   \   0000038C   0xD10A             BNE.N    ??FTM_PinInit_56
    991                  PORTB->PCR[1] = PORTB->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   \   0000038E   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x4004a004
   \   00000392   0x6800             LDR      R0,[R0, #+0]
   \   00000394   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000398   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   0000039C   0x.... 0x....      LDR.W    R4,??DataTable15_1  ;; 0x4004a004
   \   000003A0   0x6020             STR      R0,[R4, #+0]
   \   000003A2   0xE001             B.N      ??FTM_PinInit_41
    992                else
    993                  return 0;
   \                     ??FTM_PinInit_56: (+1)
   \   000003A4   0x2000             MOVS     R0,#+0
   \   000003A6   0xE1A4             B.N      ??FTM_PinInit_13
    994              default:
    995                return 0;   
   \                     ??FTM_PinInit_41: (+1)
   \   000003A8   0x2000             MOVS     R0,#+0
   \   000003AA   0xE1A2             B.N      ??FTM_PinInit_13
    996              }
    997            }
    998            else if(ftmx == FTM2)
   \                     ??FTM_PinInit_36: (+1)
   \   000003AC   0x.... 0x....      LDR.W    R0,??DataTable10_19  ;; 0x400b8000
   \   000003B0   0x4283             CMP      R3,R0
   \   000003B2   0xF040 0x8089      BNE.W    ??FTM_PinInit_57
    999            {
   1000              switch(chn)
   \   000003B6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000003B8   0x0008             MOVS     R0,R1
   \   000003BA   0x2800             CMP      R0,#+0
   \   000003BC   0xD006             BEQ.N    ??FTM_PinInit_58
   \   000003BE   0x2801             CMP      R0,#+1
   \   000003C0   0xD023             BEQ.N    ??FTM_PinInit_59
   \   000003C2   0x2808             CMP      R0,#+8
   \   000003C4   0xD040             BEQ.N    ??FTM_PinInit_60
   \   000003C6   0x2809             CMP      R0,#+9
   \   000003C8   0xD05D             BEQ.N    ??FTM_PinInit_61
   \   000003CA   0xE07B             B.N      ??FTM_PinInit_62
   1001              {
   1002              case FTM_Ch0:
   1003                if(pin == PTA10)
   \                     ??FTM_PinInit_58: (+1)
   \   000003CC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003CE   0x2A0A             CMP      R2,#+10
   \   000003D0   0xD10A             BNE.N    ??FTM_PinInit_63
   1004                  PORTA->PCR[10] = PORTA->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   000003D2   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40049028
   \   000003D6   0x6800             LDR      R0,[R0, #+0]
   \   000003D8   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000003DC   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000003E0   0x.... 0x....      LDR.W    R4,??DataTable15_2  ;; 0x40049028
   \   000003E4   0x6020             STR      R0,[R4, #+0]
   \   000003E6   0xE00F             B.N      ??FTM_PinInit_64
   1005                else if(pin == PTB18)
   \                     ??FTM_PinInit_63: (+1)
   \   000003E8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003EA   0x2A32             CMP      R2,#+50
   \   000003EC   0xD10A             BNE.N    ??FTM_PinInit_65
   1006                  PORTB->PCR[18] = PORTB->PCR[18] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \   000003EE   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4004a048
   \   000003F2   0x6800             LDR      R0,[R0, #+0]
   \   000003F4   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000003F8   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000003FC   0x.... 0x....      LDR.W    R4,??DataTable15_3  ;; 0x4004a048
   \   00000400   0x6020             STR      R0,[R4, #+0]
   \   00000402   0xE001             B.N      ??FTM_PinInit_64
   1007                else
   1008                  return 0;
   \                     ??FTM_PinInit_65: (+1)
   \   00000404   0x2000             MOVS     R0,#+0
   \   00000406   0xE174             B.N      ??FTM_PinInit_13
   1009                break;
   \                     ??FTM_PinInit_64: (+1)
   \   00000408   0xE172             B.N      ??FTM_PinInit_14
   1010              case FTM_Ch1:
   1011                if(pin == PTA11)
   \                     ??FTM_PinInit_59: (+1)
   \   0000040A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000040C   0x2A0B             CMP      R2,#+11
   \   0000040E   0xD10A             BNE.N    ??FTM_PinInit_66
   1012                  PORTA->PCR[11] = PORTA->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   00000410   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4004902c
   \   00000414   0x6800             LDR      R0,[R0, #+0]
   \   00000416   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000041A   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000041E   0x.... 0x....      LDR.W    R4,??DataTable15_4  ;; 0x4004902c
   \   00000422   0x6020             STR      R0,[R4, #+0]
   \   00000424   0xE00F             B.N      ??FTM_PinInit_67
   1013                else if(pin == PTB19)
   \                     ??FTM_PinInit_66: (+1)
   \   00000426   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000428   0x2A33             CMP      R2,#+51
   \   0000042A   0xD10A             BNE.N    ??FTM_PinInit_68
   1014                  PORTB->PCR[19] = PORTB->PCR[19] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \   0000042C   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x4004a04c
   \   00000430   0x6800             LDR      R0,[R0, #+0]
   \   00000432   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000436   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000043A   0x.... 0x....      LDR.W    R4,??DataTable15_5  ;; 0x4004a04c
   \   0000043E   0x6020             STR      R0,[R4, #+0]
   \   00000440   0xE001             B.N      ??FTM_PinInit_67
   1015                else
   1016                  return 0;
   \                     ??FTM_PinInit_68: (+1)
   \   00000442   0x2000             MOVS     R0,#+0
   \   00000444   0xE155             B.N      ??FTM_PinInit_13
   1017                break;
   \                     ??FTM_PinInit_67: (+1)
   \   00000446   0xE153             B.N      ??FTM_PinInit_14
   1018              case FTM_PhA:
   1019                if(pin == PTA10)
   \                     ??FTM_PinInit_60: (+1)
   \   00000448   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000044A   0x2A0A             CMP      R2,#+10
   \   0000044C   0xD10A             BNE.N    ??FTM_PinInit_69
   1020                  PORTA->PCR[10] = PORTA->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   0000044E   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40049028
   \   00000452   0x6800             LDR      R0,[R0, #+0]
   \   00000454   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000458   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   0000045C   0x.... 0x....      LDR.W    R4,??DataTable15_2  ;; 0x40049028
   \   00000460   0x6020             STR      R0,[R4, #+0]
   \   00000462   0xE00F             B.N      ??FTM_PinInit_70
   1021                else if(pin == PTB18)
   \                     ??FTM_PinInit_69: (+1)
   \   00000464   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000466   0x2A32             CMP      R2,#+50
   \   00000468   0xD10A             BNE.N    ??FTM_PinInit_71
   1022                  PORTB->PCR[18] = PORTB->PCR[18] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   \   0000046A   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4004a048
   \   0000046E   0x6800             LDR      R0,[R0, #+0]
   \   00000470   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000474   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000478   0x.... 0x....      LDR.W    R4,??DataTable15_3  ;; 0x4004a048
   \   0000047C   0x6020             STR      R0,[R4, #+0]
   \   0000047E   0xE001             B.N      ??FTM_PinInit_70
   1023                else
   1024                  return 0;
   \                     ??FTM_PinInit_71: (+1)
   \   00000480   0x2000             MOVS     R0,#+0
   \   00000482   0xE136             B.N      ??FTM_PinInit_13
   1025                break;
   \                     ??FTM_PinInit_70: (+1)
   \   00000484   0xE134             B.N      ??FTM_PinInit_14
   1026              case FTM_PhB:
   1027                if(pin == PTA11)
   \                     ??FTM_PinInit_61: (+1)
   \   00000486   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000488   0x2A0B             CMP      R2,#+11
   \   0000048A   0xD10A             BNE.N    ??FTM_PinInit_72
   1028                  PORTA->PCR[11] = PORTA->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   0000048C   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4004902c
   \   00000490   0x6800             LDR      R0,[R0, #+0]
   \   00000492   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000496   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   0000049A   0x.... 0x....      LDR.W    R4,??DataTable15_4  ;; 0x4004902c
   \   0000049E   0x6020             STR      R0,[R4, #+0]
   \   000004A0   0xE00F             B.N      ??FTM_PinInit_73
   1029                else if(pin == PTB19)
   \                     ??FTM_PinInit_72: (+1)
   \   000004A2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004A4   0x2A33             CMP      R2,#+51
   \   000004A6   0xD10A             BNE.N    ??FTM_PinInit_74
   1030                  PORTB->PCR[19] = PORTB->PCR[19] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   \   000004A8   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x4004a04c
   \   000004AC   0x6800             LDR      R0,[R0, #+0]
   \   000004AE   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000004B2   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   000004B6   0x.... 0x....      LDR.W    R4,??DataTable15_5  ;; 0x4004a04c
   \   000004BA   0x6020             STR      R0,[R4, #+0]
   \   000004BC   0xE001             B.N      ??FTM_PinInit_73
   1031                else
   1032                  return 0;
   \                     ??FTM_PinInit_74: (+1)
   \   000004BE   0x2000             MOVS     R0,#+0
   \   000004C0   0xE117             B.N      ??FTM_PinInit_13
   1033                break;
   \                     ??FTM_PinInit_73: (+1)
   \   000004C2   0xE115             B.N      ??FTM_PinInit_14
   1034              default:
   1035                return 0;   
   \                     ??FTM_PinInit_62: (+1)
   \   000004C4   0x2000             MOVS     R0,#+0
   \   000004C6   0xE114             B.N      ??FTM_PinInit_13
   1036              }
   1037            }
   1038            
   1039          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
   1040            else if(ftmx == FTM3)
   \                     ??FTM_PinInit_57: (+1)
   \   000004C8   0x.... 0x....      LDR.W    R0,??DataTable15_6  ;; 0x400b9000
   \   000004CC   0x4283             CMP      R3,R0
   \   000004CE   0xF040 0x810D      BNE.W    ??FTM_PinInit_75
   1041            {
   1042              switch(chn)
   \   000004D2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000004D4   0x2900             CMP      R1,#+0
   \   000004D6   0xD00F             BEQ.N    ??FTM_PinInit_76
   \   000004D8   0x2902             CMP      R1,#+2
   \   000004DA   0xD04B             BEQ.N    ??FTM_PinInit_77
   \   000004DC   0xD32B             BCC.N    ??FTM_PinInit_78
   \   000004DE   0x2904             CMP      R1,#+4
   \   000004E0   0xF000 0x8086      BEQ.W    ??FTM_PinInit_79
   \   000004E4   0xD365             BCC.N    ??FTM_PinInit_80
   \   000004E6   0x2906             CMP      R1,#+6
   \   000004E8   0xF000 0x80C0      BEQ.W    ??FTM_PinInit_81
   \   000004EC   0xF0C0 0x809F      BCC.W    ??FTM_PinInit_82
   \   000004F0   0x2907             CMP      R1,#+7
   \   000004F2   0xF000 0x80DA      BEQ.W    ??FTM_PinInit_83
   \   000004F6   0xE0F7             B.N      ??FTM_PinInit_84
   1043              {
   1044              case FTM_Ch0:
   1045                if(pin == PTE5)
   \                     ??FTM_PinInit_76: (+1)
   \   000004F8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004FA   0x2A81             CMP      R2,#+129
   \   000004FC   0xD10A             BNE.N    ??FTM_PinInit_85
   1046                  PORTE->PCR[5] = PORTE->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   000004FE   0x.... 0x....      LDR.W    R0,??DataTable15_7  ;; 0x4004d014
   \   00000502   0x6800             LDR      R0,[R0, #+0]
   \   00000504   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000508   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   0000050C   0x.... 0x....      LDR.W    R4,??DataTable15_7  ;; 0x4004d014
   \   00000510   0x6020             STR      R0,[R4, #+0]
   \   00000512   0xE00F             B.N      ??FTM_PinInit_86
   1047                else if(pin == PTD0)
   \                     ??FTM_PinInit_85: (+1)
   \   00000514   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000516   0x2A5C             CMP      R2,#+92
   \   00000518   0xD10A             BNE.N    ??FTM_PinInit_87
   1048                  PORTD->PCR[0] = PORTD->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   0000051A   0x.... 0x....      LDR.W    R0,??DataTable15_8  ;; 0x4004c000
   \   0000051E   0x6800             LDR      R0,[R0, #+0]
   \   00000520   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000524   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000528   0x.... 0x....      LDR.W    R4,??DataTable15_8  ;; 0x4004c000
   \   0000052C   0x6020             STR      R0,[R4, #+0]
   \   0000052E   0xE001             B.N      ??FTM_PinInit_86
   1049                else
   1050                  return 0;
   \                     ??FTM_PinInit_87: (+1)
   \   00000530   0x2000             MOVS     R0,#+0
   \   00000532   0xE0DE             B.N      ??FTM_PinInit_13
   1051                break;
   \                     ??FTM_PinInit_86: (+1)
   \   00000534   0xE0DC             B.N      ??FTM_PinInit_14
   1052              case FTM_Ch1:
   1053                if(pin == PTE6)
   \                     ??FTM_PinInit_78: (+1)
   \   00000536   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000538   0x2A82             CMP      R2,#+130
   \   0000053A   0xD10A             BNE.N    ??FTM_PinInit_88
   1054                  PORTE->PCR[6] = PORTE->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   0000053C   0x.... 0x....      LDR.W    R0,??DataTable15_9  ;; 0x4004d018
   \   00000540   0x6800             LDR      R0,[R0, #+0]
   \   00000542   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000546   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   0000054A   0x.... 0x....      LDR.W    R4,??DataTable15_9  ;; 0x4004d018
   \   0000054E   0x6020             STR      R0,[R4, #+0]
   \   00000550   0xE00F             B.N      ??FTM_PinInit_89
   1055                else if(pin == PTD1)
   \                     ??FTM_PinInit_88: (+1)
   \   00000552   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000554   0x2A5D             CMP      R2,#+93
   \   00000556   0xD10A             BNE.N    ??FTM_PinInit_90
   1056                  PORTD->PCR[1] = PORTD->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   00000558   0x.... 0x....      LDR.W    R0,??DataTable15_10  ;; 0x4004c004
   \   0000055C   0x6800             LDR      R0,[R0, #+0]
   \   0000055E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000562   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000566   0x.... 0x....      LDR.W    R4,??DataTable15_10  ;; 0x4004c004
   \   0000056A   0x6020             STR      R0,[R4, #+0]
   \   0000056C   0xE001             B.N      ??FTM_PinInit_89
   1057                else
   1058                  return 0;
   \                     ??FTM_PinInit_90: (+1)
   \   0000056E   0x2000             MOVS     R0,#+0
   \   00000570   0xE0BF             B.N      ??FTM_PinInit_13
   1059                break;
   \                     ??FTM_PinInit_89: (+1)
   \   00000572   0xE0BD             B.N      ??FTM_PinInit_14
   1060              case FTM_Ch2:
   1061                if(pin == PTE7)
   \                     ??FTM_PinInit_77: (+1)
   \   00000574   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000576   0x2A83             CMP      R2,#+131
   \   00000578   0xD10A             BNE.N    ??FTM_PinInit_91
   1062                  PORTE->PCR[7] = PORTE->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   0000057A   0x.... 0x....      LDR.W    R0,??DataTable15_11  ;; 0x4004d01c
   \   0000057E   0x6800             LDR      R0,[R0, #+0]
   \   00000580   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000584   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000588   0x.... 0x....      LDR.W    R4,??DataTable15_11  ;; 0x4004d01c
   \   0000058C   0x6020             STR      R0,[R4, #+0]
   \   0000058E   0xE00F             B.N      ??FTM_PinInit_92
   1063                else if(pin == PTD2)
   \                     ??FTM_PinInit_91: (+1)
   \   00000590   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000592   0x2A5E             CMP      R2,#+94
   \   00000594   0xD10A             BNE.N    ??FTM_PinInit_93
   1064                  PORTD->PCR[2] = PORTD->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   00000596   0x.... 0x....      LDR.W    R0,??DataTable15_12  ;; 0x4004c008
   \   0000059A   0x6800             LDR      R0,[R0, #+0]
   \   0000059C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000005A0   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000005A4   0x.... 0x....      LDR.W    R4,??DataTable15_12  ;; 0x4004c008
   \   000005A8   0x6020             STR      R0,[R4, #+0]
   \   000005AA   0xE001             B.N      ??FTM_PinInit_92
   1065                else
   1066                  return 0;
   \                     ??FTM_PinInit_93: (+1)
   \   000005AC   0x2000             MOVS     R0,#+0
   \   000005AE   0xE0A0             B.N      ??FTM_PinInit_13
   1067                break;
   \                     ??FTM_PinInit_92: (+1)
   \   000005B0   0xE09E             B.N      ??FTM_PinInit_14
   1068              case FTM_Ch3:
   1069                if(pin == PTE8)
   \                     ??FTM_PinInit_80: (+1)
   \   000005B2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005B4   0x2A84             CMP      R2,#+132
   \   000005B6   0xD10A             BNE.N    ??FTM_PinInit_94
   1070                  PORTE->PCR[8] = PORTE->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   000005B8   0x.... 0x....      LDR.W    R0,??DataTable15_13  ;; 0x4004d020
   \   000005BC   0x6800             LDR      R0,[R0, #+0]
   \   000005BE   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000005C2   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   000005C6   0x.... 0x....      LDR.W    R4,??DataTable15_13  ;; 0x4004d020
   \   000005CA   0x6020             STR      R0,[R4, #+0]
   \   000005CC   0xE00F             B.N      ??FTM_PinInit_95
   1071                else if(pin == PTD3)
   \                     ??FTM_PinInit_94: (+1)
   \   000005CE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005D0   0x2A5F             CMP      R2,#+95
   \   000005D2   0xD10A             BNE.N    ??FTM_PinInit_96
   1072                  PORTD->PCR[3] = PORTD->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \   000005D4   0x.... 0x....      LDR.W    R0,??DataTable15_14  ;; 0x4004c00c
   \   000005D8   0x6800             LDR      R0,[R0, #+0]
   \   000005DA   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000005DE   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000005E2   0x.... 0x....      LDR.W    R4,??DataTable15_14  ;; 0x4004c00c
   \   000005E6   0x6020             STR      R0,[R4, #+0]
   \   000005E8   0xE001             B.N      ??FTM_PinInit_95
   1073                else
   1074                  return 0;
   \                     ??FTM_PinInit_96: (+1)
   \   000005EA   0x2000             MOVS     R0,#+0
   \   000005EC   0xE081             B.N      ??FTM_PinInit_13
   1075                break;
   \                     ??FTM_PinInit_95: (+1)
   \   000005EE   0xE07F             B.N      ??FTM_PinInit_14
   1076              case FTM_Ch4:
   1077                if(pin == PTE9)
   \                     ??FTM_PinInit_79: (+1)
   \   000005F0   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005F2   0x2A85             CMP      R2,#+133
   \   000005F4   0xD10A             BNE.N    ??FTM_PinInit_97
   1078                  PORTE->PCR[9] = PORTE->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   000005F6   0x.... 0x....      LDR.W    R0,??DataTable15_15  ;; 0x4004d024
   \   000005FA   0x6800             LDR      R0,[R0, #+0]
   \   000005FC   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000600   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000604   0x.... 0x....      LDR.W    R4,??DataTable15_15  ;; 0x4004d024
   \   00000608   0x6020             STR      R0,[R4, #+0]
   \   0000060A   0xE00F             B.N      ??FTM_PinInit_98
   1079                else if(pin == PTC8)
   \                     ??FTM_PinInit_97: (+1)
   \   0000060C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000060E   0x2A44             CMP      R2,#+68
   \   00000610   0xD10A             BNE.N    ??FTM_PinInit_99
   1080                  PORTC->PCR[8] = PORTC->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \   00000612   0x.... 0x....      LDR.W    R0,??DataTable15_16  ;; 0x4004b020
   \   00000616   0x6800             LDR      R0,[R0, #+0]
   \   00000618   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000061C   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000620   0x.... 0x....      LDR.W    R4,??DataTable15_16  ;; 0x4004b020
   \   00000624   0x6020             STR      R0,[R4, #+0]
   \   00000626   0xE001             B.N      ??FTM_PinInit_98
   1081                else
   1082                  return 0;
   \                     ??FTM_PinInit_99: (+1)
   \   00000628   0x2000             MOVS     R0,#+0
   \   0000062A   0xE062             B.N      ??FTM_PinInit_13
   1083                break;
   \                     ??FTM_PinInit_98: (+1)
   \   0000062C   0xE060             B.N      ??FTM_PinInit_14
   1084              case FTM_Ch5:
   1085                if(pin == PTE10)
   \                     ??FTM_PinInit_82: (+1)
   \   0000062E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000630   0x2A86             CMP      R2,#+134
   \   00000632   0xD10A             BNE.N    ??FTM_PinInit_100
   1086                  PORTE->PCR[10] = PORTE->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   00000634   0x.... 0x....      LDR.W    R0,??DataTable15_17  ;; 0x4004d028
   \   00000638   0x6800             LDR      R0,[R0, #+0]
   \   0000063A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000063E   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000642   0x.... 0x....      LDR.W    R4,??DataTable15_17  ;; 0x4004d028
   \   00000646   0x6020             STR      R0,[R4, #+0]
   \   00000648   0xE00F             B.N      ??FTM_PinInit_101
   1087                else if(pin == PTC9)
   \                     ??FTM_PinInit_100: (+1)
   \   0000064A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000064C   0x2A45             CMP      R2,#+69
   \   0000064E   0xD10A             BNE.N    ??FTM_PinInit_102
   1088                  PORTC->PCR[9] = PORTC->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \   00000650   0x.... 0x....      LDR.W    R0,??DataTable15_18  ;; 0x4004b024
   \   00000654   0x6800             LDR      R0,[R0, #+0]
   \   00000656   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000065A   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000065E   0x.... 0x....      LDR.W    R4,??DataTable15_18  ;; 0x4004b024
   \   00000662   0x6020             STR      R0,[R4, #+0]
   \   00000664   0xE001             B.N      ??FTM_PinInit_101
   1089                else
   1090                  return 0;
   \                     ??FTM_PinInit_102: (+1)
   \   00000666   0x2000             MOVS     R0,#+0
   \   00000668   0xE043             B.N      ??FTM_PinInit_13
   1091                break;
   \                     ??FTM_PinInit_101: (+1)
   \   0000066A   0xE041             B.N      ??FTM_PinInit_14
   1092              case FTM_Ch6:
   1093                if(pin == PTE11)
   \                     ??FTM_PinInit_81: (+1)
   \   0000066C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000066E   0x2A87             CMP      R2,#+135
   \   00000670   0xD10A             BNE.N    ??FTM_PinInit_103
   1094                  PORTE->PCR[11] = PORTE->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   00000672   0x.... 0x....      LDR.W    R0,??DataTable15_19  ;; 0x4004d02c
   \   00000676   0x6800             LDR      R0,[R0, #+0]
   \   00000678   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000067C   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000680   0x.... 0x....      LDR.W    R4,??DataTable15_19  ;; 0x4004d02c
   \   00000684   0x6020             STR      R0,[R4, #+0]
   \   00000686   0xE00F             B.N      ??FTM_PinInit_104
   1095                else if(pin == PTC10)
   \                     ??FTM_PinInit_103: (+1)
   \   00000688   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000068A   0x2A46             CMP      R2,#+70
   \   0000068C   0xD10A             BNE.N    ??FTM_PinInit_105
   1096                  PORTC->PCR[10] = PORTC->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \   0000068E   0x.... 0x....      LDR.W    R0,??DataTable15_20  ;; 0x4004b028
   \   00000692   0x6800             LDR      R0,[R0, #+0]
   \   00000694   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000698   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000069C   0x.... 0x....      LDR.W    R4,??DataTable15_20  ;; 0x4004b028
   \   000006A0   0x6020             STR      R0,[R4, #+0]
   \   000006A2   0xE001             B.N      ??FTM_PinInit_104
   1097                else
   1098                  return 0;
   \                     ??FTM_PinInit_105: (+1)
   \   000006A4   0x2000             MOVS     R0,#+0
   \   000006A6   0xE024             B.N      ??FTM_PinInit_13
   1099                break;
   \                     ??FTM_PinInit_104: (+1)
   \   000006A8   0xE022             B.N      ??FTM_PinInit_14
   1100              case FTM_Ch7:
   1101                if(pin == PTE12)
   \                     ??FTM_PinInit_83: (+1)
   \   000006AA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000006AC   0x2A88             CMP      R2,#+136
   \   000006AE   0xD10A             BNE.N    ??FTM_PinInit_106
   1102                  PORTE->PCR[12] = PORTE->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \   000006B0   0x.... 0x....      LDR.W    R0,??DataTable15_21  ;; 0x4004d030
   \   000006B4   0x6800             LDR      R0,[R0, #+0]
   \   000006B6   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000006BA   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   000006BE   0x.... 0x....      LDR.W    R4,??DataTable15_21  ;; 0x4004d030
   \   000006C2   0x6020             STR      R0,[R4, #+0]
   \   000006C4   0xE00F             B.N      ??FTM_PinInit_107
   1103                else if(pin == PTC11)
   \                     ??FTM_PinInit_106: (+1)
   \   000006C6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000006C8   0x2A47             CMP      R2,#+71
   \   000006CA   0xD10A             BNE.N    ??FTM_PinInit_108
   1104                  PORTC->PCR[11] = PORTC->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \   000006CC   0x.... 0x....      LDR.W    R0,??DataTable15_22  ;; 0x4004b02c
   \   000006D0   0x6800             LDR      R0,[R0, #+0]
   \   000006D2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000006D6   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000006DA   0x.... 0x....      LDR.W    R4,??DataTable15_22  ;; 0x4004b02c
   \   000006DE   0x6020             STR      R0,[R4, #+0]
   \   000006E0   0xE001             B.N      ??FTM_PinInit_107
   1105                else
   1106                  return 0;
   \                     ??FTM_PinInit_108: (+1)
   \   000006E2   0x2000             MOVS     R0,#+0
   \   000006E4   0xE005             B.N      ??FTM_PinInit_13
   1107                break;
   \                     ??FTM_PinInit_107: (+1)
   \   000006E6   0xE003             B.N      ??FTM_PinInit_14
   1108              default:
   1109                return 0;     
   \                     ??FTM_PinInit_84: (+1)
   \   000006E8   0x2000             MOVS     R0,#+0
   \   000006EA   0xE002             B.N      ??FTM_PinInit_13
   1110              }
   1111            }
   1112          #endif
   1113            else
   1114            {
   1115              return 0;
   \                     ??FTM_PinInit_75: (+1)
   \   000006EC   0x2000             MOVS     R0,#+0
   \   000006EE   0xE000             B.N      ??FTM_PinInit_13
   1116            }
   1117            return 1;
   \                     ??FTM_PinInit_14: (+1)
   \   000006F0   0x2001             MOVS     R0,#+1
   \                     ??FTM_PinInit_13: (+1)
   \   000006F2   0xBC10             POP      {R4}
   \   000006F4   0x4770             BX       LR               ;; return
   1118          }
   1119          
   1120          /*
   1121           * FTM_PinInit
   1122           * 反初始化通道n指定引脚的FTM复用功能，内部调用
   1123           */

   \                                 In section .text, align 2, keep-with-next
   1124          static uint8 FTM_PinDeinit(FTM_Type *ftmx, FtmChnEnum_Type chn)
   1125          {
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init13FTM_PinDeinitEP8FTM_Type10FtmChnEnum: (+1)
   \   00000000   0x0002             MOVS     R2,R0
   1126            //根据ftmx禁用相应pin的ftm功能，回复到默认功能
   1127            if(ftmx == FTM0)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable15_23  ;; 0x40038000
   \   00000006   0x4282             CMP      R2,R0
   \   00000008   0xF040 0x80DC      BNE.W    ??FTM_PinDeinit_0
   1128            {
   1129              switch(chn)
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD00E             BEQ.N    ??FTM_PinDeinit_1
   \   00000012   0x2902             CMP      R1,#+2
   \   00000014   0xD03E             BEQ.N    ??FTM_PinDeinit_2
   \   00000016   0xD324             BCC.N    ??FTM_PinDeinit_3
   \   00000018   0x2904             CMP      R1,#+4
   \   0000001A   0xD06D             BEQ.N    ??FTM_PinDeinit_4
   \   0000001C   0xD353             BCC.N    ??FTM_PinDeinit_5
   \   0000001E   0x2906             CMP      R1,#+6
   \   00000020   0xF000 0x809C      BEQ.W    ??FTM_PinDeinit_6
   \   00000024   0xF0C0 0x8081      BCC.W    ??FTM_PinDeinit_7
   \   00000028   0x2907             CMP      R1,#+7
   \   0000002A   0xF000 0x80B0      BEQ.W    ??FTM_PinDeinit_8
   \   0000002E   0xE0C7             B.N      ??FTM_PinDeinit_9
   1130              {
   1131              case FTM_Ch0:
   1132                if((PORTA->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_1: (+1)
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable15_24  ;; 0x4004900c
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000003A   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000003E   0xD103             BNE.N    ??FTM_PinDeinit_10
   1133                  PORTA->PCR[3] = PORT_PCR_MUX(0); 
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      LDR.W    R3,??DataTable15_24  ;; 0x4004900c
   \   00000046   0x6018             STR      R0,[R3, #+0]
   1134                if((PORTC->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_10: (+1)
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable15_25  ;; 0x4004b004
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000052   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000056   0xD103             BNE.N    ??FTM_PinDeinit_11
   1135                  PORTC->PCR[1] = PORT_PCR_MUX(0);
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      LDR.W    R3,??DataTable15_25  ;; 0x4004b004
   \   0000005E   0x6018             STR      R0,[R3, #+0]
   1136                break;
   \                     ??FTM_PinDeinit_11: (+1)
   \   00000060   0xE27C             B.N      ??FTM_PinDeinit_12
   1137              case FTM_Ch1:
   1138                if((PORTA->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_3: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable15_26  ;; 0x40049010
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000006C   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000070   0xD103             BNE.N    ??FTM_PinDeinit_13
   1139                  PORTA->PCR[4] = PORT_PCR_MUX(0); 
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x.... 0x....      LDR.W    R3,??DataTable15_26  ;; 0x40049010
   \   00000078   0x6018             STR      R0,[R3, #+0]
   1140                if((PORTC->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_13: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable15_27  ;; 0x4004b008
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000084   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000088   0xD103             BNE.N    ??FTM_PinDeinit_14
   1141                  PORTC->PCR[2] = PORT_PCR_MUX(0);
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      LDR.W    R3,??DataTable15_27  ;; 0x4004b008
   \   00000090   0x6018             STR      R0,[R3, #+0]
   1142                break;
   \                     ??FTM_PinDeinit_14: (+1)
   \   00000092   0xE263             B.N      ??FTM_PinDeinit_12
   1143              case FTM_Ch2:
   1144                if((PORTA->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_2: (+1)
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable15_28  ;; 0x40049014
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000009E   0xF5B0 0x7F40      CMP      R0,#+768
   \   000000A2   0xD103             BNE.N    ??FTM_PinDeinit_15
   1145                  PORTA->PCR[5] = PORT_PCR_MUX(0); 
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x.... 0x....      LDR.W    R3,??DataTable15_28  ;; 0x40049014
   \   000000AA   0x6018             STR      R0,[R3, #+0]
   1146                if((PORTC->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_15: (+1)
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable15_29  ;; 0x4004b00c
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000B6   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000000BA   0xD103             BNE.N    ??FTM_PinDeinit_16
   1147                  PORTC->PCR[3] = PORT_PCR_MUX(0);
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      LDR.W    R3,??DataTable15_29  ;; 0x4004b00c
   \   000000C2   0x6018             STR      R0,[R3, #+0]
   1148                break;
   \                     ??FTM_PinDeinit_16: (+1)
   \   000000C4   0xE24A             B.N      ??FTM_PinDeinit_12
   1149              case FTM_Ch3:
   1150                if((PORTA->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_5: (+1)
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable15_30  ;; 0x40049018
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000D0   0xF5B0 0x7F40      CMP      R0,#+768
   \   000000D4   0xD103             BNE.N    ??FTM_PinDeinit_17
   1151                  PORTA->PCR[6] = PORT_PCR_MUX(0); 
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x.... 0x....      LDR.W    R3,??DataTable15_30  ;; 0x40049018
   \   000000DC   0x6018             STR      R0,[R3, #+0]
   1152                if((PORTC->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_17: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable15_31  ;; 0x4004b010
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000E8   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000000EC   0xD103             BNE.N    ??FTM_PinDeinit_18
   1153                  PORTC->PCR[4] = PORT_PCR_MUX(0);
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x.... 0x....      LDR.W    R3,??DataTable15_31  ;; 0x4004b010
   \   000000F4   0x6018             STR      R0,[R3, #+0]
   1154                break;
   \                     ??FTM_PinDeinit_18: (+1)
   \   000000F6   0xE231             B.N      ??FTM_PinDeinit_12
   1155              case FTM_Ch4:
   1156                if((PORTA->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_4: (+1)
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable15_32  ;; 0x4004901c
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000102   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000106   0xD103             BNE.N    ??FTM_PinDeinit_19
   1157                  PORTA->PCR[7] = PORT_PCR_MUX(0); 
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x.... 0x....      LDR.W    R3,??DataTable15_32  ;; 0x4004901c
   \   0000010E   0x6018             STR      R0,[R3, #+0]
   1158                if((PORTD->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_19: (+1)
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable15_33  ;; 0x4004c010
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000011A   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000011E   0xD103             BNE.N    ??FTM_PinDeinit_20
   1159                  PORTD->PCR[4] = PORT_PCR_MUX(0);
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0x.... 0x....      LDR.W    R3,??DataTable15_33  ;; 0x4004c010
   \   00000126   0x6018             STR      R0,[R3, #+0]
   1160                break;
   \                     ??FTM_PinDeinit_20: (+1)
   \   00000128   0xE218             B.N      ??FTM_PinDeinit_12
   1161              case FTM_Ch5:
   1162                if((PORTA->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_7: (+1)
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable15_34  ;; 0x40049000
   \   0000012E   0x6800             LDR      R0,[R0, #+0]
   \   00000130   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000134   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000138   0xD103             BNE.N    ??FTM_PinDeinit_21
   1163                  PORTA->PCR[0] = PORT_PCR_MUX(0); 
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x.... 0x....      LDR.W    R3,??DataTable15_34  ;; 0x40049000
   \   00000140   0x6018             STR      R0,[R3, #+0]
   1164                if((PORTD->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_21: (+1)
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable15_35  ;; 0x4004c014
   \   00000146   0x6800             LDR      R0,[R0, #+0]
   \   00000148   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000014C   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000150   0xD103             BNE.N    ??FTM_PinDeinit_22
   1165                  PORTD->PCR[5] = PORT_PCR_MUX(0);
   \   00000152   0x2000             MOVS     R0,#+0
   \   00000154   0x.... 0x....      LDR.W    R3,??DataTable15_35  ;; 0x4004c014
   \   00000158   0x6018             STR      R0,[R3, #+0]
   1166                break;
   \                     ??FTM_PinDeinit_22: (+1)
   \   0000015A   0xE1FF             B.N      ??FTM_PinDeinit_12
   1167              case FTM_Ch6:
   1168                if((PORTA->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_6: (+1)
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable15_36  ;; 0x40049004
   \   00000160   0x6800             LDR      R0,[R0, #+0]
   \   00000162   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000166   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000016A   0xD103             BNE.N    ??FTM_PinDeinit_23
   1169                  PORTA->PCR[1] = PORT_PCR_MUX(0); 
   \   0000016C   0x2000             MOVS     R0,#+0
   \   0000016E   0x.... 0x....      LDR.W    R3,??DataTable15_36  ;; 0x40049004
   \   00000172   0x6018             STR      R0,[R3, #+0]
   1170                if((PORTD->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_23: (+1)
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable15_37  ;; 0x4004c018
   \   00000178   0x6800             LDR      R0,[R0, #+0]
   \   0000017A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000017E   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000182   0xD103             BNE.N    ??FTM_PinDeinit_24
   1171                  PORTD->PCR[6] = PORT_PCR_MUX(0);
   \   00000184   0x2000             MOVS     R0,#+0
   \   00000186   0x.... 0x....      LDR.W    R3,??DataTable15_37  ;; 0x4004c018
   \   0000018A   0x6018             STR      R0,[R3, #+0]
   1172                break;
   \                     ??FTM_PinDeinit_24: (+1)
   \   0000018C   0xE1E6             B.N      ??FTM_PinDeinit_12
   1173              case FTM_Ch7:
   1174                if((PORTA->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_8: (+1)
   \   0000018E   0x.... 0x....      LDR.W    R0,??DataTable15_38  ;; 0x40049008
   \   00000192   0x6800             LDR      R0,[R0, #+0]
   \   00000194   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000198   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000019C   0xD103             BNE.N    ??FTM_PinDeinit_25
   1175                  PORTA->PCR[2] = PORT_PCR_MUX(0); 
   \   0000019E   0x2000             MOVS     R0,#+0
   \   000001A0   0x.... 0x....      LDR.W    R3,??DataTable15_38  ;; 0x40049008
   \   000001A4   0x6018             STR      R0,[R3, #+0]
   1176                if((PORTD->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_25: (+1)
   \   000001A6   0x.... 0x....      LDR.W    R0,??DataTable15_39  ;; 0x4004c01c
   \   000001AA   0x6800             LDR      R0,[R0, #+0]
   \   000001AC   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000001B0   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000001B4   0xD103             BNE.N    ??FTM_PinDeinit_26
   1177                  PORTD->PCR[7] = PORT_PCR_MUX(0);      
   \   000001B6   0x2000             MOVS     R0,#+0
   \   000001B8   0x.... 0x....      LDR.W    R3,??DataTable15_39  ;; 0x4004c01c
   \   000001BC   0x6018             STR      R0,[R3, #+0]
   1178                break;
   \                     ??FTM_PinDeinit_26: (+1)
   \   000001BE   0xE1CD             B.N      ??FTM_PinDeinit_12
   1179              default:
   1180                return 0;     
   \                     ??FTM_PinDeinit_9: (+1)
   \   000001C0   0x2000             MOVS     R0,#+0
   \   000001C2   0xE1CC             B.N      ??FTM_PinDeinit_27
   1181              }
   1182            }
   1183            else if(ftmx == FTM1)
   \                     ??FTM_PinDeinit_0: (+1)
   \   000001C4   0x.... 0x....      LDR.W    R0,??DataTable15_40  ;; 0x40039000
   \   000001C8   0x4282             CMP      R2,R0
   \   000001CA   0xF040 0x80A1      BNE.W    ??FTM_PinDeinit_28
   1184            {
   1185              switch(chn)
   \   000001CE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001D0   0x0008             MOVS     R0,R1
   \   000001D2   0x2800             CMP      R0,#+0
   \   000001D4   0xD006             BEQ.N    ??FTM_PinDeinit_29
   \   000001D6   0x2801             CMP      R0,#+1
   \   000001D8   0xD029             BEQ.N    ??FTM_PinDeinit_30
   \   000001DA   0x2808             CMP      R0,#+8
   \   000001DC   0xD04C             BEQ.N    ??FTM_PinDeinit_31
   \   000001DE   0x2809             CMP      R0,#+9
   \   000001E0   0xD06F             BEQ.N    ??FTM_PinDeinit_32
   \   000001E2   0xE093             B.N      ??FTM_PinDeinit_33
   1186              {
   1187              case FTM_Ch0:
   1188                if((PORTA->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_29: (+1)
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x40049020
   \   000001E8   0x6800             LDR      R0,[R0, #+0]
   \   000001EA   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000001EE   0xF5B0 0x7F40      CMP      R0,#+768
   \   000001F2   0xD103             BNE.N    ??FTM_PinDeinit_34
   1189                  PORTA->PCR[8] = PORT_PCR_MUX(0); 
   \   000001F4   0x2000             MOVS     R0,#+0
   \   000001F6   0x.... 0x....      LDR.W    R3,??DataTable11  ;; 0x40049020
   \   000001FA   0x6018             STR      R0,[R3, #+0]
   1190                if((PORTA->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_34: (+1)
   \   000001FC   0x.... 0x....      LDR.W    R0,??DataTable11_1  ;; 0x40049030
   \   00000200   0x6800             LDR      R0,[R0, #+0]
   \   00000202   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000206   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000020A   0xD103             BNE.N    ??FTM_PinDeinit_35
   1191                  PORTA->PCR[12] = PORT_PCR_MUX(0);
   \   0000020C   0x2000             MOVS     R0,#+0
   \   0000020E   0x.... 0x....      LDR.W    R3,??DataTable11_1  ;; 0x40049030
   \   00000212   0x6018             STR      R0,[R3, #+0]
   1192                if((PORTB->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_35: (+1)
   \   00000214   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x4004a000
   \   00000218   0x6800             LDR      R0,[R0, #+0]
   \   0000021A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000021E   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000222   0xD103             BNE.N    ??FTM_PinDeinit_36
   1193                  PORTB->PCR[0] = PORT_PCR_MUX(0);
   \   00000224   0x2000             MOVS     R0,#+0
   \   00000226   0x.... 0x....      LDR.W    R3,??DataTable12  ;; 0x4004a000
   \   0000022A   0x6018             STR      R0,[R3, #+0]
   1194                break;
   \                     ??FTM_PinDeinit_36: (+1)
   \   0000022C   0xE196             B.N      ??FTM_PinDeinit_12
   1195              case FTM_Ch1:
   1196                if((PORTA->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_30: (+1)
   \   0000022E   0x.... 0x....      LDR.W    R0,??DataTable14  ;; 0x40049024
   \   00000232   0x6800             LDR      R0,[R0, #+0]
   \   00000234   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000238   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000023C   0xD103             BNE.N    ??FTM_PinDeinit_37
   1197                  PORTA->PCR[9] = PORT_PCR_MUX(0); 
   \   0000023E   0x2000             MOVS     R0,#+0
   \   00000240   0x.... 0x....      LDR.W    R3,??DataTable14  ;; 0x40049024
   \   00000244   0x6018             STR      R0,[R3, #+0]
   1198                if((PORTA->PCR[13]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_37: (+1)
   \   00000246   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40049034
   \   0000024A   0x6800             LDR      R0,[R0, #+0]
   \   0000024C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000250   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000254   0xD103             BNE.N    ??FTM_PinDeinit_38
   1199                  PORTA->PCR[13] = PORT_PCR_MUX(0);
   \   00000256   0x2000             MOVS     R0,#+0
   \   00000258   0x.... 0x....      LDR.W    R3,??DataTable15  ;; 0x40049034
   \   0000025C   0x6018             STR      R0,[R3, #+0]
   1200                if((PORTB->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_38: (+1)
   \   0000025E   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x4004a004
   \   00000262   0x6800             LDR      R0,[R0, #+0]
   \   00000264   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000268   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000026C   0xD103             BNE.N    ??FTM_PinDeinit_39
   1201                  PORTB->PCR[1] = PORT_PCR_MUX(0);
   \   0000026E   0x2000             MOVS     R0,#+0
   \   00000270   0x.... 0x....      LDR.W    R3,??DataTable15_1  ;; 0x4004a004
   \   00000274   0x6018             STR      R0,[R3, #+0]
   1202                break;
   \                     ??FTM_PinDeinit_39: (+1)
   \   00000276   0xE171             B.N      ??FTM_PinDeinit_12
   1203              case FTM_PhA:
   1204                if((PORTA->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_31: (+1)
   \   00000278   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x40049020
   \   0000027C   0x6800             LDR      R0,[R0, #+0]
   \   0000027E   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000282   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000286   0xD103             BNE.N    ??FTM_PinDeinit_40
   1205                  PORTA->PCR[8] = PORT_PCR_MUX(0); 
   \   00000288   0x2000             MOVS     R0,#+0
   \   0000028A   0x.... 0x....      LDR.W    R3,??DataTable11  ;; 0x40049020
   \   0000028E   0x6018             STR      R0,[R3, #+0]
   1206                if((PORTA->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(7))
   \                     ??FTM_PinDeinit_40: (+1)
   \   00000290   0x.... 0x....      LDR.W    R0,??DataTable11_1  ;; 0x40049030
   \   00000294   0x6800             LDR      R0,[R0, #+0]
   \   00000296   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000029A   0xF5B0 0x6FE0      CMP      R0,#+1792
   \   0000029E   0xD103             BNE.N    ??FTM_PinDeinit_41
   1207                  PORTA->PCR[12] = PORT_PCR_MUX(0);
   \   000002A0   0x2000             MOVS     R0,#+0
   \   000002A2   0x.... 0x....      LDR.W    R3,??DataTable11_1  ;; 0x40049030
   \   000002A6   0x6018             STR      R0,[R3, #+0]
   1208                if((PORTB->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_41: (+1)
   \   000002A8   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x4004a000
   \   000002AC   0x6800             LDR      R0,[R0, #+0]
   \   000002AE   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000002B2   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   000002B6   0xD103             BNE.N    ??FTM_PinDeinit_42
   1209                  PORTB->PCR[0] = PORT_PCR_MUX(0);
   \   000002B8   0x2000             MOVS     R0,#+0
   \   000002BA   0x.... 0x....      LDR.W    R3,??DataTable12  ;; 0x4004a000
   \   000002BE   0x6018             STR      R0,[R3, #+0]
   1210                break;
   \                     ??FTM_PinDeinit_42: (+1)
   \   000002C0   0xE14C             B.N      ??FTM_PinDeinit_12
   1211              case FTM_PhB:
   1212                if((PORTA->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_32: (+1)
   \   000002C2   0x.... 0x....      LDR.W    R0,??DataTable14  ;; 0x40049024
   \   000002C6   0x6800             LDR      R0,[R0, #+0]
   \   000002C8   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000002CC   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   000002D0   0xD103             BNE.N    ??FTM_PinDeinit_43
   1213                  PORTA->PCR[9] = PORT_PCR_MUX(0); 
   \   000002D2   0x2000             MOVS     R0,#+0
   \   000002D4   0x.... 0x....      LDR.W    R3,??DataTable14  ;; 0x40049024
   \   000002D8   0x6018             STR      R0,[R3, #+0]
   1214                if((PORTA->PCR[13]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(7))
   \                     ??FTM_PinDeinit_43: (+1)
   \   000002DA   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40049034
   \   000002DE   0x6800             LDR      R0,[R0, #+0]
   \   000002E0   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000002E4   0xF5B0 0x6FE0      CMP      R0,#+1792
   \   000002E8   0xD103             BNE.N    ??FTM_PinDeinit_44
   1215                  PORTA->PCR[13] = PORT_PCR_MUX(0);
   \   000002EA   0x2000             MOVS     R0,#+0
   \   000002EC   0x.... 0x....      LDR.W    R3,??DataTable15  ;; 0x40049034
   \   000002F0   0x6018             STR      R0,[R3, #+0]
   1216                if((PORTB->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_44: (+1)
   \   000002F2   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x4004a004
   \   000002F6   0x6800             LDR      R0,[R0, #+0]
   \   000002F8   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000002FC   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000300   0xD103             BNE.N    ??FTM_PinDeinit_45
   1217                  PORTB->PCR[1] = PORT_PCR_MUX(0);
   \   00000302   0x2000             MOVS     R0,#+0
   \   00000304   0x.... 0x....      LDR.W    R3,??DataTable15_1  ;; 0x4004a004
   \   00000308   0x6018             STR      R0,[R3, #+0]
   1218                break;
   \                     ??FTM_PinDeinit_45: (+1)
   \   0000030A   0xE127             B.N      ??FTM_PinDeinit_12
   1219              default:
   1220                return 0;   
   \                     ??FTM_PinDeinit_33: (+1)
   \   0000030C   0x2000             MOVS     R0,#+0
   \   0000030E   0xE126             B.N      ??FTM_PinDeinit_27
   1221              }
   1222            }
   1223            else if(ftmx == FTM2)
   \                     ??FTM_PinDeinit_28: (+1)
   \   00000310   0x.... 0x....      LDR.W    R0,??DataTable15_41  ;; 0x400b8000
   \   00000314   0x4282             CMP      R2,R0
   \   00000316   0xD160             BNE.N    ??FTM_PinDeinit_46
   1224            {
   1225              switch(chn)
   \   00000318   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000031A   0x0008             MOVS     R0,R1
   \   0000031C   0x2800             CMP      R0,#+0
   \   0000031E   0xD006             BEQ.N    ??FTM_PinDeinit_47
   \   00000320   0x2801             CMP      R0,#+1
   \   00000322   0xD019             BEQ.N    ??FTM_PinDeinit_48
   \   00000324   0x2808             CMP      R0,#+8
   \   00000326   0xD02C             BEQ.N    ??FTM_PinDeinit_49
   \   00000328   0x2809             CMP      R0,#+9
   \   0000032A   0xD03F             BEQ.N    ??FTM_PinDeinit_50
   \   0000032C   0xE053             B.N      ??FTM_PinDeinit_51
   1226              {
   1227              case FTM_Ch0:
   1228                if((PORTA->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_47: (+1)
   \   0000032E   0x....             LDR.N    R0,??DataTable15_2  ;; 0x40049028
   \   00000330   0x6800             LDR      R0,[R0, #+0]
   \   00000332   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000336   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000033A   0xD102             BNE.N    ??FTM_PinDeinit_52
   1229                  PORTA->PCR[10] = PORT_PCR_MUX(0); 
   \   0000033C   0x2000             MOVS     R0,#+0
   \   0000033E   0x....             LDR.N    R3,??DataTable15_2  ;; 0x40049028
   \   00000340   0x6018             STR      R0,[R3, #+0]
   1230                if((PORTB->PCR[18]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_52: (+1)
   \   00000342   0x....             LDR.N    R0,??DataTable15_3  ;; 0x4004a048
   \   00000344   0x6800             LDR      R0,[R0, #+0]
   \   00000346   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000034A   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000034E   0xD102             BNE.N    ??FTM_PinDeinit_53
   1231                  PORTB->PCR[18] = PORT_PCR_MUX(0);
   \   00000350   0x2000             MOVS     R0,#+0
   \   00000352   0x....             LDR.N    R3,??DataTable15_3  ;; 0x4004a048
   \   00000354   0x6018             STR      R0,[R3, #+0]
   1232                break;
   \                     ??FTM_PinDeinit_53: (+1)
   \   00000356   0xE101             B.N      ??FTM_PinDeinit_12
   1233              case FTM_Ch1:
   1234                if((PORTA->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_48: (+1)
   \   00000358   0x....             LDR.N    R0,??DataTable15_4  ;; 0x4004902c
   \   0000035A   0x6800             LDR      R0,[R0, #+0]
   \   0000035C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000360   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000364   0xD102             BNE.N    ??FTM_PinDeinit_54
   1235                  PORTA->PCR[11] = PORT_PCR_MUX(0); 
   \   00000366   0x2000             MOVS     R0,#+0
   \   00000368   0x....             LDR.N    R3,??DataTable15_4  ;; 0x4004902c
   \   0000036A   0x6018             STR      R0,[R3, #+0]
   1236                if((PORTB->PCR[19]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_54: (+1)
   \   0000036C   0x....             LDR.N    R0,??DataTable15_5  ;; 0x4004a04c
   \   0000036E   0x6800             LDR      R0,[R0, #+0]
   \   00000370   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000374   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000378   0xD102             BNE.N    ??FTM_PinDeinit_55
   1237                  PORTB->PCR[19] = PORT_PCR_MUX(0);
   \   0000037A   0x2000             MOVS     R0,#+0
   \   0000037C   0x....             LDR.N    R3,??DataTable15_5  ;; 0x4004a04c
   \   0000037E   0x6018             STR      R0,[R3, #+0]
   1238                break;
   \                     ??FTM_PinDeinit_55: (+1)
   \   00000380   0xE0EC             B.N      ??FTM_PinDeinit_12
   1239              case FTM_PhA:
   1240                if((PORTA->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_49: (+1)
   \   00000382   0x....             LDR.N    R0,??DataTable15_2  ;; 0x40049028
   \   00000384   0x6800             LDR      R0,[R0, #+0]
   \   00000386   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000038A   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000038E   0xD102             BNE.N    ??FTM_PinDeinit_56
   1241                  PORTA->PCR[10] = PORT_PCR_MUX(0); 
   \   00000390   0x2000             MOVS     R0,#+0
   \   00000392   0x....             LDR.N    R3,??DataTable15_2  ;; 0x40049028
   \   00000394   0x6018             STR      R0,[R3, #+0]
   1242                if((PORTB->PCR[18]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_56: (+1)
   \   00000396   0x....             LDR.N    R0,??DataTable15_3  ;; 0x4004a048
   \   00000398   0x6800             LDR      R0,[R0, #+0]
   \   0000039A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000039E   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   000003A2   0xD102             BNE.N    ??FTM_PinDeinit_57
   1243                  PORTB->PCR[18] = PORT_PCR_MUX(0);
   \   000003A4   0x2000             MOVS     R0,#+0
   \   000003A6   0x....             LDR.N    R3,??DataTable15_3  ;; 0x4004a048
   \   000003A8   0x6018             STR      R0,[R3, #+0]
   1244                break;
   \                     ??FTM_PinDeinit_57: (+1)
   \   000003AA   0xE0D7             B.N      ??FTM_PinDeinit_12
   1245              case FTM_PhB:
   1246                if((PORTA->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_50: (+1)
   \   000003AC   0x....             LDR.N    R0,??DataTable15_4  ;; 0x4004902c
   \   000003AE   0x6800             LDR      R0,[R0, #+0]
   \   000003B0   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000003B4   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   000003B8   0xD102             BNE.N    ??FTM_PinDeinit_58
   1247                  PORTA->PCR[11] = PORT_PCR_MUX(0); 
   \   000003BA   0x2000             MOVS     R0,#+0
   \   000003BC   0x....             LDR.N    R3,??DataTable15_4  ;; 0x4004902c
   \   000003BE   0x6018             STR      R0,[R3, #+0]
   1248                if((PORTB->PCR[19]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_58: (+1)
   \   000003C0   0x....             LDR.N    R0,??DataTable15_5  ;; 0x4004a04c
   \   000003C2   0x6800             LDR      R0,[R0, #+0]
   \   000003C4   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000003C8   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   000003CC   0xD102             BNE.N    ??FTM_PinDeinit_59
   1249                  PORTB->PCR[19] = PORT_PCR_MUX(0);
   \   000003CE   0x2000             MOVS     R0,#+0
   \   000003D0   0x....             LDR.N    R3,??DataTable15_5  ;; 0x4004a04c
   \   000003D2   0x6018             STR      R0,[R3, #+0]
   1250                break;
   \                     ??FTM_PinDeinit_59: (+1)
   \   000003D4   0xE0C2             B.N      ??FTM_PinDeinit_12
   1251              default:
   1252                return 0;   
   \                     ??FTM_PinDeinit_51: (+1)
   \   000003D6   0x2000             MOVS     R0,#+0
   \   000003D8   0xE0C1             B.N      ??FTM_PinDeinit_27
   1253              }
   1254            }
   1255          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
   1256            else if(ftmx == FTM3)
   \                     ??FTM_PinDeinit_46: (+1)
   \   000003DA   0x....             LDR.N    R0,??DataTable15_6  ;; 0x400b9000
   \   000003DC   0x4282             CMP      R2,R0
   \   000003DE   0xF040 0x80BB      BNE.W    ??FTM_PinDeinit_60
   1257            {
   1258              switch(chn)
   \   000003E2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000003E4   0x2900             CMP      R1,#+0
   \   000003E6   0xD00D             BEQ.N    ??FTM_PinDeinit_61
   \   000003E8   0x2902             CMP      R1,#+2
   \   000003EA   0xD035             BEQ.N    ??FTM_PinDeinit_62
   \   000003EC   0xD31F             BCC.N    ??FTM_PinDeinit_63
   \   000003EE   0x2904             CMP      R1,#+4
   \   000003F0   0xD05C             BEQ.N    ??FTM_PinDeinit_64
   \   000003F2   0xD346             BCC.N    ??FTM_PinDeinit_65
   \   000003F4   0x2906             CMP      R1,#+6
   \   000003F6   0xF000 0x8083      BEQ.W    ??FTM_PinDeinit_66
   \   000003FA   0xD36C             BCC.N    ??FTM_PinDeinit_67
   \   000003FC   0x2907             CMP      R1,#+7
   \   000003FE   0xF000 0x8094      BEQ.W    ??FTM_PinDeinit_68
   \   00000402   0xE0A7             B.N      ??FTM_PinDeinit_69
   1259              {
   1260              case FTM_Ch0:
   1261                if((PORTE->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_61: (+1)
   \   00000404   0x....             LDR.N    R0,??DataTable15_7  ;; 0x4004d014
   \   00000406   0x6800             LDR      R0,[R0, #+0]
   \   00000408   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000040C   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000410   0xD102             BNE.N    ??FTM_PinDeinit_70
   1262                  PORTE->PCR[5] = PORT_PCR_MUX(0); 
   \   00000412   0x2000             MOVS     R0,#+0
   \   00000414   0x....             LDR.N    R3,??DataTable15_7  ;; 0x4004d014
   \   00000416   0x6018             STR      R0,[R3, #+0]
   1263                if((PORTD->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_70: (+1)
   \   00000418   0x....             LDR.N    R0,??DataTable15_8  ;; 0x4004c000
   \   0000041A   0x6800             LDR      R0,[R0, #+0]
   \   0000041C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000420   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000424   0xD102             BNE.N    ??FTM_PinDeinit_71
   1264                  PORTD->PCR[0] = PORT_PCR_MUX(0);
   \   00000426   0x2000             MOVS     R0,#+0
   \   00000428   0x....             LDR.N    R3,??DataTable15_8  ;; 0x4004c000
   \   0000042A   0x6018             STR      R0,[R3, #+0]
   1265                break;
   \                     ??FTM_PinDeinit_71: (+1)
   \   0000042C   0xE096             B.N      ??FTM_PinDeinit_12
   1266              case FTM_Ch1:
   1267                if((PORTE->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_63: (+1)
   \   0000042E   0x....             LDR.N    R0,??DataTable15_9  ;; 0x4004d018
   \   00000430   0x6800             LDR      R0,[R0, #+0]
   \   00000432   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000436   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000043A   0xD102             BNE.N    ??FTM_PinDeinit_72
   1268                  PORTE->PCR[6] = PORT_PCR_MUX(0); 
   \   0000043C   0x2000             MOVS     R0,#+0
   \   0000043E   0x....             LDR.N    R3,??DataTable15_9  ;; 0x4004d018
   \   00000440   0x6018             STR      R0,[R3, #+0]
   1269                if((PORTD->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_72: (+1)
   \   00000442   0x....             LDR.N    R0,??DataTable15_10  ;; 0x4004c004
   \   00000444   0x6800             LDR      R0,[R0, #+0]
   \   00000446   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000044A   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000044E   0xD102             BNE.N    ??FTM_PinDeinit_73
   1270                  PORTD->PCR[1] = PORT_PCR_MUX(0);
   \   00000450   0x2000             MOVS     R0,#+0
   \   00000452   0x....             LDR.N    R3,??DataTable15_10  ;; 0x4004c004
   \   00000454   0x6018             STR      R0,[R3, #+0]
   1271                break;
   \                     ??FTM_PinDeinit_73: (+1)
   \   00000456   0xE081             B.N      ??FTM_PinDeinit_12
   1272              case FTM_Ch2:
   1273                if((PORTE->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_62: (+1)
   \   00000458   0x....             LDR.N    R0,??DataTable15_11  ;; 0x4004d01c
   \   0000045A   0x6800             LDR      R0,[R0, #+0]
   \   0000045C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000460   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000464   0xD102             BNE.N    ??FTM_PinDeinit_74
   1274                  PORTE->PCR[7] = PORT_PCR_MUX(0); 
   \   00000466   0x2000             MOVS     R0,#+0
   \   00000468   0x....             LDR.N    R3,??DataTable15_11  ;; 0x4004d01c
   \   0000046A   0x6018             STR      R0,[R3, #+0]
   1275                if((PORTD->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_74: (+1)
   \   0000046C   0x....             LDR.N    R0,??DataTable15_12  ;; 0x4004c008
   \   0000046E   0x6800             LDR      R0,[R0, #+0]
   \   00000470   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000474   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000478   0xD102             BNE.N    ??FTM_PinDeinit_75
   1276                  PORTD->PCR[2] = PORT_PCR_MUX(0);
   \   0000047A   0x2000             MOVS     R0,#+0
   \   0000047C   0x....             LDR.N    R3,??DataTable15_12  ;; 0x4004c008
   \   0000047E   0x6018             STR      R0,[R3, #+0]
   1277                break;
   \                     ??FTM_PinDeinit_75: (+1)
   \   00000480   0xE06C             B.N      ??FTM_PinDeinit_12
   1278              case FTM_Ch3:
   1279                if((PORTE->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_65: (+1)
   \   00000482   0x....             LDR.N    R0,??DataTable15_13  ;; 0x4004d020
   \   00000484   0x6800             LDR      R0,[R0, #+0]
   \   00000486   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000048A   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000048E   0xD102             BNE.N    ??FTM_PinDeinit_76
   1280                  PORTE->PCR[8] = PORT_PCR_MUX(0); 
   \   00000490   0x2000             MOVS     R0,#+0
   \   00000492   0x....             LDR.N    R3,??DataTable15_13  ;; 0x4004d020
   \   00000494   0x6018             STR      R0,[R3, #+0]
   1281                if((PORTD->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_76: (+1)
   \   00000496   0x....             LDR.N    R0,??DataTable15_14  ;; 0x4004c00c
   \   00000498   0x6800             LDR      R0,[R0, #+0]
   \   0000049A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000049E   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000004A2   0xD102             BNE.N    ??FTM_PinDeinit_77
   1282                  PORTD->PCR[3] = PORT_PCR_MUX(0);
   \   000004A4   0x2000             MOVS     R0,#+0
   \   000004A6   0x....             LDR.N    R3,??DataTable15_14  ;; 0x4004c00c
   \   000004A8   0x6018             STR      R0,[R3, #+0]
   1283                break;
   \                     ??FTM_PinDeinit_77: (+1)
   \   000004AA   0xE057             B.N      ??FTM_PinDeinit_12
   1284              case FTM_Ch4:
   1285                if((PORTE->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_64: (+1)
   \   000004AC   0x....             LDR.N    R0,??DataTable15_15  ;; 0x4004d024
   \   000004AE   0x6800             LDR      R0,[R0, #+0]
   \   000004B0   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000004B4   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   000004B8   0xD102             BNE.N    ??FTM_PinDeinit_78
   1286                  PORTE->PCR[9] = PORT_PCR_MUX(0); 
   \   000004BA   0x2000             MOVS     R0,#+0
   \   000004BC   0x....             LDR.N    R3,??DataTable15_15  ;; 0x4004d024
   \   000004BE   0x6018             STR      R0,[R3, #+0]
   1287                if((PORTC->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_78: (+1)
   \   000004C0   0x....             LDR.N    R0,??DataTable15_16  ;; 0x4004b020
   \   000004C2   0x6800             LDR      R0,[R0, #+0]
   \   000004C4   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000004C8   0xF5B0 0x7F40      CMP      R0,#+768
   \   000004CC   0xD102             BNE.N    ??FTM_PinDeinit_79
   1288                  PORTC->PCR[8] = PORT_PCR_MUX(0);
   \   000004CE   0x2000             MOVS     R0,#+0
   \   000004D0   0x....             LDR.N    R3,??DataTable15_16  ;; 0x4004b020
   \   000004D2   0x6018             STR      R0,[R3, #+0]
   1289                break;
   \                     ??FTM_PinDeinit_79: (+1)
   \   000004D4   0xE042             B.N      ??FTM_PinDeinit_12
   1290              case FTM_Ch5:
   1291                if((PORTE->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_67: (+1)
   \   000004D6   0x....             LDR.N    R0,??DataTable15_17  ;; 0x4004d028
   \   000004D8   0x6800             LDR      R0,[R0, #+0]
   \   000004DA   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000004DE   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   000004E2   0xD102             BNE.N    ??FTM_PinDeinit_80
   1292                  PORTE->PCR[10] = PORT_PCR_MUX(0); 
   \   000004E4   0x2000             MOVS     R0,#+0
   \   000004E6   0x....             LDR.N    R3,??DataTable15_17  ;; 0x4004d028
   \   000004E8   0x6018             STR      R0,[R3, #+0]
   1293                if((PORTC->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_80: (+1)
   \   000004EA   0x....             LDR.N    R0,??DataTable15_18  ;; 0x4004b024
   \   000004EC   0x6800             LDR      R0,[R0, #+0]
   \   000004EE   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000004F2   0xF5B0 0x7F40      CMP      R0,#+768
   \   000004F6   0xD102             BNE.N    ??FTM_PinDeinit_81
   1294                  PORTC->PCR[9] = PORT_PCR_MUX(0);
   \   000004F8   0x2000             MOVS     R0,#+0
   \   000004FA   0x....             LDR.N    R3,??DataTable15_18  ;; 0x4004b024
   \   000004FC   0x6018             STR      R0,[R3, #+0]
   1295                break;
   \                     ??FTM_PinDeinit_81: (+1)
   \   000004FE   0xE02D             B.N      ??FTM_PinDeinit_12
   1296              case FTM_Ch6:
   1297                if((PORTE->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_66: (+1)
   \   00000500   0x....             LDR.N    R0,??DataTable15_19  ;; 0x4004d02c
   \   00000502   0x6800             LDR      R0,[R0, #+0]
   \   00000504   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000508   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000050C   0xD102             BNE.N    ??FTM_PinDeinit_82
   1298                  PORTE->PCR[11] = PORT_PCR_MUX(0); 
   \   0000050E   0x2000             MOVS     R0,#+0
   \   00000510   0x....             LDR.N    R3,??DataTable15_19  ;; 0x4004d02c
   \   00000512   0x6018             STR      R0,[R3, #+0]
   1299                if((PORTC->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_82: (+1)
   \   00000514   0x....             LDR.N    R0,??DataTable15_20  ;; 0x4004b028
   \   00000516   0x6800             LDR      R0,[R0, #+0]
   \   00000518   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000051C   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000520   0xD102             BNE.N    ??FTM_PinDeinit_83
   1300                  PORTC->PCR[10] = PORT_PCR_MUX(0);
   \   00000522   0x2000             MOVS     R0,#+0
   \   00000524   0x....             LDR.N    R3,??DataTable15_20  ;; 0x4004b028
   \   00000526   0x6018             STR      R0,[R3, #+0]
   1301                break;
   \                     ??FTM_PinDeinit_83: (+1)
   \   00000528   0xE018             B.N      ??FTM_PinDeinit_12
   1302              case FTM_Ch7:
   1303                if((PORTE->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_68: (+1)
   \   0000052A   0x....             LDR.N    R0,??DataTable15_21  ;; 0x4004d030
   \   0000052C   0x6800             LDR      R0,[R0, #+0]
   \   0000052E   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000532   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000536   0xD102             BNE.N    ??FTM_PinDeinit_84
   1304                  PORTE->PCR[12] = PORT_PCR_MUX(0); 
   \   00000538   0x2000             MOVS     R0,#+0
   \   0000053A   0x....             LDR.N    R3,??DataTable15_21  ;; 0x4004d030
   \   0000053C   0x6018             STR      R0,[R3, #+0]
   1305                if((PORTC->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_84: (+1)
   \   0000053E   0x....             LDR.N    R0,??DataTable15_22  ;; 0x4004b02c
   \   00000540   0x6800             LDR      R0,[R0, #+0]
   \   00000542   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000546   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000054A   0xD102             BNE.N    ??FTM_PinDeinit_85
   1306                  PORTC->PCR[11] = PORT_PCR_MUX(0);
   \   0000054C   0x2000             MOVS     R0,#+0
   \   0000054E   0x....             LDR.N    R3,??DataTable15_22  ;; 0x4004b02c
   \   00000550   0x6018             STR      R0,[R3, #+0]
   1307                break;
   \                     ??FTM_PinDeinit_85: (+1)
   \   00000552   0xE003             B.N      ??FTM_PinDeinit_12
   1308              default:
   1309                return 0;     
   \                     ??FTM_PinDeinit_69: (+1)
   \   00000554   0x2000             MOVS     R0,#+0
   \   00000556   0xE002             B.N      ??FTM_PinDeinit_27
   1310              }
   1311            }
   1312          #endif
   1313            else
   1314            {
   1315              return 0;
   \                     ??FTM_PinDeinit_60: (+1)
   \   00000558   0x2000             MOVS     R0,#+0
   \   0000055A   0xE000             B.N      ??FTM_PinDeinit_27
   1316            }
   1317            return 1;
   \                     ??FTM_PinDeinit_12: (+1)
   \   0000055C   0x2001             MOVS     R0,#+1
   \                     ??FTM_PinDeinit_27: (+1)
   \   0000055E   0x4770             BX       LR               ;; return
   1318          }
   1319          
   1320          /*
   1321           * FTM_QD_Init
   1322           * FTM模块正交解码模式初始化，内部调用
   1323           */

   \                                 In section .text, align 2, keep-with-next
   1324          static uint8 FTM_QD_Init(FTM_InitTypeDef ftm_init_structure)
   1325          {
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_QD_InitE15FTM_InitTypeDef: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   1326            uint8 mode = ftm_init_structure.FTM_QdMode;
   \   00000002   0xF89D 0x1012      LDRB     R1,[SP, #+18]
   1327            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000006   0x9A00             LDR      R2,[SP, #+0]
   1328           
   1329            ftmx->MODE |= FTM_MODE_FTMEN_MASK;    //FTM2EN=1   
   \   00000008   0x6D50             LDR      R0,[R2, #+84]
   \   0000000A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000E   0x6550             STR      R0,[R2, #+84]
   1330            
   1331            ftmx->CNTIN = 0;//FTM0计数器初始值为0  
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x64D0             STR      R0,[R2, #+76]
   1332            ftmx->CNT=0;  
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x6050             STR      R0,[R2, #+4]
   1333            ftmx->MOD = 0xFFFF;//结束值  
   \   00000018   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000001C   0x6090             STR      R0,[R2, #+8]
   1334            
   1335            ftmx->QDCTRL |= mode;     //解码模式选择
   \   0000001E   0xF8D2 0x0080      LDR      R0,[R2, #+128]
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x4308             ORRS     R0,R1,R0
   \   00000026   0xF8C2 0x0080      STR      R0,[R2, #+128]
   1336            ftmx->QDCTRL |= FTM_QDCTRL_QUADEN_MASK;       //使能正交解码模式 
   \   0000002A   0xF8D2 0x0080      LDR      R0,[R2, #+128]
   \   0000002E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000032   0xF8C2 0x0080      STR      R0,[R2, #+128]
   1337          
   1338            return 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xB004             ADD      SP,SP,#+16
   \   0000003A   0x4770             BX       LR               ;; return
   1339          }
   1340          

   \                                 In section .text, align 2, keep-with-next
   1341          static uint8 FTM_DEC_Init(FTM_InitTypeDef ftm_init_structure)
   1342          {
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init12FTM_DEC_InitE15FTM_InitTypeDef: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   1343            
   1344            return 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xB004             ADD      SP,SP,#+16
   \   00000006   0x4770             BX       LR               ;; return
   1345          }
   1346          
   1347          /*
   1348           * FTM0--FTM1中断处理函数
   1349           * 与启动文件startup_K60.s中的中断向量表关联
   1350           * 用户无需修改，程序自动进入对应通道中断函数
   1351           */

   \                                 In section .text, align 2, keep-with-next
   1352          void FTM0_IRQHandler(void)
   1353          {
   \                     FTM0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1354          #if (UCOS_II > 0u)
   1355            OS_CPU_SR  cpu_sr = 0u;
   1356            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1357            OSIntEnter();
   1358            OS_EXIT_CRITICAL();
   1359          #endif
   1360            
   1361            FTM_ISR[0]();
   \   00000002   0x....             LDR.N    R0,??DataTable15_42
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
   1362            
   1363          #if (UCOS_II > 0u)
   1364            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1365          #endif
   1366          }
   \                     ??FTM0_IRQHandler_0: (+1)
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
   1367          

   \                                 In section .text, align 2, keep-with-next
   1368          void FTM1_IRQHandler(void)
   1369          {
   \                     FTM1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1370          #if (UCOS_II > 0u)
   1371            OS_CPU_SR  cpu_sr = 0u;
   1372            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1373            OSIntEnter();
   1374            OS_EXIT_CRITICAL();
   1375          #endif
   1376            
   1377            FTM_ISR[1]();
   \   00000002   0x....             LDR.N    R0,??DataTable15_42
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x4780             BLX      R0
   1378            
   1379          #if (UCOS_II > 0u)
   1380            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1381          #endif
   1382          }
   \                     ??FTM1_IRQHandler_0: (+1)
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
   1383          

   \                                 In section .text, align 2, keep-with-next
   1384          void FTM2_IRQHandler(void)
   1385          {
   \                     FTM2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1386          #if (UCOS_II > 0u)
   1387            OS_CPU_SR  cpu_sr = 0u;
   1388            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1389            OSIntEnter();
   1390            OS_EXIT_CRITICAL();
   1391          #endif
   1392            
   1393            FTM_ISR[2]();
   \   00000002   0x....             LDR.N    R0,??DataTable15_42
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x4780             BLX      R0
   1394            
   1395          #if (UCOS_II > 0u)
   1396            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1397          #endif
   1398          }
   \                     ??FTM2_IRQHandler_0: (+1)
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
   1399          
   1400          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)

   \                                 In section .text, align 2, keep-with-next
   1401          void FTM3_IRQHandler(void)
   1402          {
   \                     FTM3_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1403          #if (UCOS_II > 0u)
   1404            OS_CPU_SR  cpu_sr = 0u;
   1405            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1406            OSIntEnter();
   1407            OS_EXIT_CRITICAL();
   1408          #endif
   1409            
   1410            FTM_ISR[3]();
   \   00000002   0x....             LDR.N    R0,??DataTable15_42
   \   00000004   0x68C0             LDR      R0,[R0, #+12]
   \   00000006   0x4780             BLX      R0
   1411            
   1412          #if (UCOS_II > 0u)
   1413            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1414          #endif
   1415          }
   \                     ??FTM3_IRQHandler_0: (+1)
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x400B9000         DC32     0x400b9000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     FTM_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x4004900C         DC32     0x4004900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x4004B004         DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x40049010         DC32     0x40049010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x4004B008         DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x40049014         DC32     0x40049014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x4004901C         DC32     0x4004901c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x40049004         DC32     0x40049004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x40049008         DC32     0x40049008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x4004C01C         DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x40049020         DC32     0x40049020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x40049030         DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x40049024         DC32     0x40049024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x40049034         DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x4004A004         DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x40049028         DC32     0x40049028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x4004A048         DC32     0x4004a048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0x4004902C         DC32     0x4004902c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0x4004A04C         DC32     0x4004a04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \   00000000   0x400B9000         DC32     0x400b9000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \   00000000   0x4004D014         DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \   00000000   0x4004C000         DC32     0x4004c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \   00000000   0x4004D018         DC32     0x4004d018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \   00000000   0x4004C004         DC32     0x4004c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \   00000000   0x4004D01C         DC32     0x4004d01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \   00000000   0x4004C008         DC32     0x4004c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \   00000000   0x4004D020         DC32     0x4004d020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \   00000000   0x4004C00C         DC32     0x4004c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \   00000000   0x4004D024         DC32     0x4004d024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \   00000000   0x4004B020         DC32     0x4004b020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_17:
   \   00000000   0x4004D028         DC32     0x4004d028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_18:
   \   00000000   0x4004B024         DC32     0x4004b024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_19:
   \   00000000   0x4004D02C         DC32     0x4004d02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_20:
   \   00000000   0x4004B028         DC32     0x4004b028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_21:
   \   00000000   0x4004D030         DC32     0x4004d030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_22:
   \   00000000   0x4004B02C         DC32     0x4004b02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_23:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_24:
   \   00000000   0x4004900C         DC32     0x4004900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_25:
   \   00000000   0x4004B004         DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_26:
   \   00000000   0x40049010         DC32     0x40049010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_27:
   \   00000000   0x4004B008         DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_28:
   \   00000000   0x40049014         DC32     0x40049014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_29:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_30:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_31:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_32:
   \   00000000   0x4004901C         DC32     0x4004901c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_33:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_34:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_35:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_36:
   \   00000000   0x40049004         DC32     0x40049004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_37:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_38:
   \   00000000   0x40049008         DC32     0x40049008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_39:
   \   00000000   0x4004C01C         DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_40:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_41:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_42:
   \   00000000   0x........         DC32     FTM_ISR

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x78          DC8 5CH, 78H, 73H, 6BH, 31H, 39H, 39H, 34H
   \              0x73 0x6B    
   \              0x31 0x39    
   \              0x39 0x34    
   \   00000010   0x30 0x39          DC8 30H, 39H, 31H, 30H, 5CH, 44H, 65H, 73H
   \              0x31 0x30    
   \              0x5C 0x44    
   \              0x65 0x73    
   \   00000018   0x6B 0x74          DC8 6BH, 74H, 6FH, 70H, 5CH, 66H, 6CH, 69H
   \              0x6F 0x70    
   \              0x5C 0x66    
   \              0x6C 0x69    
   \   00000020   0x67 0x68          DC8 67H, 68H, 74H, 43H, 6FH, 6EH, 74H, 72H
   \              0x74 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \   00000028   0x6F 0x6C          DC8 6FH, 6CH, 6CH, 65H, 72H, 2DH, 31H, 5CH
   \              0x6C 0x65    
   \              0x72 0x2D    
   \              0x31 0x5C    
   \   00000030   0x66 0x6C          DC8 66H, 6CH, 69H, 67H, 68H, 74H, 43H, 6FH
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x43 0x6F    
   \   00000038   0x6E 0x74          DC8 6EH, 74H, 72H, 6FH, 6CH, 6CH, 65H, 72H
   \              0x72 0x6F    
   \              0x6C 0x6C    
   \              0x65 0x72    
   \   00000040   0x2D 0x31          DC8 2DH, 31H, 5CH, 70H, 72H, 6FH, 67H, 72H
   \              0x5C 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \   00000048   0x61 0x6D          DC8 61H, 6DH, 5CH, 6CH, 69H, 62H, 5CH, 4CH
   \              0x5C 0x6C    
   \              0x69 0x62    
   \              0x5C 0x4C    
   \   00000050   0x50 0x4C          DC8 50H, 4CH, 44H, 5CH, 48H, 57H, 5CH, 46H
   \              0x44 0x5C    
   \              0x48 0x57    
   \              0x5C 0x46    
   \   00000058   0x54 0x4D          DC8 54H, 4DH, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \   0000005D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1416          #endif
   1417          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   FTM0_IRQHandler
         8   -- Indirect call
       8   FTM1_IRQHandler
         8   -- Indirect call
       8   FTM2_IRQHandler
         8   -- Indirect call
       8   FTM3_IRQHandler
         8   -- Indirect call
      16   FTM_DEC_Init(FTM_InitTypeDef)
      48   FTM_Deinit
        32   -> FTM_DisableIrq
        48   -> __aeabi_memcpy4
      16   FTM_DisableChn
        16   -> FTM_PinDeinit(FTM_Type *, FtmChnEnum)
      32   FTM_DisableIrq
        32   -> __NVIC_DisableIRQ(IRQn)
      32   FTM_EnableIrq
        32   -> __NVIC_EnableIRQ(IRQn)
      24   FTM_IC_Enable
        24   -> FTM_PinInit(FTM_Type *, FtmChnEnum, PortPinsEnum)
      40   FTM_IC_Init(FTM_InitTypeDef)
        40   -> assert_failed
      56   FTM_Init
        40   -> FTM_DEC_Init(FTM_InitTypeDef)
        40   -> FTM_IC_Init(FTM_InitTypeDef)
        40   -> FTM_PWM_Init(FTM_InitTypeDef)
        40   -> FTM_QD_Init(FTM_InitTypeDef)
        56   -> __aeabi_memcpy4
        40   -> assert_failed
      24   FTM_PWM_ChangeDuty
        24   -> assert_failed
      32   FTM_PWM_Enable
        32   -> FTM_PinInit(FTM_Type *, FtmChnEnum, PortPinsEnum)
        32   -> assert_failed
      40   FTM_PWM_Init(FTM_InitTypeDef)
        40   -> assert_failed
       0   FTM_PinDeinit(FTM_Type *, FtmChnEnum)
       4   FTM_PinInit(FTM_Type *, FtmChnEnum, PortPinsEnum)
       8   FTM_QD_Disable
         8   -> FTM_PinDeinit(FTM_Type *, FtmChnEnum)
      16   FTM_QD_Enable
        16   -> FTM_PinInit(FTM_Type *, FtmChnEnum, PortPinsEnum)
      16   FTM_QD_Init(FTM_InitTypeDef)
       0   __NVIC_DisableIRQ(IRQn)
       0   __NVIC_EnableIRQ(IRQn)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable12
       4  ??DataTable14
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_18
       4  ??DataTable15_19
       4  ??DataTable15_2
       4  ??DataTable15_20
       4  ??DataTable15_21
       4  ??DataTable15_22
       4  ??DataTable15_23
       4  ??DataTable15_24
       4  ??DataTable15_25
       4  ??DataTable15_26
       4  ??DataTable15_27
       4  ??DataTable15_28
       4  ??DataTable15_29
       4  ??DataTable15_3
       4  ??DataTable15_30
       4  ??DataTable15_31
       4  ??DataTable15_32
       4  ??DataTable15_33
       4  ??DataTable15_34
       4  ??DataTable15_35
       4  ??DataTable15_36
       4  ??DataTable15_37
       4  ??DataTable15_38
       4  ??DataTable15_39
       4  ??DataTable15_4
       4  ??DataTable15_40
       4  ??DataTable15_41
       4  ??DataTable15_42
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      96  ?_0
      10  FTM0_IRQHandler
      10  FTM1_IRQHandler
      10  FTM2_IRQHandler
      10  FTM3_IRQHandler
       8  FTM_DEC_Init(FTM_InitTypeDef)
     144  FTM_Deinit
      40  FTM_DisableChn
      68  FTM_DisableIrq
      68  FTM_EnableIrq
     178  FTM_IC_Enable
     160  FTM_IC_Init(FTM_InitTypeDef)
      16  FTM_ISR
     320  FTM_Init
      80  FTM_PWM_ChangeDuty
     124  FTM_PWM_Enable
     318  FTM_PWM_Init(FTM_InitTypeDef)
    1376  FTM_PinDeinit(FTM_Type *, FtmChnEnum)
    1782  FTM_PinInit(FTM_Type *, FtmChnEnum, PortPinsEnum)
      64  FTM_QD_Disable
      76  FTM_QD_Enable
      60  FTM_QD_Init(FTM_InitTypeDef)
      30  __NVIC_DisableIRQ(IRQn)
      30  __NVIC_EnableIRQ(IRQn)
      72  -- Other

 
    72 bytes in section .ARM.exidx
    16 bytes in section .bss
    96 bytes in section .rodata
 5 274 bytes in section .text
 
 5 274 bytes of CODE  memory
   168 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: none
