###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       18/Jun/2018  19:48:02
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\SBus.cpp
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW2C92.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\SBus.cpp
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\SBus.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\SBus.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\SBus.cpp
      1          #include "SBus.h"

   \                                 In section .text, align 2
   \   __code __interwork __softfp CSBus::CSBus()
   \                     _ZN5CSBusC1Ev: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xF880 0x11AF      STRB     R1,[R0, #+431]
   \   00000006   0x4770             BX       LR               ;; return
      2          

   \                                 In section .bss, align 4
      3          CSBus *SBus;
   \                     SBus:
   \   00000000                      DS8 4
      4          

   \                                 In section .text, align 2, keep-with-next
      5          void SBus_Init()
      6          {
   \                     _Z9SBus_Initv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x....             LDR.N    R0,??DataTable1
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD105             BNE.N    ??SBus_Init_0
      7            static CSBus SBus_static;
   \   0000000A   0x....             LDR.N    R0,??DataTable1_1
   \   0000000C   0x.... 0x....      BL       _ZN5CSBusC1Ev
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable1
   \   00000014   0x7008             STRB     R0,[R1, #+0]
      8            SBus = &SBus_static;
   \                     ??SBus_Init_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable1_1
   \   00000018   0x....             LDR.N    R1,??DataTable1_2
   \   0000001A   0x6008             STR      R0,[R1, #+0]
      9            SBus->DMA_CHn_Rx = DMA_CH10;
   \   0000001C   0x200A             MOVS     R0,#+10
   \   0000001E   0x....             LDR.N    R1,??DataTable1_2
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x7008             STRB     R0,[R1, #+0]
     10          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     `SBus_Init()::SBus_static`:
   \   00000000                      DS8 440
     11          
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void CSBus::update()
     14          {
   \                     _ZN5CSBus6updateEv: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0x0005             MOVS     R5,R0
     15            bool newPackage = false;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
     16            int i = 0, i0 = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x2600             MOVS     R6,#+0
     17            int address0 = (DMA0->TCD[DMA_CHn_Rx].DADDR) - (uint32)(&uartData[0]);
   \   00000010   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40009000
   \   00000012   0x782A             LDRB     R2,[R5, #+0]
   \   00000014   0x0152             LSLS     R2,R2,#+5
   \   00000016   0x4410             ADD      R0,R0,R2
   \   00000018   0x6900             LDR      R0,[R0, #+16]
   \   0000001A   0x1C6F             ADDS     R7,R5,#+1
   \   0000001C   0x1BC7             SUBS     R7,R0,R7
     18            int moveLength = 0;
   \   0000001E   0x2200             MOVS     R2,#+0
     19            const int packageLength = 25;
   \   00000020   0x2019             MOVS     R0,#+25
   \   00000022   0x9001             STR      R0,[SP, #+4]
     20            bool loopFlag = false;
   \   00000024   0x2400             MOVS     R4,#+0
     21            
     22            byteInterval = t - byte_lastTime;
   \   00000026   0x....             LDR.N    R0,??DataTable1_4
   \   00000028   0x6803             LDR      R3,[R0, #+0]
   \   0000002A   0xF8D5 0x0134      LDR      R0,[R5, #+308]
   \   0000002E   0x1A1B             SUBS     R3,R3,R0
   \   00000030   0xF8C5 0x3130      STR      R3,[R5, #+304]
     23          
     24            for(; i < address0; i++)
   \                     ??update_0: (+1)
   \   00000034   0x42B9             CMP      R1,R7
   \   00000036   0xDA1B             BGE.N    ??update_1
     25            {
     26              for(; uartData[i] != '0'; i++)
   \                     ??update_2: (+1)
   \   00000038   0xEB05 0x0301      ADD      R3,R5,R1
   \   0000003C   0x785B             LDRB     R3,[R3, #+1]
   \   0000003E   0x2B30             CMP      R3,#+48
   \   00000040   0xD006             BEQ.N    ??update_3
     27              {
     28                if(i >= address0)
   \   00000042   0x42B9             CMP      R1,R7
   \   00000044   0xDB02             BLT.N    ??update_4
     29                {
     30                  loopFlag = true;
   \   00000046   0x2301             MOVS     R3,#+1
   \   00000048   0x001C             MOVS     R4,R3
     31                  break;
   \   0000004A   0xE001             B.N      ??update_3
     32                }
     33              }
   \                     ??update_4: (+1)
   \   0000004C   0x1C49             ADDS     R1,R1,#+1
   \   0000004E   0xE7F3             B.N      ??update_2
     34                
     35              if(loopFlag)
   \                     ??update_3: (+1)
   \   00000050   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000052   0x2C00             CMP      R4,#+0
   \   00000054   0xD10C             BNE.N    ??update_1
     36              {
     37                break;
     38              }
     39              if(i - i0 < packageLength - 1)
   \                     ??update_5: (+1)
   \   00000056   0x1B8B             SUBS     R3,R1,R6
   \   00000058   0x2B18             CMP      R3,#+24
   \   0000005A   0xDB07             BLT.N    ??update_6
     40              {
     41                continue;
     42              }
     43              byte_lastTime = t;
   \                     ??update_7: (+1)
   \   0000005C   0x....             LDR.N    R3,??DataTable1_4
   \   0000005E   0x681B             LDR      R3,[R3, #+0]
   \   00000060   0xF8C5 0x3134      STR      R3,[R5, #+308]
     44          //    char checkSum = 0; //注意每个包的checkSum都要清零
     45          //    for(int k = i - (packageLength - 1); k < i - 1; k++)
     46          //    {
     47          //      checkSum += uartData[k];
     48          //    }
     49          //    if(checkSum != uartData[i-1])
     50          //    {
     51          //      continue;
     52          //    }
     53              i0 = i;    
   \   00000064   0x000E             MOVS     R6,R1
     54              int packageTop = i - packageLength + 1;
   \   00000066   0xF1B1 0x0318      SUBS     R3,R1,#+24
   \   0000006A   0x0018             MOVS     R0,R3
     55            }
   \                     ??update_6: (+1)
   \   0000006C   0x1C49             ADDS     R1,R1,#+1
   \   0000006E   0xE7E1             B.N      ??update_0
     56           
     57            moveLength = (DMA0->TCD[DMA_CHn_Rx].DADDR - (uint32)&uartData[0]) - i0 - 1;
   \                     ??update_1: (+1)
   \   00000070   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40009000
   \   00000072   0x782B             LDRB     R3,[R5, #+0]
   \   00000074   0x015B             LSLS     R3,R3,#+5
   \   00000076   0x4418             ADD      R0,R0,R3
   \   00000078   0x6900             LDR      R0,[R0, #+16]
   \   0000007A   0xF115 0x0801      ADDS     R8,R5,#+1
   \   0000007E   0xEBB0 0x0808      SUBS     R8,R0,R8
   \   00000082   0xEBB8 0x0806      SUBS     R8,R8,R6
   \   00000086   0xF1B8 0x0801      SUBS     R8,R8,#+1
     58            if(moveLength < 0) moveLength = 0;
   \   0000008A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000008E   0xD501             BPL.N    ??update_8
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x4680             MOV      R8,R0
     59             
     60            DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&uartData[0] + moveLength);
   \                     ??update_8: (+1)
   \   00000094   0x1C68             ADDS     R0,R5,#+1
   \   00000096   0xEB18 0x0000      ADDS     R0,R8,R0
   \   0000009A   0x....             LDR.N    R2,??DataTable1_3  ;; 0x40009000
   \   0000009C   0x782B             LDRB     R3,[R5, #+0]
   \   0000009E   0x015B             LSLS     R3,R3,#+5
   \   000000A0   0x441A             ADD      R2,R2,R3
   \   000000A2   0x6110             STR      R0,[R2, #+16]
     61            for(i = 0; i < moveLength; i++)
   \   000000A4   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??update_9: (+1)
   \   000000A8   0x45C1             CMP      R9,R8
   \   000000AA   0xDA09             BGE.N    ??update_10
     62            {
     63              uartData[i] = uartData[i0 + i];
   \   000000AC   0xEB19 0x0006      ADDS     R0,R9,R6
   \   000000B0   0x4428             ADD      R0,R5,R0
   \   000000B2   0x7840             LDRB     R0,[R0, #+1]
   \   000000B4   0xEB05 0x0109      ADD      R1,R5,R9
   \   000000B8   0x7048             STRB     R0,[R1, #+1]
     64            }
   \   000000BA   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000BE   0xE7F3             B.N      ??update_9
     65            memset(uartData + moveLength, 1, 200 * sizeof(char));
   \                     ??update_10: (+1)
   \   000000C0   0x20C8             MOVS     R0,#+200
   \   000000C2   0x9002             STR      R0,[SP, #+8]
   \   000000C4   0xF05F 0x0A01      MOVS     R10,#+1
   \   000000C8   0xEB05 0x0008      ADD      R0,R5,R8
   \   000000CC   0xF110 0x0B01      ADDS     R11,R0,#+1
   \   000000D0   0x4652             MOV      R2,R10
   \   000000D2   0x9902             LDR      R1,[SP, #+8]
   \   000000D4   0x4658             MOV      R0,R11
   \   000000D6   0x.... 0x....      BL       __aeabi_memset
     66            if(address0 > 100)
   \   000000DA   0x2F65             CMP      R7,#+101
   \   000000DC   0xDB05             BLT.N    ??update_11
     67            {
     68              DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&uartData[0]);
   \   000000DE   0x1C68             ADDS     R0,R5,#+1
   \   000000E0   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40009000
   \   000000E2   0x782A             LDRB     R2,[R5, #+0]
   \   000000E4   0x0152             LSLS     R2,R2,#+5
   \   000000E6   0x4411             ADD      R1,R1,R2
   \   000000E8   0x6108             STR      R0,[R1, #+16]
     69            }
     70            
     71          }
   \                     ??update_11: (+1)
   \   000000EA   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
     72          
     73          
     74          
     75          

   \                                 In section .text, align 2, keep-with-next
     76          unsigned char CSBus::sbus_convert(unsigned char *data_in)
     77          { 
   \                     _ZN5CSBus12sbus_convertEPh: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0002             MOVS     R2,R0
     78            int i;
     79            
     80            if ((data_in[0]==0x0F) && (data_in[24] == 0)) 
   \   00000004   0x7808             LDRB     R0,[R1, #+0]
   \   00000006   0x280F             CMP      R0,#+15
   \   00000008   0xF040 0x807F      BNE.W    ??sbus_convert_0
   \   0000000C   0x7E08             LDRB     R0,[R1, #+24]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD17B             BNE.N    ??sbus_convert_0
     81            {
     82              // clear channels[]
     83              for (i=0; i<16; i++) 
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??sbus_convert_1: (+1)
   \   00000014   0x2810             CMP      R0,#+16
   \   00000016   0xDA06             BGE.N    ??sbus_convert_2
     84              {
     85                channels[i] = 0;
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0xEB02 0x0480      ADD      R4,R2,R0, LSL #+2
   \   0000001E   0xF8C4 0x313C      STR      R3,[R4, #+316]
     86              }
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0xE7F6             B.N      ??sbus_convert_1
     87              
     88              // reset counters
     89              byte_in_sbus = 1;
   \                     ??sbus_convert_2: (+1)
   \   00000026   0x2301             MOVS     R3,#+1
   \   00000028   0xF882 0x31AB      STRB     R3,[R2, #+427]
     90              bit_in_sbus = 0;
   \   0000002C   0x2300             MOVS     R3,#+0
   \   0000002E   0xF882 0x31AC      STRB     R3,[R2, #+428]
     91              ch = 0;
   \   00000032   0x2300             MOVS     R3,#+0
   \   00000034   0xF882 0x31AD      STRB     R3,[R2, #+429]
     92              bit_in_channel = 0;
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0xF882 0x31AE      STRB     R3,[R2, #+430]
     93              
     94              // process actual sbus data
     95              for (i = 0; i < 176; i++) 
   \   0000003E   0x2300             MOVS     R3,#+0
   \                     ??sbus_convert_3: (+1)
   \   00000040   0x2BB0             CMP      R3,#+176
   \   00000042   0xDA3D             BGE.N    ??sbus_convert_4
     96              {
     97                if (data_in[byte_in_sbus] & (1<<bit_in_sbus)) 
   \   00000044   0xF892 0x01AB      LDRB     R0,[R2, #+427]
   \   00000048   0x5C0C             LDRB     R4,[R1, R0]
   \   0000004A   0x2501             MOVS     R5,#+1
   \   0000004C   0xF992 0x01AC      LDRSB    R0,[R2, #+428]
   \   00000050   0x4085             LSLS     R5,R5,R0
   \   00000052   0x422C             TST      R4,R5
   \   00000054   0xD010             BEQ.N    ??sbus_convert_5
     98                {
     99                  channels[ch] |= (1<<bit_in_channel);
   \   00000056   0xF892 0x01AD      LDRB     R0,[R2, #+429]
   \   0000005A   0xEB02 0x0480      ADD      R4,R2,R0, LSL #+2
   \   0000005E   0xF892 0x01AD      LDRB     R0,[R2, #+429]
   \   00000062   0xEB02 0x0080      ADD      R0,R2,R0, LSL #+2
   \   00000066   0xF8D0 0x513C      LDR      R5,[R0, #+316]
   \   0000006A   0x2601             MOVS     R6,#+1
   \   0000006C   0xF992 0x01AE      LDRSB    R0,[R2, #+430]
   \   00000070   0x4086             LSLS     R6,R6,R0
   \   00000072   0x4335             ORRS     R5,R6,R5
   \   00000074   0xF8C4 0x513C      STR      R5,[R4, #+316]
    100                }
    101                bit_in_sbus++;
   \                     ??sbus_convert_5: (+1)
   \   00000078   0xF892 0x01AC      LDRB     R0,[R2, #+428]
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0xF882 0x01AC      STRB     R0,[R2, #+428]
    102                bit_in_channel++;
   \   00000082   0xF892 0x01AE      LDRB     R0,[R2, #+430]
   \   00000086   0x1C40             ADDS     R0,R0,#+1
   \   00000088   0xF882 0x01AE      STRB     R0,[R2, #+430]
    103          
    104                if (bit_in_sbus == 8) 
   \   0000008C   0xF892 0x01AC      LDRB     R0,[R2, #+428]
   \   00000090   0x2808             CMP      R0,#+8
   \   00000092   0xD107             BNE.N    ??sbus_convert_6
    105                {
    106                  bit_in_sbus =0;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0xF882 0x01AC      STRB     R0,[R2, #+428]
    107                  byte_in_sbus++;
   \   0000009A   0xF892 0x01AB      LDRB     R0,[R2, #+427]
   \   0000009E   0x1C40             ADDS     R0,R0,#+1
   \   000000A0   0xF882 0x01AB      STRB     R0,[R2, #+427]
    108                }
    109                
    110                if (bit_in_channel == 11) 
   \                     ??sbus_convert_6: (+1)
   \   000000A4   0xF892 0x01AE      LDRB     R0,[R2, #+430]
   \   000000A8   0x280B             CMP      R0,#+11
   \   000000AA   0xD107             BNE.N    ??sbus_convert_7
    111                {
    112                  bit_in_channel =0;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xF882 0x01AE      STRB     R0,[R2, #+430]
    113                  ch++;
   \   000000B2   0xF892 0x01AD      LDRB     R0,[R2, #+429]
   \   000000B6   0x1C40             ADDS     R0,R0,#+1
   \   000000B8   0xF882 0x01AD      STRB     R0,[R2, #+429]
    114                } 
    115              }
   \                     ??sbus_convert_7: (+1)
   \   000000BC   0x1C5B             ADDS     R3,R3,#+1
   \   000000BE   0xE7BF             B.N      ??sbus_convert_3
    116              
    117              // DigiChannel 1
    118              if (data_in[23] & (1<<0)) 
   \                     ??sbus_convert_4: (+1)
   \   000000C0   0x7DC8             LDRB     R0,[R1, #+23]
   \   000000C2   0x07C0             LSLS     R0,R0,#+31
   \   000000C4   0xD503             BPL.N    ??sbus_convert_8
    119              {
    120                channels[16] = 1;
   \   000000C6   0x2001             MOVS     R0,#+1
   \   000000C8   0xF8C2 0x017C      STR      R0,[R2, #+380]
   \   000000CC   0xE002             B.N      ??sbus_convert_9
    121              }
    122              else
    123              {
    124                channels[16] = 0;
   \                     ??sbus_convert_8: (+1)
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0xF8C2 0x017C      STR      R0,[R2, #+380]
    125              }
    126              
    127              // DigiChannel 2
    128              if (data_in[23] & (1<<1)) 
   \                     ??sbus_convert_9: (+1)
   \   000000D4   0x7DC8             LDRB     R0,[R1, #+23]
   \   000000D6   0x0780             LSLS     R0,R0,#+30
   \   000000D8   0xD503             BPL.N    ??sbus_convert_10
    129              {
    130                channels[17] = 1;
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0xF8C2 0x0180      STR      R0,[R2, #+384]
   \   000000E0   0xE002             B.N      ??sbus_convert_11
    131              }
    132              else
    133              {
    134                channels[17] = 0;
   \                     ??sbus_convert_10: (+1)
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0xF8C2 0x0180      STR      R0,[R2, #+384]
    135              }
    136              
    137              // check radio signal
    138              failsafe_status = SBUS_SIGNAL_OK;
   \                     ??sbus_convert_11: (+1)
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0xF882 0x01AA      STRB     R0,[R2, #+426]
    139              
    140              if (data_in[23] & (1<<2)) 
   \   000000EE   0x7DC8             LDRB     R0,[R1, #+23]
   \   000000F0   0x0740             LSLS     R0,R0,#+29
   \   000000F2   0xD502             BPL.N    ??sbus_convert_12
    141              {
    142                failsafe_status = SBUS_SIGNAL_LOST;
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0xF882 0x01AA      STRB     R0,[R2, #+426]
    143              }
    144              
    145              if (data_in[23] & (1<<3)) 
   \                     ??sbus_convert_12: (+1)
   \   000000FA   0x7DC8             LDRB     R0,[R1, #+23]
   \   000000FC   0x0700             LSLS     R0,R0,#+28
   \   000000FE   0xD502             BPL.N    ??sbus_convert_13
    146              {
    147                failsafe_status = SBUS_SIGNAL_FAILSAFE;
   \   00000100   0x2002             MOVS     R0,#+2
   \   00000102   0xF882 0x01AA      STRB     R0,[R2, #+426]
    148              }
    149              return(0);    
   \                     ??sbus_convert_13: (+1)
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0xE000             B.N      ??sbus_convert_14
    150            }
    151            else
    152            {
    153              return(0xFF);
   \                     ??sbus_convert_0: (+1)
   \   0000010A   0x20FF             MOVS     R0,#+255
   \                     ??sbus_convert_14: (+1)
   \   0000010C   0xBC70             POP      {R4-R6}
   \   0000010E   0x4770             BX       LR               ;; return
    154            }
    155          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     `SBus_Init()::static guard for SBus_static`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     `SBus_Init()::SBus_static`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     SBus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     t

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CSBus::CSBus()
      12   CSBus::sbus_convert(unsigned char *)
      48   CSBus::update()
        48   -> __aeabi_memset
       8   SBus_Init()
         8   -> CSBus::CSBus()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       8  CSBus::CSBus()
     272  CSBus::sbus_convert(unsigned char *)
     238  CSBus::update()
       4  SBus
      38  SBus_Init()
     440  SBus_static
       1  -- Other

 
 445 bytes in section .bss
 576 bytes in section .text
 
 568 bytes of CODE memory (+ 8 bytes shared)
 445 bytes of DATA memory

Errors: none
Warnings: 2
