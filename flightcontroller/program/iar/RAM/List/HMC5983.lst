###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       18/Jun/2018  19:47:57
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\HMC5983.cpp
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW1C79.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\HMC5983.cpp
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\HMC5983.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\HMC5983.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\HMC5983.cpp
      1          #include "HMC5983.h"
      2          

   \                                 In section .bss, align 4
      3          Compass_TypeDef Compass;
   \                     Compass:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
      4            int  hmc5983_CS;
   \                     hmc5983_CS:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
      5          void hmc5983_init(void)
      6          {
   \                     _Z12hmc5983_initv: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
      7            u8 CheckID[3];
      8            u8 HMC5983_ID[]="H43"; //hmc5983内部固定ID为H43
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x....             LDR.N    R1,??DataTable4
   \   00000008   0x680A             LDR      R2,[R1, #+0]
   \   0000000A   0x6002             STR      R2,[R0, #+0]
      9          hmc5983_CS = 5;
   \   0000000C   0x2005             MOVS     R0,#+5
   \   0000000E   0x....             LDR.N    R1,??DataTable4_1
   \   00000010   0x6008             STR      R0,[R1, #+0]
     10            hmc5983_ReadByte(HMC5983_Status_REG); //这一步很关键 否则读数错误。可能由于单片机初始化问题导致？
   \   00000012   0x2009             MOVS     R0,#+9
   \   00000014   0x.... 0x....      BL       _Z16hmc5983_ReadByteh
     11            hmc5983_ReadBuf(HMC5983_IDA_REG, CheckID, 3); //读芯片ID
   \   00000018   0x2203             MOVS     R2,#+3
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x200A             MOVS     R0,#+10
   \   0000001E   0x.... 0x....      BL       _Z15hmc5983_ReadBufhPhh
     12            if(strncmp((char*)CheckID, (char*)HMC5983_ID ,3)!=0&&0)
   \   00000022   0x2203             MOVS     R2,#+3
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0xA801             ADD      R0,SP,#+4
   \   00000028   0x.... 0x....      BL       strncmp
     13            {
     14              #ifdef MY_DEBUG
     15                printf("Didn't check to HMC5983! ReadID:%s\n",CheckID);
     16              #endif
     17            }
     18            else
     19            {
     20              #ifdef MY_DEBUG
     21                printf("The HMC5983 is ready!\n");
     22              #endif
     23                hmc5983_WriteByte(HMC5983_CONF_REG_A, 0x94);       //正常测量，1次平均 30HZ 开启温度测量0x94
   \   0000002C   0x2194             MOVS     R1,#+148
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       _Z17hmc5983_WriteBytehh
     24                hmc5983_WriteByte(HMC5983_CONF_REG_B, 0x30);       //±2.5Ga 0x30
   \   00000034   0x2130             MOVS     R1,#+48
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       _Z17hmc5983_WriteBytehh
     25                hmc5983_WriteByte(HMC5983_MODE_REG,   0x00);       //4线SPI 单次测量   测量完成自动空闲
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      BL       _Z17hmc5983_WriteBytehh
     26              #ifdef MY_DEBUG
     27                CheckID[0] = hmc5983_ReadByte(HMC5983_CONF_REG_A);
     28                printf("HMC5983_CONF_REG_A:  0x%.2X\n",CheckID[0]);
     29                CheckID[0] = hmc5983_ReadByte(HMC5983_CONF_REG_B);
     30                printf("HMC5983_CONF_REG_B:  0x%.2X\n",CheckID[0]);
     31                CheckID[0] = hmc5983_ReadByte(HMC5983_MODE_REG);
     32                printf("HMC5983_MODE_REG:    0x%.2X\n",CheckID[0]);
     33              #endif
     34            }
     35          }
   \                     ??hmc5983_init_0: (+1)
   \   00000044   0xBD07             POP      {R0-R2,PC}       ;; return
     36          
     37          //开启一次测量

   \                                 In section .text, align 2, keep-with-next
     38          void hmc5983_StartMea(void)
     39          {
   \                     _Z16hmc5983_StartMeav: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     40            hmc5983_WriteByte(HMC5983_MODE_REG,  0x01);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       _Z17hmc5983_WriteBytehh
     41          }
   \                     ??hmc5983_StartMea_0: (+1)
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
     42          
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void hmc5983_WriteByte(u8 Address,u8 byte)
     45          {
   \                     _Z17hmc5983_WriteBytehh: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     46            SPI_Master_WriteRead(hmc5983_SPIx, Address&0X7F, hmc5983_CS, SPI_PCS_ASSERTED);    //&0X7F将第一位变为0
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x....             LDR.N    R0,??DataTable4_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x0002             MOVS     R2,R0
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0xF014 0x017F      ANDS     R1,R4,#0x7F
   \   00000014   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4002d000
   \   00000016   0x.... 0x....      BL       SPI_Master_WriteRead
     47            //SPI_Master_WriteRead(hmc5983_SPIx, Address<<1, hmc5983_CS, SPI_PCS_ASSERTED);    
     48            SPI_Master_WriteRead(hmc5983_SPIx, byte, hmc5983_CS, SPI_PCS_INACTIVE);
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x....             LDR.N    R0,??DataTable4_1
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x0002             MOVS     R2,R0
   \   00000022   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4002d000
   \   0000002A   0x.... 0x....      BL       SPI_Master_WriteRead
     49          }
   \                     ??hmc5983_WriteByte_0: (+1)
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     50          

   \                                 In section .text, align 2, keep-with-next
     51          u8 hmc5983_ReadByte(u8 Address)
     52          {
   \                     _Z16hmc5983_ReadByteh: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     53            u8 temp=0;
   \   00000004   0x2500             MOVS     R5,#+0
     54            SPI_Master_WriteRead(hmc5983_SPIx, Address|0x80, hmc5983_CS, SPI_PCS_ASSERTED);
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x....             LDR.N    R0,??DataTable4_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x0002             MOVS     R2,R0
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0xF054 0x0180      ORRS     R1,R4,#0x80
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4002d000
   \   00000018   0x.... 0x....      BL       SPI_Master_WriteRead
     55            //SPI_Master_WriteRead(hmc5983_SPIx, (Address<<1)|0x01, hmc5983_CS, SPI_PCS_ASSERTED);
     56            temp = SPI_Master_WriteRead(hmc5983_SPIx, Dummy_Byte1, hmc5983_CS, SPI_PCS_INACTIVE);
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x....             LDR.N    R0,??DataTable4_1
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0002             MOVS     R2,R0
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0x2180             MOVS     R1,#+128
   \   00000028   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4002d000
   \   0000002A   0x.... 0x....      BL       SPI_Master_WriteRead
     57            return temp;
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??hmc5983_ReadByte_0: (+1)
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     58          }
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void hmc5983_ReadBuf(u8 Address, u8 *Buf, u8 len)
     61          {
   \                     _Z15hmc5983_ReadBufhPhh: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     62            uint8 i;
     63            
     64            SPI_Master_WriteRead(hmc5983_SPIx, Address|0x80|0x40, hmc5983_CS, SPI_PCS_ASSERTED);
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0x....             LDR.N    R0,??DataTable4_1
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x0002             MOVS     R2,R0
   \   00000010   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000012   0xF054 0x01C0      ORRS     R1,R4,#0xC0
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4002d000
   \   0000001A   0x.... 0x....      BL       SPI_Master_WriteRead
     65            //SPI_Master_WriteRead(hmc5983_SPIx, (Address<<1)|0x01, hmc5983_CS, SPI_PCS_ASSERTED);
     66            for(i = 0 ;i < len ;i++)
   \   0000001E   0x2700             MOVS     R7,#+0
   \                     ??hmc5983_ReadBuf_0: (+1)
   \   00000020   0x0038             MOVS     R0,R7
   \   00000022   0x0031             MOVS     R1,R6
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xD21D             BCS.N    ??hmc5983_ReadBuf_1
     67            {
     68              if( i == (len-1) )
   \   0000002C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x1E70             SUBS     R0,R6,#+1
   \   00000032   0x4287             CMP      R7,R0
   \   00000034   0xD10B             BNE.N    ??hmc5983_ReadBuf_2
     69              {
     70                Buf[i] = SPI_Master_WriteRead(hmc5983_SPIx, Dummy_Byte|0x40, hmc5983_CS, SPI_PCS_INACTIVE);
   \   00000036   0x2300             MOVS     R3,#+0
   \   00000038   0x....             LDR.N    R0,??DataTable4_1
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x0002             MOVS     R2,R0
   \   0000003E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000040   0x21C0             MOVS     R1,#+192
   \   00000042   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4002d000
   \   00000044   0x.... 0x....      BL       SPI_Master_WriteRead
   \   00000048   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004A   0x55E8             STRB     R0,[R5, R7]
   \   0000004C   0xE00A             B.N      ??hmc5983_ReadBuf_3
     71              //  Buf[i] = SPI_Master_WriteRead(hmc5983_SPIx, Dummy_Byte1, hmc5983_CS, SPI_PCS_INACTIVE);
     72              }
     73              else
     74              {
     75                Buf[i] = SPI_Master_WriteRead(hmc5983_SPIx, Dummy_Byte|0x40, hmc5983_CS, SPI_PCS_ASSERTED);
   \                     ??hmc5983_ReadBuf_2: (+1)
   \   0000004E   0x2301             MOVS     R3,#+1
   \   00000050   0x....             LDR.N    R0,??DataTable4_1
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x0002             MOVS     R2,R0
   \   00000056   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000058   0x21C0             MOVS     R1,#+192
   \   0000005A   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4002d000
   \   0000005C   0x.... 0x....      BL       SPI_Master_WriteRead
   \   00000060   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000062   0x55E8             STRB     R0,[R5, R7]
     76              //  Buf[i] = SPI_Master_WriteRead(hmc5983_SPIx, Dummy_Byte1, hmc5983_CS, SPI_PCS_ASSERTED);
     77              }
     78            }
   \                     ??hmc5983_ReadBuf_3: (+1)
   \   00000064   0x1C7F             ADDS     R7,R7,#+1
   \   00000066   0xE7DB             B.N      ??hmc5983_ReadBuf_0
     79          }
   \                     ??hmc5983_ReadBuf_1: (+1)
   \                     ??hmc5983_ReadBuf_4: (+1)
   \   00000068   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void hmc5983_DAQ()
     82          {
   \                     _Z11hmc5983_DAQv: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     83            //查询状态寄存器以判断转换完成？
     84            //启用单次工作模式而非连续工作模式？
     85            //需要温度？
     86            u8 BUF[6];
     87            hmc5983_ReadBuf(HMC5983_X_axis_MSB_REG, BUF, 6);
   \   00000004   0x2206             MOVS     R2,#+6
   \   00000006   0x4669             MOV      R1,SP
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0x.... 0x....      BL       _Z15hmc5983_ReadBufhPhh
     88            Compass.X = (int16)(BUF[0] << 8 | BUF[1]);
   \   0000000E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000012   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000016   0xEA51 0x2100      ORRS     R1,R1,R0, LSL #+8
   \   0000001A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000001C   0x....             LDR.N    R0,??DataTable4_3
   \   0000001E   0x6001             STR      R1,[R0, #+0]
     89            Compass.Z = (int16)(BUF[2] << 8 | BUF[3]);
   \   00000020   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000024   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   00000028   0xEA51 0x2100      ORRS     R1,R1,R0, LSL #+8
   \   0000002C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000002E   0x....             LDR.N    R0,??DataTable4_3
   \   00000030   0x6081             STR      R1,[R0, #+8]
     90            Compass.Y = (int16)(BUF[4] << 8 | BUF[5]);
   \   00000032   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000036   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   0000003A   0xEA51 0x2100      ORRS     R1,R1,R0, LSL #+8
   \   0000003E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000040   0x....             LDR.N    R0,??DataTable4_3
   \   00000042   0x6041             STR      R1,[R0, #+4]
     91          }
   \                     ??hmc5983_DAQ_0: (+1)
   \   00000044   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     hmc5983_CS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4002D000         DC32     0x4002d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     Compass

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x48 0x34          DC8 "H43"
   \              0x33 0x00    
     92          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   hmc5983_DAQ()
        16   -> hmc5983_ReadBuf(u8, u8 *, u8)
      24   hmc5983_ReadBuf(u8, u8 *, u8)
        24   -> SPI_Master_WriteRead
      16   hmc5983_ReadByte(u8)
        16   -> SPI_Master_WriteRead
       8   hmc5983_StartMea()
         8   -> hmc5983_WriteByte(u8, u8)
      16   hmc5983_WriteByte(u8, u8)
        16   -> SPI_Master_WriteRead
      16   hmc5983_init()
        16   -> hmc5983_ReadBuf(u8, u8 *, u8)
        16   -> hmc5983_ReadByte(u8)
        16   -> hmc5983_WriteByte(u8, u8)
        16   -> strncmp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ?_0
      16  Compass
       4  hmc5983_CS
      70  hmc5983_DAQ()
     106  hmc5983_ReadBuf(u8, u8 *, u8)
      50  hmc5983_ReadByte(u8)
      12  hmc5983_StartMea()
      48  hmc5983_WriteByte(u8, u8)
      70  hmc5983_init()
      48  -- Other

 
  48 bytes in section .ARM.exidx
  20 bytes in section .bss
   4 bytes in section .rodata
 372 bytes in section .text
 
 372 bytes of CODE  memory
  52 bytes of CONST memory
  20 bytes of DATA  memory

Errors: none
Warnings: none
