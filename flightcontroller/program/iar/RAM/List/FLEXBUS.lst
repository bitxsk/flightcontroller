###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       16/May/2018  07:32:56
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FLEXBUS.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EWEC08.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FLEXBUS.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\FLEXBUS.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\FLEXBUS.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FLEXBUS.c
      1          /**
      2           * @file FLEXBUS.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FLEXBUS底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include "FLEXBUS.h"
     25          

   \                                 In section .data, align 4
     26          const uint32* FB_PORT[32] = {(uint32*)&PORTD->PCR[6], (uint32*)&PORTD->PCR[5], (uint32*)&PORTD->PCR[4], (uint32*)&PORTD->PCR[3],
   \                     FB_PORT:
   \   00000000   0x4004C018         DC32 4004C018H, 4004C014H, 4004C010H, 4004C00CH, 4004C008H, 4004B028H
   \              0x4004C014   
   \              0x4004C010   
   \              0x4004C00C   
   \              0x4004C008   
   \              0x4004B028   
   \   00000018   0x4004B024         DC32 4004B024H, 4004B020H, 4004B01CH, 4004B018H, 4004B014H, 4004B010H
   \              0x4004B020   
   \              0x4004B01C   
   \              0x4004B018   
   \              0x4004B014   
   \              0x4004B010   
   \   00000030   0x4004B008         DC32 4004B008H, 4004B004H, 4004B000H, 4004A048H, 4004A044H, 4004A040H
   \              0x4004B004   
   \              0x4004B000   
   \              0x4004A048   
   \              0x4004A044   
   \              0x4004A040   
   \   00000048   0x4004A02C         DC32 4004A02CH, 4004A028H, 4004A024H, 4004A020H, 4004A01CH, 4004A018H
   \              0x4004A028   
   \              0x4004A024   
   \              0x4004A020   
   \              0x4004A01C   
   \              0x4004A018   
   \   00000060   0x4004B03C         DC32 4004B03CH, 4004B038H, 4004B034H, 4004B030H, 4004A05CH, 4004A058H
   \              0x4004B038   
   \              0x4004B034   
   \              0x4004B030   
   \              0x4004A05C   
   \              0x4004A058   
   \   00000078   0x4004A054         DC32 4004A054H, 4004A050H
   \              0x4004A050   
     27                                       (uint32*)&PORTD->PCR[2], (uint32*)&PORTC->PCR[10], (uint32*)&PORTC->PCR[9], (uint32*)&PORTC->PCR[8],
     28                                       (uint32*)&PORTC->PCR[7], (uint32*)&PORTC->PCR[6], (uint32*)&PORTC->PCR[5], (uint32*)&PORTC->PCR[4],
     29                                       (uint32*)&PORTC->PCR[2], (uint32*)&PORTC->PCR[1], (uint32*)&PORTC->PCR[0], (uint32*)&PORTB->PCR[18],
     30                                       (uint32*)&PORTB->PCR[17], (uint32*)&PORTB->PCR[16], (uint32*)&PORTB->PCR[11], (uint32*)&PORTB->PCR[10],
     31                                       (uint32*)&PORTB->PCR[9], (uint32*)&PORTB->PCR[8], (uint32*)&PORTB->PCR[7], (uint32*)&PORTB->PCR[6],
     32                                       (uint32*)&PORTC->PCR[15], (uint32*)&PORTC->PCR[14], (uint32*)&PORTC->PCR[13], (uint32*)&PORTC->PCR[12],
     33                                       (uint32*)&PORTB->PCR[23], (uint32*)&PORTB->PCR[22], (uint32*)&PORTB->PCR[21], (uint32*)&PORTB->PCR[20]};
     34          
     35          /*
     36           * FlexBus_Init
     37           * FlexBux通用初始化函数
     38           * 
     39           * 参数:
     40           *    fb_init_struct--FlexBus初始化结构体，
     41           *                        具体定义见FB_InitTypeDef
     42           *
     43           * 输出:
     44           *    0--配置错误
     45           *    1--配置成功
     46           */

   \                                 In section .text, align 4, keep-with-next
     47          uint8 FlexBus_Init(FB_InitTypeDef fb_init_struct)
     48          {
   \                     FlexBus_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
     49            FBx Fbx = fb_init_struct.FB_Fbx;
   \   00000006   0xF89D 0x5028      LDRB     R5,[SP, #+40]
     50            uint32 base_addr = fb_init_struct.FB_ChipSelAddress;
   \   0000000A   0xF8DD 0x902C      LDR      R9,[SP, #+44]
     51            uint32 addr_space = fb_init_struct.FB_AddressSpace;
   \   0000000E   0x9E0C             LDR      R6,[SP, #+48]
     52            uint8 size = fb_init_struct.FB_PortSize;
   \   00000010   0xF89D 0x7034      LDRB     R7,[SP, #+52]
     53            boolean justied = fb_init_struct.FB_IsRightJustied;
   \   00000014   0xF89D 0x4035      LDRB     R4,[SP, #+53]
     54            boolean aa = fb_init_struct.FB_AutoAckEnable;
   \   00000018   0xF89D 0x0036      LDRB     R0,[SP, #+54]
   \   0000001C   0xF88D 0x0002      STRB     R0,[SP, #+2]
     55            uint8 ws = fb_init_struct.FB_WateStates;
   \   00000020   0xF89D 0x0037      LDRB     R0,[SP, #+55]
   \   00000024   0xF88D 0x0001      STRB     R0,[SP, #+1]
     56            uint8 rah = fb_init_struct.FB_ReadAddrHold; 
   \   00000028   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   0000002C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     57            uint8 wah = fb_init_struct.FB_WriteAddrHold;
   \   00000030   0xF89D 0xA039      LDRB     R10,[SP, #+57]
     58            uint32* pcr;
     59            uint8 n=0;
   \   00000034   0xF05F 0x0B00      MOVS     R11,#+0
     60            
     61            //参数检查
     62            ASSERT( Fbx <= 5);    //判断FB通道号
   \   00000038   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003A   0x2D06             CMP      R5,#+6
   \   0000003C   0xDB03             BLT.N    ??FlexBus_Init_0
   \   0000003E   0x213E             MOVS     R1,#+62
   \   00000040   0x48AE             LDR.N    R0,??FlexBus_Init_1
   \   00000042   0x.... 0x....      BL       assert_failed
     63            ASSERT( base_addr >= 0x60000000 && base_addr <= 0xDFFFFFFF);    //判断基地址合法性
   \                     ??FlexBus_Init_0: (+1)
   \   00000046   0xF1B9 0x4FC0      CMP      R9,#+1610612736
   \   0000004A   0xD302             BCC.N    ??FlexBus_Init_2
   \   0000004C   0xF1B9 0x4F60      CMP      R9,#-536870912
   \   00000050   0xD303             BCC.N    ??FlexBus_Init_3
   \                     ??FlexBus_Init_2: (+1)
   \   00000052   0x213F             MOVS     R1,#+63
   \   00000054   0x48A9             LDR.N    R0,??FlexBus_Init_1
   \   00000056   0x.... 0x....      BL       assert_failed
     64            ASSERT( addr_space != 0);    //寻址空间大小
   \                     ??FlexBus_Init_3: (+1)
   \   0000005A   0x2E00             CMP      R6,#+0
   \   0000005C   0xD103             BNE.N    ??FlexBus_Init_4
   \   0000005E   0x2140             MOVS     R1,#+64
   \   00000060   0x48A6             LDR.N    R0,??FlexBus_Init_1
   \   00000062   0x.... 0x....      BL       assert_failed
     65            ASSERT( size <= 3);    //判断数据位宽
   \                     ??FlexBus_Init_4: (+1)
   \   00000066   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000068   0x2F04             CMP      R7,#+4
   \   0000006A   0xDB03             BLT.N    ??FlexBus_Init_5
   \   0000006C   0x2141             MOVS     R1,#+65
   \   0000006E   0x48A3             LDR.N    R0,??FlexBus_Init_1
   \   00000070   0x.... 0x....      BL       assert_failed
     66            ASSERT( rah <= 3);     //判断读地址保持时间
   \                     ??FlexBus_Init_5: (+1)
   \   00000074   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000078   0x2804             CMP      R0,#+4
   \   0000007A   0xDB03             BLT.N    ??FlexBus_Init_6
   \   0000007C   0x2142             MOVS     R1,#+66
   \   0000007E   0x489F             LDR.N    R0,??FlexBus_Init_1
   \   00000080   0x.... 0x....      BL       assert_failed
     67            ASSERT( wah <= 3);     //判断写地址保持时间
   \                     ??FlexBus_Init_6: (+1)
   \   00000084   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000088   0xF1BA 0x0F04      CMP      R10,#+4
   \   0000008C   0xDB03             BLT.N    ??FlexBus_Init_7
   \   0000008E   0x2143             MOVS     R1,#+67
   \   00000090   0x489A             LDR.N    R0,??FlexBus_Init_1
   \   00000092   0x.... 0x....      BL       assert_failed
     68            
     69            FB->CS[Fbx].CSMR = 0;
   \                     ??FlexBus_Init_7: (+1)
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x4999             LDR.N    R1,??FlexBus_Init_1+0x4  ;; 0x4000c000
   \   0000009A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009C   0x220C             MOVS     R2,#+12
   \   0000009E   0xFB02 0xF205      MUL      R2,R2,R5
   \   000000A2   0x4411             ADD      R1,R1,R2
   \   000000A4   0x6048             STR      R0,[R1, #+4]
     70                
     71            //设置基地址
     72            FB->CS[Fbx].CSAR = base_addr;
   \   000000A6   0x4896             LDR.N    R0,??FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000AA   0x210C             MOVS     R1,#+12
   \   000000AC   0xFB01 0xF105      MUL      R1,R1,R5
   \   000000B0   0xF840 0x9001      STR      R9,[R0, R1]
     73            //端口位宽
     74            FB->CS[Fbx].CSCR  = FB_CSCR_PS(size);      
   \   000000B4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B6   0x01B8             LSLS     R0,R7,#+6
   \   000000B8   0xF010 0x00C0      ANDS     R0,R0,#0xC0
   \   000000BC   0x4990             LDR.N    R1,??FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000BE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C0   0x220C             MOVS     R2,#+12
   \   000000C2   0xFB02 0xF205      MUL      R2,R2,R5
   \   000000C6   0x4411             ADD      R1,R1,R2
   \   000000C8   0x6088             STR      R0,[R1, #+8]
     75            
     76            if(justied)
   \   000000CA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CC   0x2C00             CMP      R4,#+0
   \   000000CE   0xD00F             BEQ.N    ??FlexBus_Init_8
     77            {
     78              FB->CS[Fbx].CSCR |= FB_CSCR_BLS_MASK;   // 数据右对齐
   \   000000D0   0x488B             LDR.N    R0,??FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D4   0x210C             MOVS     R1,#+12
   \   000000D6   0xFB01 0xF105      MUL      R1,R1,R5
   \   000000DA   0x4408             ADD      R0,R0,R1
   \   000000DC   0x6880             LDR      R0,[R0, #+8]
   \   000000DE   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   000000E2   0x4987             LDR.N    R1,??FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E6   0x220C             MOVS     R2,#+12
   \   000000E8   0xFB02 0xF205      MUL      R2,R2,R5
   \   000000EC   0x4411             ADD      R1,R1,R2
   \   000000EE   0x6088             STR      R0,[R1, #+8]
     79            }
     80                
     81            if(aa)    
   \                     ??FlexBus_Init_8: (+1)
   \   000000F0   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD00F             BEQ.N    ??FlexBus_Init_9
     82            {
     83              FB->CS[Fbx].CSCR |= FB_CSCR_AA_MASK;   //使能内部应答
   \   000000F8   0x4881             LDR.N    R0,??FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000FA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FC   0x210C             MOVS     R1,#+12
   \   000000FE   0xFB01 0xF105      MUL      R1,R1,R5
   \   00000102   0x4408             ADD      R0,R0,R1
   \   00000104   0x6880             LDR      R0,[R0, #+8]
   \   00000106   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000010A   0x497D             LDR.N    R1,??FlexBus_Init_1+0x4  ;; 0x4000c000
   \   0000010C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000010E   0x220C             MOVS     R2,#+12
   \   00000110   0xFB02 0xF205      MUL      R2,R2,R5
   \   00000114   0x4411             ADD      R1,R1,R2
   \   00000116   0x6088             STR      R0,[R1, #+8]
     84            }
     85            
     86            FB->CS[Fbx].CSCR |= FB_CSCR_WS(ws)    // 在内部应答信号之前加入ws个WS
     87                               | FB_CSCR_RDAH(rah)
     88                               | FB_CSCR_WRAH(wah);
   \                     ??FlexBus_Init_9: (+1)
   \   00000118   0x4879             LDR.N    R0,??FlexBus_Init_1+0x4  ;; 0x4000c000
   \   0000011A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000011C   0x210C             MOVS     R1,#+12
   \   0000011E   0xFB01 0xF105      MUL      R1,R1,R5
   \   00000122   0x4408             ADD      R0,R0,R1
   \   00000124   0x6880             LDR      R0,[R0, #+8]
   \   00000126   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000012A   0x0289             LSLS     R1,R1,#+10
   \   0000012C   0xF411 0x417C      ANDS     R1,R1,#0xFC00
   \   00000130   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \   00000134   0x0492             LSLS     R2,R2,#+18
   \   00000136   0xF412 0x2240      ANDS     R2,R2,#0xC0000
   \   0000013A   0x4311             ORRS     R1,R2,R1
   \   0000013C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000140   0xEA5F 0x420A      LSLS     R2,R10,#+16
   \   00000144   0xF412 0x3240      ANDS     R2,R2,#0x30000
   \   00000148   0x4311             ORRS     R1,R2,R1
   \   0000014A   0x4308             ORRS     R0,R1,R0
   \   0000014C   0x496C             LDR.N    R1,??FlexBus_Init_1+0x4  ;; 0x4000c000
   \   0000014E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000150   0x220C             MOVS     R2,#+12
   \   00000152   0xFB02 0xF205      MUL      R2,R2,R5
   \   00000156   0x4411             ADD      R1,R1,R2
   \   00000158   0x6088             STR      R0,[R1, #+8]
     89            
     90            //根据寻址空间大小计算基地址掩码
     91            addr_space = (addr_space-1)>>16;
   \   0000015A   0x1E76             SUBS     R6,R6,#+1
   \   0000015C   0x0C36             LSRS     R6,R6,#+16
     92            FB->CS[Fbx].CSMR = FB_CSMR_BAM(addr_space)  //设置基地址掩码为128K地址空间 =2^n(n=BAM+16)
     93                          | FB_CSMR_V_MASK;    //使能CS信号
   \   0000015E   0x0430             LSLS     R0,R6,#+16
   \   00000160   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000164   0x4966             LDR.N    R1,??FlexBus_Init_1+0x4  ;; 0x4000c000
   \   00000166   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000168   0x220C             MOVS     R2,#+12
   \   0000016A   0xFB02 0xF205      MUL      R2,R2,R5
   \   0000016E   0x4411             ADD      R1,R1,R2
   \   00000170   0x6048             STR      R0,[R1, #+4]
     94            
     95            //使能复用功能的FB_CSn及引脚复用
     96            if(Fbx == FB0)
   \   00000172   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000174   0x2D00             CMP      R5,#+0
   \   00000176   0xD104             BNE.N    ??FlexBus_Init_10
     97            {
     98              PORTD->PCR[1]  = PORT_PCR_MUX(5);       // FB_CS0     
   \   00000178   0xF44F 0x60A0      MOV      R0,#+1280
   \   0000017C   0x4961             LDR.N    R1,??FlexBus_Init_1+0x8  ;; 0x4004c004
   \   0000017E   0x6008             STR      R0,[R1, #+0]
   \   00000180   0xE05E             B.N      ??FlexBus_Init_11
     99            }
    100            else if(Fbx == FB1)
   \                     ??FlexBus_Init_10: (+1)
   \   00000182   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000184   0x2D01             CMP      R5,#+1
   \   00000186   0xD110             BNE.N    ??FlexBus_Init_12
    101            {
    102              FB->CSPMCR &= ~(FB_CSPMCR_GROUP1_MASK);
   \   00000188   0x485F             LDR.N    R0,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000018A   0x6800             LDR      R0,[R0, #+0]
   \   0000018C   0xF020 0x4070      BIC      R0,R0,#0xF0000000
   \   00000190   0x495D             LDR.N    R1,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000192   0x6008             STR      R0,[R1, #+0]
    103              FB->CSPMCR |= FB_CSPMCR_GROUP1(1);      
   \   00000194   0x485C             LDR.N    R0,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000196   0x6800             LDR      R0,[R0, #+0]
   \   00000198   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000019C   0x495A             LDR.N    R1,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000019E   0x6008             STR      R0,[R1, #+0]
    104              PORTD->PCR[0]  = PORT_PCR_MUX(5);       // FB_CS1  
   \   000001A0   0xF44F 0x60A0      MOV      R0,#+1280
   \   000001A4   0x4959             LDR.N    R1,??FlexBus_Init_1+0x10  ;; 0x4004c000
   \   000001A6   0x6008             STR      R0,[R1, #+0]
   \   000001A8   0xE04A             B.N      ??FlexBus_Init_11
    105            }
    106            else if(Fbx == FB2)
   \                     ??FlexBus_Init_12: (+1)
   \   000001AA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001AC   0x2D02             CMP      R5,#+2
   \   000001AE   0xD110             BNE.N    ??FlexBus_Init_13
    107            {
    108              FB->CSPMCR &= ~(FB_CSPMCR_GROUP4_MASK);
   \   000001B0   0x4855             LDR.N    R0,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001B2   0x6800             LDR      R0,[R0, #+0]
   \   000001B4   0xF430 0x2070      BICS     R0,R0,#0xF0000
   \   000001B8   0x4953             LDR.N    R1,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001BA   0x6008             STR      R0,[R1, #+0]
    109              FB->CSPMCR |= FB_CSPMCR_GROUP4(1);     
   \   000001BC   0x4852             LDR.N    R0,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001BE   0x6800             LDR      R0,[R0, #+0]
   \   000001C0   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   000001C4   0x4950             LDR.N    R1,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001C6   0x6008             STR      R0,[R1, #+0]
    110              PORTC->PCR[18]  = PORT_PCR_MUX(5);       // FB_CS2
   \   000001C8   0xF44F 0x60A0      MOV      R0,#+1280
   \   000001CC   0x4950             LDR.N    R1,??FlexBus_Init_1+0x14  ;; 0x4004b048
   \   000001CE   0x6008             STR      R0,[R1, #+0]
   \   000001D0   0xE036             B.N      ??FlexBus_Init_11
    111            }
    112            else if(Fbx == FB3)
   \                     ??FlexBus_Init_13: (+1)
   \   000001D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001D4   0x2D03             CMP      R5,#+3
   \   000001D6   0xD110             BNE.N    ??FlexBus_Init_14
    113            {
    114              FB->CSPMCR &= ~(FB_CSPMCR_GROUP5_MASK);
   \   000001D8   0x484B             LDR.N    R0,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001DA   0x6800             LDR      R0,[R0, #+0]
   \   000001DC   0xF430 0x4070      BICS     R0,R0,#0xF000
   \   000001E0   0x4949             LDR.N    R1,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001E2   0x6008             STR      R0,[R1, #+0]
    115              FB->CSPMCR |= FB_CSPMCR_GROUP5(1);     
   \   000001E4   0x4848             LDR.N    R0,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001E6   0x6800             LDR      R0,[R0, #+0]
   \   000001E8   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000001EC   0x4946             LDR.N    R1,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001EE   0x6008             STR      R0,[R1, #+0]
    116              PORTC->PCR[19]  = PORT_PCR_MUX(5);       // FB_CS3
   \   000001F0   0xF44F 0x60A0      MOV      R0,#+1280
   \   000001F4   0x4947             LDR.N    R1,??FlexBus_Init_1+0x18  ;; 0x4004b04c
   \   000001F6   0x6008             STR      R0,[R1, #+0]
   \   000001F8   0xE022             B.N      ??FlexBus_Init_11
    117            }
    118            else if(Fbx == FB4)
   \                     ??FlexBus_Init_14: (+1)
   \   000001FA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001FC   0x2D04             CMP      R5,#+4
   \   000001FE   0xD10E             BNE.N    ??FlexBus_Init_15
    119            {
    120              FB->CSPMCR &= ~(FB_CSPMCR_GROUP2_MASK);
   \   00000200   0x4841             LDR.N    R0,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000202   0x6800             LDR      R0,[R0, #+0]
   \   00000204   0xF030 0x6070      BICS     R0,R0,#0xF000000
   \   00000208   0x493F             LDR.N    R1,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000020A   0x6008             STR      R0,[R1, #+0]
    121              FB->CSPMCR |= FB_CSPMCR_GROUP2(0);      
   \   0000020C   0x483E             LDR.N    R0,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000020E   0x6800             LDR      R0,[R0, #+0]
   \   00000210   0x493D             LDR.N    R1,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000212   0x6008             STR      R0,[R1, #+0]
    122              PORTC->PCR[17]  = PORT_PCR_MUX(5);       // FB_CS4
   \   00000214   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000218   0x493F             LDR.N    R1,??FlexBus_Init_1+0x1C  ;; 0x4004b044
   \   0000021A   0x6008             STR      R0,[R1, #+0]
   \   0000021C   0xE010             B.N      ??FlexBus_Init_11
    123            }
    124            else if(Fbx == FB5)
   \                     ??FlexBus_Init_15: (+1)
   \   0000021E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000220   0x2D05             CMP      R5,#+5
   \   00000222   0xD10D             BNE.N    ??FlexBus_Init_11
    125            {
    126              FB->CSPMCR &= ~(FB_CSPMCR_GROUP3_MASK);
   \   00000224   0x4838             LDR.N    R0,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000226   0x6800             LDR      R0,[R0, #+0]
   \   00000228   0xF430 0x0070      BICS     R0,R0,#0xF00000
   \   0000022C   0x4936             LDR.N    R1,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000022E   0x6008             STR      R0,[R1, #+0]
    127              FB->CSPMCR |= FB_CSPMCR_GROUP3(0);     
   \   00000230   0x4835             LDR.N    R0,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000232   0x6800             LDR      R0,[R0, #+0]
   \   00000234   0x4934             LDR.N    R1,??FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000236   0x6008             STR      R0,[R1, #+0]
    128              PORTC->PCR[16]  = PORT_PCR_MUX(5);       // FB_CS5
   \   00000238   0xF44F 0x60A0      MOV      R0,#+1280
   \   0000023C   0x4937             LDR.N    R1,??FlexBus_Init_1+0x20  ;; 0x4004b040
   \   0000023E   0x6008             STR      R0,[R1, #+0]
    129            }
    130            
    131            //使能总线地址、数据引脚复用功能
    132            //先使能低16位地址总线
    133            for(uint8 i=0; i<16; i++)
   \                     ??FlexBus_Init_11: (+1)
   \   00000240   0x2000             MOVS     R0,#+0
   \                     ??FlexBus_Init_16: (+1)
   \   00000242   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000244   0x2810             CMP      R0,#+16
   \   00000246   0xDA0A             BGE.N    ??FlexBus_Init_17
    134            {
    135              pcr = (uint32 *)FB_PORT[i];
   \   00000248   0x4935             LDR.N    R1,??FlexBus_Init_1+0x24
   \   0000024A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000024C   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000250   0x4688             MOV      R8,R1
    136              *pcr = PORT_PCR_MUX(5);    
   \   00000252   0xF44F 0x61A0      MOV      R1,#+1280
   \   00000256   0xF8C8 0x1000      STR      R1,[R8, #+0]
    137            }
   \   0000025A   0x1C40             ADDS     R0,R0,#+1
   \   0000025C   0xE7F1             B.N      ??FlexBus_Init_16
    138            //使能其余的地址总线
    139            n=16;
   \                     ??FlexBus_Init_17: (+1)
   \   0000025E   0x2010             MOVS     R0,#+16
    140            for(uint8 i=0; i<16; i++)
   \   00000260   0x2100             MOVS     R1,#+0
   \                     ??FlexBus_Init_18: (+1)
   \   00000262   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000264   0x2910             CMP      R1,#+16
   \   00000266   0xDA0F             BGE.N    ??FlexBus_Init_19
    141            {
    142              if((addr_space>>i)&0x01)
   \   00000268   0x0032             MOVS     R2,R6
   \   0000026A   0x40CA             LSRS     R2,R2,R1
   \   0000026C   0x07D2             LSLS     R2,R2,#+31
   \   0000026E   0xD509             BPL.N    ??FlexBus_Init_20
    143              {
    144                pcr = (uint32 *)FB_PORT[n++];
   \   00000270   0x4A2B             LDR.N    R2,??FlexBus_Init_1+0x24
   \   00000272   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000274   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000278   0x4690             MOV      R8,R2
   \   0000027A   0x1C40             ADDS     R0,R0,#+1
    145                *pcr = PORT_PCR_MUX(5); 
   \   0000027C   0xF44F 0x62A0      MOV      R2,#+1280
   \   00000280   0xF8C8 0x2000      STR      R2,[R8, #+0]
    146              }
    147            }
   \                     ??FlexBus_Init_20: (+1)
   \   00000284   0x1C49             ADDS     R1,R1,#+1
   \   00000286   0xE7EC             B.N      ??FlexBus_Init_18
    148            //如果是32位宽，则使能高16位
    149            n=0;
   \                     ??FlexBus_Init_19: (+1)
   \   00000288   0x2100             MOVS     R1,#+0
    150            if(size == 0)
   \   0000028A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000028C   0x2F00             CMP      R7,#+0
   \   0000028E   0xD102             BNE.N    ??FlexBus_Init_21
    151            {   
    152              n=16;
   \   00000290   0x2010             MOVS     R0,#+16
   \   00000292   0x0001             MOVS     R1,R0
   \   00000294   0xE010             B.N      ??FlexBus_Init_22
    153            }else if(justied==0 && size == 0x10)
   \                     ??FlexBus_Init_21: (+1)
   \   00000296   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000298   0x2C00             CMP      R4,#+0
   \   0000029A   0xD105             BNE.N    ??FlexBus_Init_23
   \   0000029C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000029E   0x2F10             CMP      R7,#+16
   \   000002A0   0xD102             BNE.N    ??FlexBus_Init_23
    154            {
    155              n=16;
   \   000002A2   0x2010             MOVS     R0,#+16
   \   000002A4   0x0001             MOVS     R1,R0
   \   000002A6   0xE007             B.N      ??FlexBus_Init_22
    156            }else if(justied==0 && size == 0x01)
   \                     ??FlexBus_Init_23: (+1)
   \   000002A8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002AA   0x2C00             CMP      R4,#+0
   \   000002AC   0xD104             BNE.N    ??FlexBus_Init_22
   \   000002AE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002B0   0x2F01             CMP      R7,#+1
   \   000002B2   0xD101             BNE.N    ??FlexBus_Init_22
    157            {
    158              n=8;
   \   000002B4   0x2008             MOVS     R0,#+8
   \   000002B6   0x0001             MOVS     R1,R0
    159            }
    160            if(n!=0)
   \                     ??FlexBus_Init_22: (+1)
   \   000002B8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002BA   0x2900             CMP      R1,#+0
   \   000002BC   0xD011             BEQ.N    ??FlexBus_Init_24
    161            {
    162              for(uint8 i=31; i>31-n; i--)
   \   000002BE   0x201F             MOVS     R0,#+31
   \                     ??FlexBus_Init_25: (+1)
   \   000002C0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002C2   0xF1D1 0x021F      RSBS     R2,R1,#+31
   \   000002C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002C8   0x4282             CMP      R2,R0
   \   000002CA   0xDA0A             BGE.N    ??FlexBus_Init_24
    163              {
    164                pcr = (uint32 *)FB_PORT[i];
   \   000002CC   0x4A14             LDR.N    R2,??FlexBus_Init_1+0x24
   \   000002CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002D0   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   000002D4   0x4690             MOV      R8,R2
    165                *pcr = PORT_PCR_MUX(5);    
   \   000002D6   0xF44F 0x62A0      MOV      R2,#+1280
   \   000002DA   0xF8C8 0x2000      STR      R2,[R8, #+0]
    166              }
   \   000002DE   0x1E40             SUBS     R0,R0,#+1
   \   000002E0   0xE7EE             B.N      ??FlexBus_Init_25
    167            }
    168            
    169            //控制信号线
    170            PORTB->PCR[19] = PORT_PCR_MUX(5);          // fb_oe_b
   \                     ??FlexBus_Init_24: (+1)
   \   000002E2   0xF44F 0x60A0      MOV      R0,#+1280
   \   000002E6   0x4A0F             LDR.N    R2,??FlexBus_Init_1+0x28  ;; 0x4004a04c
   \   000002E8   0x6010             STR      R0,[R2, #+0]
    171            PORTC->PCR[11] = PORT_PCR_MUX(5);          // fb_rw_b  
   \   000002EA   0xF44F 0x60A0      MOV      R0,#+1280
   \   000002EE   0x4A0E             LDR.N    R2,??FlexBus_Init_1+0x2C  ;; 0x4004b02c
   \   000002F0   0x6010             STR      R0,[R2, #+0]
    172                        
    173            return 1;
   \   000002F2   0x2001             MOVS     R0,#+1
   \                     ??FlexBus_Init_26: (+1)
   \   000002F4   0xE8BD 0x0FF2      POP      {R1,R4-R11}
   \   000002F8   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??FlexBus_Init_1:
   \   000002FC   0x........         DC32     ?_0
   \   00000300   0x4000C000         DC32     0x4000c000
   \   00000304   0x4004C004         DC32     0x4004c004
   \   00000308   0x4000C060         DC32     0x4000c060
   \   0000030C   0x4004C000         DC32     0x4004c000
   \   00000310   0x4004B048         DC32     0x4004b048
   \   00000314   0x4004B04C         DC32     0x4004b04c
   \   00000318   0x4004B044         DC32     0x4004b044
   \   0000031C   0x4004B040         DC32     0x4004b040
   \   00000320   0x........         DC32     FB_PORT
   \   00000324   0x4004A04C         DC32     0x4004a04c
   \   00000328   0x4004B02C         DC32     0x4004b02c
    174          }

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x78          DC8 5CH, 78H, 73H, 6BH, 31H, 39H, 39H, 34H
   \              0x73 0x6B    
   \              0x31 0x39    
   \              0x39 0x34    
   \   00000010   0x30 0x39          DC8 30H, 39H, 31H, 30H, 5CH, 44H, 65H, 73H
   \              0x31 0x30    
   \              0x5C 0x44    
   \              0x65 0x73    
   \   00000018   0x6B 0x74          DC8 6BH, 74H, 6FH, 70H, 5CH, 66H, 6CH, 69H
   \              0x6F 0x70    
   \              0x5C 0x66    
   \              0x6C 0x69    
   \   00000020   0x67 0x68          DC8 67H, 68H, 74H, 43H, 6FH, 6EH, 74H, 72H
   \              0x74 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \   00000028   0x6F 0x6C          DC8 6FH, 6CH, 6CH, 65H, 72H, 2DH, 31H, 5CH
   \              0x6C 0x65    
   \              0x72 0x2D    
   \              0x31 0x5C    
   \   00000030   0x66 0x6C          DC8 66H, 6CH, 69H, 67H, 68H, 74H, 43H, 6FH
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x43 0x6F    
   \   00000038   0x6E 0x74          DC8 6EH, 74H, 72H, 6FH, 6CH, 6CH, 65H, 72H
   \              0x72 0x6F    
   \              0x6C 0x6C    
   \              0x65 0x72    
   \   00000040   0x2D 0x31          DC8 2DH, 31H, 5CH, 70H, 72H, 6FH, 67H, 72H
   \              0x5C 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \   00000048   0x61 0x6D          DC8 61H, 6DH, 5CH, 6CH, 69H, 62H, 5CH, 4CH
   \              0x5C 0x6C    
   \              0x69 0x62    
   \              0x5C 0x4C    
   \   00000050   0x50 0x4C          DC8 50H, 4CH, 44H, 5CH, 48H, 57H, 5CH, 46H
   \              0x44 0x5C    
   \              0x48 0x57    
   \              0x5C 0x46    
   \   00000058   0x4C 0x45          DC8 4CH, 45H, 58H, 42H, 55H, 53H, 2EH, 63H
   \              0x58 0x42    
   \              0x55 0x53    
   \              0x2E 0x63    
   \   00000060   0x00               DC8 0
   \   00000061   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   FlexBus_Init
        56   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     100  ?_0
     128  FB_PORT
     812  FlexBus_Init
       8  -- Other

 
   8 bytes in section .ARM.exidx
 128 bytes in section .data
 100 bytes in section .rodata
 812 bytes in section .text
 
 812 bytes of CODE  memory
 108 bytes of CONST memory
 128 bytes of DATA  memory

Errors: none
Warnings: none
