###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       18/Jun/2018  19:47:56
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\fuzzyPID.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW163B.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\fuzzyPID.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\fuzzyPID.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\fuzzyPID.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\fuzzyPID.c
      1          #include "fuzzyPID.h"
      2          

   \                                 In section .text, align 4, keep-with-next
      3          void fuzzyPID(PID_Controller* obj)
      4          {
   \                     _Z8fuzzyPIDP14PID_Controller: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
      5            int i,j;
      6            obj->column   = CalcMembership((int)obj->P, obj->OffsetMembership,  obj->OffsetBound);
   \   00000004   0xF114 0x02B4      ADDS     R2,R4,#+180
   \   00000008   0xF114 0x017C      ADDS     R1,R4,#+124
   \   0000000C   0xED94 0x0A10      VLDR     S0,[R4, #+64]
   \   00000010   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000014   0xEE10 0x0A10      VMOV     R0,S0
   \   00000018   0x.... 0x....      BL       _Z14CalcMembershipiPiS_
   \   0000001C   0xF884 0x007A      STRB     R0,[R4, #+122]
      7            obj->row      = CalcMembership((int)obj->D, obj->OffsetDMembership, obj->OffsetDBound);
   \   00000020   0xF114 0x02D0      ADDS     R2,R4,#+208
   \   00000024   0xF114 0x0198      ADDS     R1,R4,#+152
   \   00000028   0xED94 0x0A12      VLDR     S0,[R4, #+72]
   \   0000002C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000030   0xEE10 0x0A10      VMOV     R0,S0
   \   00000034   0x.... 0x....      BL       _Z14CalcMembershipiPiS_
   \   00000038   0xF884 0x0079      STRB     R0,[R4, #+121]
      8          
      9            for (i = 0; i < NUM; i++)       //Offset为列,OffsetD为行
   \   0000003C   0x2100             MOVS     R1,#+0
   \                     ??fuzzyPID_0: (+1)
   \   0000003E   0x2907             CMP      R1,#+7
   \   00000040   0xDA63             BGE.N    ??fuzzyPID_1
     10            {
     11              if(obj->OffsetMembership[i] != 0)
   \   00000042   0xEB04 0x0081      ADD      R0,R4,R1, LSL #+2
   \   00000046   0x6FC0             LDR      R0,[R0, #+124]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD05C             BEQ.N    ??fuzzyPID_2
     12              {
     13                for(j = 0; j < NUM; j++)
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x0005             MOVS     R5,R0
   \                     ??fuzzyPID_3: (+1)
   \   00000050   0x2D07             CMP      R5,#+7
   \   00000052   0xDA58             BGE.N    ??fuzzyPID_2
     14                {
     15                  if(obj->OffsetDMembership[j] != 0)
   \   00000054   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   00000058   0xF8D0 0x0098      LDR      R0,[R0, #+152]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD050             BEQ.N    ??fuzzyPID_4
     16                  {
     17                    obj->Kp +=  obj->KpStrategy[j][i] * obj->OffsetMembership[i] * obj->OffsetDMembership[j];
   \   00000060   0x200E             MOVS     R0,#+14
   \   00000062   0xFB00 0xF005      MUL      R0,R0,R5
   \   00000066   0x4420             ADD      R0,R4,R0
   \   00000068   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \   0000006C   0xF9B0 0x20EC      LDRSH    R2,[R0, #+236]
   \   00000070   0xEB04 0x0081      ADD      R0,R4,R1, LSL #+2
   \   00000074   0x6FC0             LDR      R0,[R0, #+124]
   \   00000076   0x4342             MULS     R2,R0,R2
   \   00000078   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   0000007C   0xF8D0 0x0098      LDR      R0,[R0, #+152]
   \   00000080   0x4342             MULS     R2,R0,R2
   \   00000082   0xEE00 0x2A10      VMOV     S0,R2
   \   00000086   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000008A   0xEDD4 0x0A0D      VLDR     S1,[R4, #+52]
   \   0000008E   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000092   0xED84 0x0A0D      VSTR     S0,[R4, #+52]
     18                    obj->Ki +=  obj->KiStrategy[j][i] * obj->OffsetMembership[i] * obj->OffsetDMembership[j];
   \   00000096   0x200E             MOVS     R0,#+14
   \   00000098   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000009C   0x4420             ADD      R0,R4,R0
   \   0000009E   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \   000000A2   0xF9B0 0x214E      LDRSH    R2,[R0, #+334]
   \   000000A6   0xEB04 0x0081      ADD      R0,R4,R1, LSL #+2
   \   000000AA   0x6FC0             LDR      R0,[R0, #+124]
   \   000000AC   0x4342             MULS     R2,R0,R2
   \   000000AE   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   000000B2   0xF8D0 0x0098      LDR      R0,[R0, #+152]
   \   000000B6   0x4342             MULS     R2,R0,R2
   \   000000B8   0xEE00 0x2A10      VMOV     S0,R2
   \   000000BC   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000C0   0xEDD4 0x0A0E      VLDR     S1,[R4, #+56]
   \   000000C4   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   000000C8   0xED84 0x0A0E      VSTR     S0,[R4, #+56]
     19                    obj->Kd +=  obj->KdStrategy[j][i] * obj->OffsetMembership[i] * obj->OffsetDMembership[j];
   \   000000CC   0x200E             MOVS     R0,#+14
   \   000000CE   0xFB00 0xF005      MUL      R0,R0,R5
   \   000000D2   0x4420             ADD      R0,R4,R0
   \   000000D4   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \   000000D8   0xF9B0 0x21B0      LDRSH    R2,[R0, #+432]
   \   000000DC   0xEB04 0x0081      ADD      R0,R4,R1, LSL #+2
   \   000000E0   0x6FC0             LDR      R0,[R0, #+124]
   \   000000E2   0x4342             MULS     R2,R0,R2
   \   000000E4   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   000000E8   0xF8D0 0x0098      LDR      R0,[R0, #+152]
   \   000000EC   0x4342             MULS     R2,R0,R2
   \   000000EE   0xEE00 0x2A10      VMOV     S0,R2
   \   000000F2   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000F6   0xEDD4 0x0A0F      VLDR     S1,[R4, #+60]
   \   000000FA   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   000000FE   0xED84 0x0A0F      VSTR     S0,[R4, #+60]
     20                  }
     21                }
   \                     ??fuzzyPID_4: (+1)
   \   00000102   0x1C6D             ADDS     R5,R5,#+1
   \   00000104   0xE7A4             B.N      ??fuzzyPID_3
     22              }
     23            }
   \                     ??fuzzyPID_2: (+1)
   \   00000106   0x1C49             ADDS     R1,R1,#+1
   \   00000108   0xE799             B.N      ??fuzzyPID_0
     24            obj->Kp /= 10000; 
   \                     ??fuzzyPID_1: (+1)
   \   0000010A   0xED94 0x0A0D      VLDR     S0,[R4, #+52]
   \   0000010E   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x461c4000
   \   00000112   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000116   0xED84 0x0A0D      VSTR     S0,[R4, #+52]
     25            obj->Ki /= 10000;
   \   0000011A   0xED94 0x0A0E      VLDR     S0,[R4, #+56]
   \   0000011E   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x461c4000
   \   00000122   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000126   0xED84 0x0A0E      VSTR     S0,[R4, #+56]
     26            obj->Kd /= 10000;
   \   0000012A   0xED94 0x0A0F      VLDR     S0,[R4, #+60]
   \   0000012E   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x461c4000
   \   00000132   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000136   0xED84 0x0A0F      VSTR     S0,[R4, #+60]
     27          }
   \   0000013A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     28          

   \                                 In section .text, align 2, keep-with-next
     29          int CalcMembership(int value,int membership[],int bound[])
     30          {
   \                     _Z14CalcMembershipiPiS_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0003             MOVS     R3,R0
     31            u8 i;
     32            for (i = 0; i <= NUM - 1; i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \                     ??CalcMembership_0: (+1)
   \   00000006   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000008   0x2D07             CMP      R5,#+7
   \   0000000A   0xDA05             BGE.N    ??CalcMembership_1
     33            {
     34              membership[i] = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
     35            }
   \   00000014   0x1C6D             ADDS     R5,R5,#+1
   \   00000016   0xE7F6             B.N      ??CalcMembership_0
     36          
     37            if (value < bound[0])
   \                     ??CalcMembership_1: (+1)
   \   00000018   0x6810             LDR      R0,[R2, #+0]
   \   0000001A   0x4283             CMP      R3,R0
   \   0000001C   0xDA03             BGE.N    ??CalcMembership_2
     38            {
     39              membership[0] = 100;
   \   0000001E   0x2064             MOVS     R0,#+100
   \   00000020   0x6008             STR      R0,[R1, #+0]
     40              return 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xE035             B.N      ??CalcMembership_3
     41            }
     42            else if(value >= bound[NUM - 1])
   \                     ??CalcMembership_2: (+1)
   \   00000026   0x6990             LDR      R0,[R2, #+24]
   \   00000028   0x4283             CMP      R3,R0
   \   0000002A   0xDB03             BLT.N    ??CalcMembership_4
     43            {
     44              membership[NUM - 1] = 100;
   \   0000002C   0x2064             MOVS     R0,#+100
   \   0000002E   0x6188             STR      R0,[R1, #+24]
     45              return 7;
   \   00000030   0x2007             MOVS     R0,#+7
   \   00000032   0xE02E             B.N      ??CalcMembership_3
     46            }
     47            else
     48            {
     49              for (i = 1; i <= NUM - 1; i++)
   \                     ??CalcMembership_4: (+1)
   \   00000034   0x2401             MOVS     R4,#+1
   \                     ??CalcMembership_5: (+1)
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0x2C07             CMP      R4,#+7
   \   0000003A   0xDA29             BGE.N    ??CalcMembership_6
     50              {
     51                if (value < bound[i])
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0xF852 0x0024      LDR      R0,[R2, R4, LSL #+2]
   \   00000042   0x4283             CMP      R3,R0
   \   00000044   0xDA22             BGE.N    ??CalcMembership_7
     52                {
     53                  membership[i-1] = (bound[i] - value) * 100 / (bound[i] - bound[i - 1]);
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0xF852 0x5024      LDR      R5,[R2, R4, LSL #+2]
   \   0000004C   0x1AED             SUBS     R5,R5,R3
   \   0000004E   0x2064             MOVS     R0,#+100
   \   00000050   0x4345             MULS     R5,R0,R5
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0xF852 0x6024      LDR      R6,[R2, R4, LSL #+2]
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0xEB02 0x0084      ADD      R0,R2,R4, LSL #+2
   \   0000005E   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   00000062   0x1A36             SUBS     R6,R6,R0
   \   00000064   0xFB95 0xF0F6      SDIV     R0,R5,R6
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0xEB01 0x0584      ADD      R5,R1,R4, LSL #+2
   \   0000006E   0xF845 0x0C04      STR      R0,[R5, #-4]
     54                  membership[i]   = 100 - membership[i-1];
   \   00000072   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000074   0xEB01 0x0084      ADD      R0,R1,R4, LSL #+2
   \   00000078   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   0000007C   0xF1D0 0x0064      RSBS     R0,R0,#+100
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
     55                  return i;
   \   00000086   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000088   0x0020             MOVS     R0,R4
   \   0000008A   0xE002             B.N      ??CalcMembership_3
     56                }
     57              }
   \                     ??CalcMembership_7: (+1)
   \   0000008C   0x1C64             ADDS     R4,R4,#+1
   \   0000008E   0xE7D2             B.N      ??CalcMembership_5
     58            }
     59            return 0;
   \                     ??CalcMembership_6: (+1)
   \   00000090   0x2000             MOVS     R0,#+0
   \                     ??CalcMembership_3: (+1)
   \   00000092   0xBC70             POP      {R4-R6}
   \   00000094   0x4770             BX       LR               ;; return
     60          }
     61          

   \                                 In section .text, align 4, keep-with-next
     62          void calculateD_partial(PID_Controller* obj)
     63          {
     64            for(int i=0; i<9; i++)
   \                     _Z18calculateD_partialP14PID_Controller: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \                     ??calculateD_partial_0: (+1)
   \   00000002   0x2909             CMP      R1,#+9
   \   00000004   0xDA07             BGE.N    ??calculateD_partial_1
     65             {
     66                 obj->P_old[i] = obj->P_old[i+1];
   \   00000006   0xEB00 0x0281      ADD      R2,R0,R1, LSL #+2
   \   0000000A   0xEB00 0x0381      ADD      R3,R0,R1, LSL #+2
   \   0000000E   0x6D5B             LDR      R3,[R3, #+84]
   \   00000010   0x6513             STR      R3,[R2, #+80]
     67             }
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0xE7F5             B.N      ??calculateD_partial_0
     68              
     69             obj->P_old[9] = obj->feedback;  
   \                     ??calculateD_partial_1: (+1)
   \   00000016   0x6841             LDR      R1,[R0, #+4]
   \   00000018   0x6741             STR      R1,[R0, #+116]
     70             obj->D = obj->D * obj->D_smoother + (obj->feedback - obj->P_old[0]) * (1 - obj->D_smoother); 
   \   0000001A   0xED90 0x0A12      VLDR     S0,[R0, #+72]
   \   0000001E   0xEDD0 0x0A13      VLDR     S1,[R0, #+76]
   \   00000022   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000026   0xEDD0 0x0A01      VLDR     S1,[R0, #+4]
   \   0000002A   0xED90 0x1A14      VLDR     S2,[R0, #+80]
   \   0000002E   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   00000032   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \   00000036   0xEDD0 0x1A13      VLDR     S3,[R0, #+76]
   \   0000003A   0xEE31 0x1A61      VSUB.F32 S2,S2,S3
   \   0000003E   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000042   0xED80 0x0A12      VSTR     S0,[R0, #+72]
     71             
     72             if(obj->D > 2000) 
   \   00000046   0xED90 0x0A12      VLDR     S0,[R0, #+72]
   \   0000004A   0xEDDF 0x....      VLDR.W   S1,??DataTable3_1  ;; 0x44fa0001
   \   0000004E   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000052   0xEEF1 0xFA10      FMSTAT   
   \   00000056   0xDB02             BLT.N    ??calculateD_partial_2
     73             {
     74               obj->D = 2000;
   \   00000058   0x....             LDR.N    R1,??DataTable3_5  ;; 0x44fa0000
   \   0000005A   0x6481             STR      R1,[R0, #+72]
   \   0000005C   0xE00A             B.N      ??calculateD_partial_3
     75             }
     76             else if(obj->D < -2000) 
   \                     ??calculateD_partial_2: (+1)
   \   0000005E   0xED90 0x0A12      VLDR     S0,[R0, #+72]
   \   00000062   0xEDDF 0x....      VLDR.W   S1,??DataTable3_2  ;; 0xc4fa0000
   \   00000066   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000006A   0xEEF1 0xFA10      FMSTAT   
   \   0000006E   0xD501             BPL.N    ??calculateD_partial_3
     77             {
     78               obj->D = -2000;
   \   00000070   0x....             LDR.N    R1,??DataTable3_2  ;; 0xc4fa0000
   \   00000072   0x6481             STR      R1,[R0, #+72]
     79             }
     80          }
   \                     ??calculateD_partial_3: (+1)
   \   00000074   0x4770             BX       LR               ;; return
     81          

   \                                 In section .text, align 4, keep-with-next
     82          void calculateD_full(PID_Controller* obj)
     83          {
   \                     _Z15calculateD_fullP14PID_Controller: (+1)
   \   00000000   0xB410             PUSH     {R4}
     84            int differentialPeriod = 1;
   \   00000002   0x2101             MOVS     R1,#+1
     85            for(int i = 0; i < differentialPeriod; i++)
   \   00000004   0x2200             MOVS     R2,#+0
   \                     ??calculateD_full_0: (+1)
   \   00000006   0x428A             CMP      R2,R1
   \   00000008   0xDA07             BGE.N    ??calculateD_full_1
     86            {
     87              obj->P_old[i] = obj->P_old[i+1];
   \   0000000A   0xEB00 0x0382      ADD      R3,R0,R2, LSL #+2
   \   0000000E   0xEB00 0x0482      ADD      R4,R0,R2, LSL #+2
   \   00000012   0x6D64             LDR      R4,[R4, #+84]
   \   00000014   0x651C             STR      R4,[R3, #+80]
     88            }
   \   00000016   0x1C52             ADDS     R2,R2,#+1
   \   00000018   0xE7F5             B.N      ??calculateD_full_0
     89              
     90             obj->P_old[differentialPeriod] = obj->P;  
   \                     ??calculateD_full_1: (+1)
   \   0000001A   0xEB00 0x0281      ADD      R2,R0,R1, LSL #+2
   \   0000001E   0x6C03             LDR      R3,[R0, #+64]
   \   00000020   0x6513             STR      R3,[R2, #+80]
     91             obj->D = obj->D * obj->D_smoother + (obj->P - obj->P_old[0]) * (1 - obj->D_smoother); 
   \   00000022   0xED90 0x0A12      VLDR     S0,[R0, #+72]
   \   00000026   0xEDD0 0x0A13      VLDR     S1,[R0, #+76]
   \   0000002A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000002E   0xEDD0 0x0A10      VLDR     S1,[R0, #+64]
   \   00000032   0xED90 0x1A14      VLDR     S2,[R0, #+80]
   \   00000036   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   0000003A   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \   0000003E   0xEDD0 0x1A13      VLDR     S3,[R0, #+76]
   \   00000042   0xEE31 0x1A61      VSUB.F32 S2,S2,S3
   \   00000046   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000004A   0xED80 0x0A12      VSTR     S0,[R0, #+72]
     92             
     93             if(obj->D > 2000) 
   \   0000004E   0xED90 0x0A12      VLDR     S0,[R0, #+72]
   \   00000052   0xEDDF 0x....      VLDR.W   S1,??DataTable3_1  ;; 0x44fa0001
   \   00000056   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000005A   0xEEF1 0xFA10      FMSTAT   
   \   0000005E   0xDB02             BLT.N    ??calculateD_full_2
     94             {
     95               obj->D = 2000;
   \   00000060   0x....             LDR.N    R2,??DataTable3_5  ;; 0x44fa0000
   \   00000062   0x6482             STR      R2,[R0, #+72]
   \   00000064   0xE00A             B.N      ??calculateD_full_3
     96             }
     97             else if(obj->D < -2000) 
   \                     ??calculateD_full_2: (+1)
   \   00000066   0xED90 0x0A12      VLDR     S0,[R0, #+72]
   \   0000006A   0xEDDF 0x....      VLDR.W   S1,??DataTable3_2  ;; 0xc4fa0000
   \   0000006E   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000072   0xEEF1 0xFA10      FMSTAT   
   \   00000076   0xD501             BPL.N    ??calculateD_full_3
     98             {
     99               obj->D = -2000;
   \   00000078   0x....             LDR.N    R2,??DataTable3_2  ;; 0xc4fa0000
   \   0000007A   0x6482             STR      R2,[R0, #+72]
    100             }
    101          }
   \                     ??calculateD_full_3: (+1)
   \   0000007C   0xBC10             POP      {R4}
   \   0000007E   0x4770             BX       LR               ;; return
    102          

   \                                 In section .text, align 2, keep-with-next
    103          void calculateI(PID_Controller* obj)
    104          {
    105            obj->I += obj->P;
   \                     _Z10calculateIP14PID_Controller: (+1)
   \   00000000   0xED90 0x0A11      VLDR     S0,[R0, #+68]
   \   00000004   0xEDD0 0x0A10      VLDR     S1,[R0, #+64]
   \   00000008   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   0000000C   0xED80 0x0A11      VSTR     S0,[R0, #+68]
    106            if(obj->I > obj->integralLimit) 
   \   00000010   0xED90 0x0A07      VLDR     S0,[R0, #+28]
   \   00000014   0xEDD0 0x0A11      VLDR     S1,[R0, #+68]
   \   00000018   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000001C   0xEEF1 0xFA10      FMSTAT   
   \   00000020   0xD502             BPL.N    ??calculateI_0
    107            {
    108              obj->I = obj->integralLimit;
   \   00000022   0x69C1             LDR      R1,[R0, #+28]
   \   00000024   0x6441             STR      R1,[R0, #+68]
   \   00000026   0xE010             B.N      ??calculateI_1
    109            }
    110            else if(obj->I < -obj->integralLimit) 
   \                     ??calculateI_0: (+1)
   \   00000028   0xED90 0x0A11      VLDR     S0,[R0, #+68]
   \   0000002C   0xEDD0 0x0A07      VLDR     S1,[R0, #+28]
   \   00000030   0xEEF1 0x0A60      VNEG.F32 S1,S1
   \   00000034   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000038   0xEEF1 0xFA10      FMSTAT   
   \   0000003C   0xD505             BPL.N    ??calculateI_1
    111            {
    112              obj->I = -obj->integralLimit;
   \   0000003E   0xED90 0x0A07      VLDR     S0,[R0, #+28]
   \   00000042   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   00000046   0xED80 0x0A11      VSTR     S0,[R0, #+68]
    113            }
    114          }
   \                     ??calculateI_1: (+1)
   \   0000004A   0x4770             BX       LR               ;; return
    115          

   \                                 In section .text, align 2, keep-with-next
    116          void useConstantKpKiKd(PID_Controller* obj)
    117          {
    118            if(!obj->fuzzy)
   \                     _Z17useConstantKpKiKdP14PID_Controller: (+1)
   \   00000000   0xF890 0x1078      LDRB     R1,[R0, #+120]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD105             BNE.N    ??useConstantKpKiKd_0
    119            {
    120              obj->Kp = obj->Kp0;
   \   00000008   0x6A81             LDR      R1,[R0, #+40]
   \   0000000A   0x6341             STR      R1,[R0, #+52]
    121              obj->Ki = obj->Ki0;
   \   0000000C   0x6AC1             LDR      R1,[R0, #+44]
   \   0000000E   0x6381             STR      R1,[R0, #+56]
    122              obj->Kd = obj->Kd0;
   \   00000010   0x6B01             LDR      R1,[R0, #+48]
   \   00000012   0x63C1             STR      R1,[R0, #+60]
    123            }
    124          }
   \                     ??useConstantKpKiKd_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    125          

   \                                 In section .text, align 4, keep-with-next
    126          void PID_controler(PID_Controller* obj)
    127          {
    128            obj->outputP = obj->Kp * obj->P /500;
   \                     _Z13PID_controlerP14PID_Controller: (+1)
   \   00000000   0xED90 0x0A0D      VLDR     S0,[R0, #+52]
   \   00000004   0xEDD0 0x0A10      VLDR     S1,[R0, #+64]
   \   00000008   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000000C   0xEDDF 0x....      VLDR.W   S1,??DataTable3_3  ;; 0x43fa0000
   \   00000010   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000014   0xED80 0x0A03      VSTR     S0,[R0, #+12]
    129            obj->outputI = obj->Ki * obj->I /10000;
   \   00000018   0xED90 0x0A0E      VLDR     S0,[R0, #+56]
   \   0000001C   0xEDD0 0x0A11      VLDR     S1,[R0, #+68]
   \   00000020   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000024   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x461c4000
   \   00000028   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   0000002C   0xED80 0x0A04      VSTR     S0,[R0, #+16]
    130            obj->outputD = obj->Kd * obj->D /800;
   \   00000030   0xED90 0x0A0F      VLDR     S0,[R0, #+60]
   \   00000034   0xEDD0 0x0A12      VLDR     S1,[R0, #+72]
   \   00000038   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000003C   0xEDDF 0x....      VLDR.W   S1,??DataTable3_4  ;; 0x44480000
   \   00000040   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000044   0xED80 0x0A05      VSTR     S0,[R0, #+20]
    131            
    132          //  if(obj->outputD > obj->outputDLimit)  obj->outputD = obj->outputDLimit;
    133          //  if(obj->outputD < -obj->outputDLimit) obj->outputD = -obj->outputDLimit;
    134            
    135            obj->output = obj->output * obj->smoother + (obj->outputP + obj->outputI + obj->outputD) * (1 - obj->smoother);
   \   00000048   0xED90 0x0A02      VLDR     S0,[R0, #+8]
   \   0000004C   0xEDD0 0x0A06      VLDR     S1,[R0, #+24]
   \   00000050   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000054   0xEDD0 0x0A03      VLDR     S1,[R0, #+12]
   \   00000058   0xED90 0x1A04      VLDR     S2,[R0, #+16]
   \   0000005C   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \   00000060   0xED90 0x1A05      VLDR     S2,[R0, #+20]
   \   00000064   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \   00000068   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \   0000006C   0xEDD0 0x1A06      VLDR     S3,[R0, #+24]
   \   00000070   0xEE31 0x1A61      VSUB.F32 S2,S2,S3
   \   00000074   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000078   0xED80 0x0A02      VSTR     S0,[R0, #+8]
    136            
    137            if(obj->output > obj->outputLimit)  obj->output = obj->outputLimit;
   \   0000007C   0xED90 0x0A09      VLDR     S0,[R0, #+36]
   \   00000080   0xEDD0 0x0A02      VLDR     S1,[R0, #+8]
   \   00000084   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000088   0xEEF1 0xFA10      FMSTAT   
   \   0000008C   0xD501             BPL.N    ??PID_controler_0
   \   0000008E   0x6A41             LDR      R1,[R0, #+36]
   \   00000090   0x6081             STR      R1,[R0, #+8]
    138            if(obj->output < -obj->outputLimit) obj->output = -obj->outputLimit;
   \                     ??PID_controler_0: (+1)
   \   00000092   0xED90 0x0A02      VLDR     S0,[R0, #+8]
   \   00000096   0xEDD0 0x0A09      VLDR     S1,[R0, #+36]
   \   0000009A   0xEEF1 0x0A60      VNEG.F32 S1,S1
   \   0000009E   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   000000A2   0xEEF1 0xFA10      FMSTAT   
   \   000000A6   0xD505             BPL.N    ??PID_controler_1
   \   000000A8   0xED90 0x0A09      VLDR     S0,[R0, #+36]
   \   000000AC   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   000000B0   0xED80 0x0A02      VSTR     S0,[R0, #+8]
    139          
    140          }
   \                     ??PID_controler_1: (+1)
   \   000000B4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x461C4000         DC32     0x461c4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x44FA0001         DC32     0x44fa0001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0xC4FA0000         DC32     0xc4fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x43FA0000         DC32     0x43fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x44480000         DC32     0x44480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x44FA0000         DC32     0x44fa0000
    141          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   CalcMembership(int, int *, int *)
       0   PID_controler(PID_Controller *)
       4   calculateD_full(PID_Controller *)
       0   calculateD_partial(PID_Controller *)
       0   calculateI(PID_Controller *)
      16   fuzzyPID(PID_Controller *)
        16   -> CalcMembership(int, int *, int *)
       0   useConstantKpKiKd(PID_Controller *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
     150  CalcMembership(int, int *, int *)
     182  PID_controler(PID_Controller *)
     128  calculateD_full(PID_Controller *)
     118  calculateD_partial(PID_Controller *)
      76  calculateI(PID_Controller *)
     316  fuzzyPID(PID_Controller *)
      22  useConstantKpKiKd(PID_Controller *)

 
 1 016 bytes in section .text
 
 1 016 bytes of CODE memory

Errors: none
Warnings: none
