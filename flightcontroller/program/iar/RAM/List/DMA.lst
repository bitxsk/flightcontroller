###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       16/May/2018  07:32:54
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\DMA.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EWE5F9.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\DMA.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\DMA.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\DMA.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\DMA.c
      1          /**
      2           * @file DMA.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief DMA底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn)
   \                     _ZN26_INTERNAL_5_DMA_c_DMA_Init16__NVIC_EnableIRQE4IRQn: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD40A             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000C   0x408A             LSLS     R2,R2,R1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable19  ;; 0xe000e100
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0003             MOVS     R3,R0
   \   00000016   0x095B             LSRS     R3,R3,#+5
   \   00000018   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn)
   \                     _ZN26_INTERNAL_5_DMA_c_DMA_Init17__NVIC_DisableIRQE4IRQn: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD40A             BMI.N    ??__NVIC_DisableIRQ_0
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000C   0x408A             LSLS     R2,R2,R1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable19_1  ;; 0xe000e180
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0003             MOVS     R3,R0
   \   00000016   0x095B             LSRS     R3,R3,#+5
   \   00000018   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
     23          #include "DMA.h"
     24          
     25          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
     26          //用户自定义中断服务函数数组
     27          DMA_ISR_CALLBACK DMA_ISR[16];
     28          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)

   \                                 In section .bss, align 4
     29          DMA_ISR_CALLBACK DMA_ISR[32];
   \                     DMA_ISR:
   \   00000000                      DS8 128
     30          #endif
     31          /*
     32           * DMA_Init
     33           * 初始化eDMA模块
     34           * 
     35           * 参数:
     36           *    dma_init_struct--eDMA初始化结构体，
     37           *                        具体定义见DMA_InitTypeDef
     38           *
     39           * 输出:
     40           *    0--配置错误
     41           *    1--配置成功
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          uint8 DMA_Init(DMA_InitTypeDef dma_init_struct)
     44          {
   \                     DMA_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000006   0xB085             SUB      SP,SP,#+20
     45            uint8 chx = dma_init_struct.DMA_CHx;
   \   00000008   0xF89D 0x6038      LDRB     R6,[SP, #+56]
     46            uint8 req = dma_init_struct.DMA_Req;
   \   0000000C   0xF89D 0x7039      LDRB     R7,[SP, #+57]
     47            boolean periodic_trigg = dma_init_struct.DMA_PeriodicTriggerEnable;
   \   00000010   0xF89D 0x803A      LDRB     R8,[SP, #+58]
     48            uint16 major_cnt = dma_init_struct.DMA_MajorLoopCnt;
   \   00000014   0xF8BD 0x903C      LDRH     R9,[SP, #+60]
     49            uint32 minor_cnt = dma_init_struct.DMA_MinorByteCnt;
   \   00000018   0x9810             LDR      R0,[SP, #+64]
   \   0000001A   0x9004             STR      R0,[SP, #+16]
     50            uint32 src_addr = dma_init_struct.DMA_SourceAddr;
   \   0000001C   0x9C11             LDR      R4,[SP, #+68]
     51            uint8 src_dsize = dma_init_struct.DMA_SourceDataSize;
   \   0000001E   0xF89D 0xA048      LDRB     R10,[SP, #+72]
     52            int16 src_addroffset = dma_init_struct.DMA_SourceAddrOffset;
   \   00000022   0xF9BD 0x004A      LDRSH    R0,[SP, #+74]
   \   00000026   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     53            int32 src_lastadj = dma_init_struct.DMA_LastSourceAddrAdj;
   \   0000002A   0x9813             LDR      R0,[SP, #+76]
   \   0000002C   0x9003             STR      R0,[SP, #+12]
     54            uint32 dst_addr = dma_init_struct.DMA_DestAddr;
   \   0000002E   0x9D14             LDR      R5,[SP, #+80]
     55            uint8 dst_dsize = dma_init_struct.DMA_DestDataSize;
   \   00000030   0xF89D 0xB054      LDRB     R11,[SP, #+84]
     56            int16 dst_addroffset = dma_init_struct.DMA_DestAddrOffset;
   \   00000034   0xF9BD 0x0056      LDRSH    R0,[SP, #+86]
   \   00000038   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     57            int32 dst_lastadj = dma_init_struct.DMA_LastDestAddrAdj;
   \   0000003C   0x9816             LDR      R0,[SP, #+88]
   \   0000003E   0x9002             STR      R0,[SP, #+8]
     58            boolean auto_disable = dma_init_struct.DMA_AutoDisableReq;
   \   00000040   0xF89D 0x005C      LDRB     R0,[SP, #+92]
   \   00000044   0xF88D 0x0000      STRB     R0,[SP, #+0]
     59            
     60            //参数检查
     61          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
     62            ASSERT( chx <= DMA_CH15 );       //eDMA通道选择
     63          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
     64            ASSERT( chx <= DMA_CH31 );       //eDMA通道选择
   \   00000048   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004A   0x2E20             CMP      R6,#+32
   \   0000004C   0xDB04             BLT.N    ??DMA_Init_0
   \   0000004E   0x2140             MOVS     R1,#+64
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000054   0x.... 0x....      BL       assert_failed
     65          #endif
     66            ASSERT( req <= DMA_MUX_63 );     //请求源选择
   \                     ??DMA_Init_0: (+1)
   \   00000058   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005A   0x2F40             CMP      R7,#+64
   \   0000005C   0xDB04             BLT.N    ??DMA_Init_1
   \   0000005E   0x2142             MOVS     R1,#+66
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000064   0x.... 0x....      BL       assert_failed
     67            ASSERT( major_cnt <= 0x7FFF );   //主计数判断
   \                     ??DMA_Init_1: (+1)
   \   00000068   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000006C   0xF5B9 0x4F00      CMP      R9,#+32768
   \   00000070   0xDB04             BLT.N    ??DMA_Init_2
   \   00000072   0x2143             MOVS     R1,#+67
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000078   0x.... 0x....      BL       assert_failed
     68            ASSERT( src_addr != NULL );      //源地址判断
   \                     ??DMA_Init_2: (+1)
   \   0000007C   0x2C00             CMP      R4,#+0
   \   0000007E   0xD104             BNE.N    ??DMA_Init_3
   \   00000080   0x2144             MOVS     R1,#+68
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000086   0x.... 0x....      BL       assert_failed
     69            ASSERT( (src_dsize <= DMA_SRC_32BIT)||(src_dsize == DMA_SRC_16BYTE) );     //源数据传输大小判断
   \                     ??DMA_Init_3: (+1)
   \   0000008A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000008E   0xF1BA 0x0F03      CMP      R10,#+3
   \   00000092   0xDB09             BLT.N    ??DMA_Init_4
   \   00000094   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000098   0xF1BA 0x0F04      CMP      R10,#+4
   \   0000009C   0xD004             BEQ.N    ??DMA_Init_4
   \   0000009E   0x2145             MOVS     R1,#+69
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   000000A4   0x.... 0x....      BL       assert_failed
     70            ASSERT( dst_addr != NULL );      //目的地址判断
   \                     ??DMA_Init_4: (+1)
   \   000000A8   0x2D00             CMP      R5,#+0
   \   000000AA   0xD104             BNE.N    ??DMA_Init_5
   \   000000AC   0x2146             MOVS     R1,#+70
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   000000B2   0x.... 0x....      BL       assert_failed
     71            ASSERT( (dst_dsize <= DMA_DST_32BIT)||(dst_dsize == DMA_DST_16BYTE) );     //目的数据传输大小判断
   \                     ??DMA_Init_5: (+1)
   \   000000B6   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000BA   0xF1BB 0x0F03      CMP      R11,#+3
   \   000000BE   0xDB09             BLT.N    ??DMA_Init_6
   \   000000C0   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000C4   0xF1BB 0x0F04      CMP      R11,#+4
   \   000000C8   0xD004             BEQ.N    ??DMA_Init_6
   \   000000CA   0x2147             MOVS     R1,#+71
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   000000D0   0x.... 0x....      BL       assert_failed
     72           
     73          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10)   
     74            SIM->SCGC6 |= SIM_SCGC6_DMAMUX_MASK;  //打开DMA通道多路复用器时钟 
     75          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
     76            SIM->SCGC6 |= SIM_SCGC6_DMAMUX0_MASK;  //打开DMA通道多路复用器时钟 
   \                     ??DMA_Init_6: (+1)
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x4004803c
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x4004803c
   \   000000E2   0x6008             STR      R0,[R1, #+0]
     77            SIM->SCGC6 |= SIM_SCGC6_DMAMUX1_MASK;  //打开DMA通道多路复用器时钟 
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x4004803c
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x4004803c
   \   000000F2   0x6008             STR      R0,[R1, #+0]
     78          #endif  
     79            SIM->SCGC7 |= SIM_SCGC7_DMA_MASK;     //打开DMA模块时钟
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable19_4  ;; 0x40048040
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable19_4  ;; 0x40048040
   \   00000102   0x6008             STR      R0,[R1, #+0]
     80            
     81            //关闭通道x硬件DMA请求 
     82            DMA0->ERQ &= ~(1<<chx);
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable19_5  ;; 0x4000800c
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0x2101             MOVS     R1,#+1
   \   0000010C   0x40B1             LSLS     R1,R1,R6
   \   0000010E   0x4388             BICS     R0,R0,R1
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable19_5  ;; 0x4000800c
   \   00000114   0x6008             STR      R0,[R1, #+0]
     83            
     84            //选择 通道x 配置外设的DMA源请求编号
     85          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
     86            DMAMUX->CHCFG[chx] = DMAMUX_CHCFG_SOURCE(req);
     87            //是否使能周期触发功能
     88            if(periodic_trigg == TRUE)
     89            {
     90              DMAMUX->CHCFG[chx] |= DMAMUX_CHCFG_TRIG_MASK;
     91            }
     92            else
     93            {
     94              DMAMUX->CHCFG[chx] &= ~(DMAMUX_CHCFG_TRIG_MASK);
     95            }
     96          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
     97            if(chx < 16)
   \   00000116   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000118   0x2E10             CMP      R6,#+16
   \   0000011A   0xDA20             BGE.N    ??DMA_Init_7
     98            {
     99              DMAMUX0->CHCFG[chx] = DMAMUX_CHCFG_SOURCE(req);
   \   0000011C   0xF017 0x003F      ANDS     R0,R7,#0x3F
   \   00000120   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x40021000
   \   00000124   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000126   0x5588             STRB     R0,[R1, R6]
    100              //是否使能周期触发功能
    101              if(periodic_trigg == TRUE)
   \   00000128   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000012C   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000130   0xD10A             BNE.N    ??DMA_Init_8
    102              {
    103                DMAMUX0->CHCFG[chx] |= DMAMUX_CHCFG_TRIG_MASK;
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x40021000
   \   00000136   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000138   0x5D80             LDRB     R0,[R0, R6]
   \   0000013A   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x40021000
   \   00000142   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000144   0x5588             STRB     R0,[R1, R6]
   \   00000146   0xE034             B.N      ??DMA_Init_9
    104              }
    105              else
    106              {
    107                DMAMUX0->CHCFG[chx] &= ~(DMAMUX_CHCFG_TRIG_MASK);
   \                     ??DMA_Init_8: (+1)
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x40021000
   \   0000014C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000014E   0x5D80             LDRB     R0,[R0, R6]
   \   00000150   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   00000154   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x40021000
   \   00000158   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000015A   0x5588             STRB     R0,[R1, R6]
   \   0000015C   0xE029             B.N      ??DMA_Init_9
    108              }
    109            }
    110            else // ch > 16
    111            {
    112              DMAMUX1->CHCFG[chx - 16] = DMAMUX_CHCFG_SOURCE(req);
   \                     ??DMA_Init_7: (+1)
   \   0000015E   0xF017 0x003F      ANDS     R0,R7,#0x3F
   \   00000162   0x.... 0x....      LDR.W    R1,??DataTable19_7  ;; 0x40022000
   \   00000166   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000168   0x4431             ADD      R1,R1,R6
   \   0000016A   0xF801 0x0C10      STRB     R0,[R1, #-16]
    113              //是否使能周期触发功能
    114              if(periodic_trigg == TRUE)
   \   0000016E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000172   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000176   0xD10E             BNE.N    ??DMA_Init_10
    115              {
    116                DMAMUX1->CHCFG[chx - 16] |= DMAMUX_CHCFG_TRIG_MASK;
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable19_7  ;; 0x40022000
   \   0000017C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000017E   0x4430             ADD      R0,R0,R6
   \   00000180   0xF810 0x0C10      LDRB     R0,[R0, #-16]
   \   00000184   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable19_7  ;; 0x40022000
   \   0000018C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000018E   0x4431             ADD      R1,R1,R6
   \   00000190   0xF801 0x0C10      STRB     R0,[R1, #-16]
   \   00000194   0xE00D             B.N      ??DMA_Init_9
    117              }
    118              else
    119              {
    120                DMAMUX1->CHCFG[chx - 16] &= ~(DMAMUX_CHCFG_TRIG_MASK);
   \                     ??DMA_Init_10: (+1)
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable19_7  ;; 0x40022000
   \   0000019A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000019C   0x4430             ADD      R0,R0,R6
   \   0000019E   0xF810 0x0C10      LDRB     R0,[R0, #-16]
   \   000001A2   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   000001A6   0x.... 0x....      LDR.W    R1,??DataTable19_7  ;; 0x40022000
   \   000001AA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001AC   0x4431             ADD      R1,R1,R6
   \   000001AE   0xF801 0x0C10      STRB     R0,[R1, #-16]
    121              }
    122            }
    123          #endif   
    124          
    125            
    126            
    127            //设置源地址   
    128            DMA0->TCD[chx].SADDR = DMA_SADDR_SADDR(src_addr);
   \                     ??DMA_Init_9: (+1)
   \   000001B2   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x40009000
   \   000001B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001B8   0x0171             LSLS     R1,R6,#+5
   \   000001BA   0x5044             STR      R4,[R0, R1]
    129            //在执行完针对源地址的操作之后，在源地址的基础上增加/减少偏移地址
    130            DMA0->TCD[chx].SOFF = DMA_SOFF_SOFF(src_addroffset);
   \   000001BC   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000001C0   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   000001C4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001C6   0x0172             LSLS     R2,R6,#+5
   \   000001C8   0x4411             ADD      R1,R1,R2
   \   000001CA   0x8088             STRH     R0,[R1, #+4]
    131            //设置源地址的传输大小
    132            DMA0->TCD[chx].ATTR = 0 | DMA_ATTR_SSIZE(src_dsize);
   \   000001CC   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000001D0   0xEA5F 0x200A      LSLS     R0,R10,#+8
   \   000001D4   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000001D8   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   000001DC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001DE   0x0172             LSLS     R2,R6,#+5
   \   000001E0   0x4411             ADD      R1,R1,R2
   \   000001E2   0x80C8             STRH     R0,[R1, #+6]
    133            //主的计数次数（major iteration count）达到后，重新调整源地址
    134            DMA0->TCD[chx].SLAST = DMA_SLAST_SLAST(src_lastadj);
   \   000001E4   0x9803             LDR      R0,[SP, #+12]
   \   000001E6   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   000001EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001EC   0x0172             LSLS     R2,R6,#+5
   \   000001EE   0x4411             ADD      R1,R1,R2
   \   000001F0   0x60C8             STR      R0,[R1, #+12]
    135            
    136            //设置目的地址 
    137            DMA0->TCD[chx].DADDR = DMA_DADDR_DADDR(dst_addr);
   \   000001F2   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x40009000
   \   000001F6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001F8   0x0171             LSLS     R1,R6,#+5
   \   000001FA   0x4408             ADD      R0,R0,R1
   \   000001FC   0x6105             STR      R5,[R0, #+16]
    138            //在执行完针对目的地址的操作之后，在目的地址的基础上增加/减少偏移地址
    139            DMA0->TCD[chx].DOFF = DMA_DOFF_DOFF(dst_addroffset);
   \   000001FE   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000202   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   00000206   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000208   0x0172             LSLS     R2,R6,#+5
   \   0000020A   0x4411             ADD      R1,R1,R2
   \   0000020C   0x8288             STRH     R0,[R1, #+20]
    140            //设置目的地址的传输宽度
    141            DMA0->TCD[chx].ATTR |= DMA_ATTR_DSIZE(dst_dsize);
   \   0000020E   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x40009000
   \   00000212   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000214   0x0171             LSLS     R1,R6,#+5
   \   00000216   0x4408             ADD      R0,R0,R1
   \   00000218   0x88C1             LDRH     R1,[R0, #+6]
   \   0000021A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000021E   0xF01B 0x0007      ANDS     R0,R11,#0x7
   \   00000222   0x4301             ORRS     R1,R0,R1
   \   00000224   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x40009000
   \   00000228   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000022A   0x0172             LSLS     R2,R6,#+5
   \   0000022C   0x4410             ADD      R0,R0,R2
   \   0000022E   0x80C1             STRH     R1,[R0, #+6]
    142            //主的计数次数（major iteration count）达到后，重新调整目的地址
    143            DMA0->TCD[chx].DLAST_SGA = DMA_DLAST_SGA_DLASTSGA(dst_lastadj);
   \   00000230   0x9802             LDR      R0,[SP, #+8]
   \   00000232   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   00000236   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000238   0x0172             LSLS     R2,R6,#+5
   \   0000023A   0x4411             ADD      R1,R1,R2
   \   0000023C   0x6188             STR      R0,[R1, #+24]
    144            
    145            //默认为禁用通道链接功能，后续更新添加此功能
    146            if( 1 == 1)
    147            {
    148              //===============设置主计数器长度，循环次数====================================
    149              //设置主循环计数器 current major loop count
    150              DMA0->TCD[chx].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(major_cnt);
   \   0000023E   0xEA5F 0x4049      LSLS     R0,R9,#+17       ;; ZeroExtS R0,R9,#+17,#+17
   \   00000242   0x0C40             LSRS     R0,R0,#+17
   \   00000244   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   00000248   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000024A   0x0172             LSLS     R2,R6,#+5
   \   0000024C   0x4411             ADD      R1,R1,R2
   \   0000024E   0x82C8             STRH     R0,[R1, #+22]
    151              //起始循环计数器，当主循环计数器为零的时候，将装载起始循环计数器的值
    152              DMA0->TCD[chx].BITER_ELINKNO = DMA_CITER_ELINKNO_CITER(major_cnt);
   \   00000250   0xEA5F 0x4049      LSLS     R0,R9,#+17       ;; ZeroExtS R0,R9,#+17,#+17
   \   00000254   0x0C40             LSRS     R0,R0,#+17
   \   00000256   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   0000025A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000025C   0x0172             LSLS     R2,R6,#+5
   \   0000025E   0x4411             ADD      R1,R1,R2
   \   00000260   0x83C8             STRH     R0,[R1, #+30]
    153            }
    154            
    155            //默认为禁用次循环地址偏移功能，后续更新添加此功能
    156            if( 1 == 1)
    157            {
    158              //次循环一次传输字节的个数
    159              DMA0->TCD[chx].NBYTES_MLNO = DMA_NBYTES_MLNO_NBYTES(minor_cnt);
   \   00000262   0x9804             LDR      R0,[SP, #+16]
   \   00000264   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   00000268   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000026A   0x0172             LSLS     R2,R6,#+5
   \   0000026C   0x4411             ADD      R1,R1,R2
   \   0000026E   0x6088             STR      R0,[R1, #+8]
    160            }
    161            
    162            //清空TCD控制寄存器     
    163            DMA0->TCD[chx].CSR = 0;
   \   00000270   0x2000             MOVS     R0,#+0
   \   00000272   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   00000276   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000278   0x0172             LSLS     R2,R6,#+5
   \   0000027A   0x4411             ADD      R1,R1,R2
   \   0000027C   0x8388             STRH     R0,[R1, #+28]
    164            
    165            //配置eDMA中断
    166            if((dma_init_struct.DMA_Isr != NULL) && 
    167               (dma_init_struct.DMA_MajorCompleteIntEnable == TRUE))
   \   0000027E   0x9818             LDR      R0,[SP, #+96]
   \   00000280   0x2800             CMP      R0,#+0
   \   00000282   0xD017             BEQ.N    ??DMA_Init_11
   \   00000284   0xF89D 0x005D      LDRB     R0,[SP, #+93]
   \   00000288   0x2801             CMP      R0,#+1
   \   0000028A   0xD113             BNE.N    ??DMA_Init_11
    168            {
    169          
    170                 DMA0->TCD[chx].CSR |= DMA_CSR_INTMAJOR_MASK; //使能DMA 主循环计数器减到零 中断
   \   0000028C   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x40009000
   \   00000290   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000292   0x0171             LSLS     R1,R6,#+5
   \   00000294   0x4408             ADD      R0,R0,R1
   \   00000296   0x8B80             LDRH     R0,[R0, #+28]
   \   00000298   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000029C   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   000002A0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002A2   0x0172             LSLS     R2,R6,#+5
   \   000002A4   0x4411             ADD      R1,R1,R2
   \   000002A6   0x8388             STRH     R0,[R1, #+28]
    171                 DMA_ISR[chx] = dma_init_struct.DMA_Isr;
   \   000002A8   0x9818             LDR      R0,[SP, #+96]
   \   000002AA   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   000002AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002B0   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
    172            }
    173            if((dma_init_struct.DMA_Isr != NULL) && 
    174               (dma_init_struct.DMA_MajorHalfCompleteIntEnable == TRUE))
   \                     ??DMA_Init_11: (+1)
   \   000002B4   0x9818             LDR      R0,[SP, #+96]
   \   000002B6   0x2800             CMP      R0,#+0
   \   000002B8   0xD017             BEQ.N    ??DMA_Init_12
   \   000002BA   0xF89D 0x005E      LDRB     R0,[SP, #+94]
   \   000002BE   0x2801             CMP      R0,#+1
   \   000002C0   0xD113             BNE.N    ??DMA_Init_12
    175            {
    176          
    177                 DMA0->TCD[chx].CSR |= DMA_CSR_INTHALF_MASK; //使能DMA 主循环计数器减到一半 中断
   \   000002C2   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x40009000
   \   000002C6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002C8   0x0171             LSLS     R1,R6,#+5
   \   000002CA   0x4408             ADD      R0,R0,R1
   \   000002CC   0x8B80             LDRH     R0,[R0, #+28]
   \   000002CE   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000002D2   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   000002D6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002D8   0x0172             LSLS     R2,R6,#+5
   \   000002DA   0x4411             ADD      R1,R1,R2
   \   000002DC   0x8388             STRH     R0,[R1, #+28]
    178                 DMA_ISR[chx] = dma_init_struct.DMA_Isr;
   \   000002DE   0x9818             LDR      R0,[SP, #+96]
   \   000002E0   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   000002E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002E6   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
    179            }
    180              
    181            if(auto_disable == TRUE)
   \                     ??DMA_Init_12: (+1)
   \   000002EA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000002EE   0x2801             CMP      R0,#+1
   \   000002F0   0xD10E             BNE.N    ??DMA_Init_13
    182            {
    183               DMA0->TCD[chx].CSR |= DMA_CSR_DREQ_MASK; //主循环计数器等于零后，自动关闭DMA 
   \   000002F2   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x40009000
   \   000002F6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002F8   0x0171             LSLS     R1,R6,#+5
   \   000002FA   0x4408             ADD      R0,R0,R1
   \   000002FC   0x8B80             LDRH     R0,[R0, #+28]
   \   000002FE   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000302   0x.... 0x....      LDR.W    R1,??DataTable19_8  ;; 0x40009000
   \   00000306   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000308   0x0172             LSLS     R2,R6,#+5
   \   0000030A   0x4411             ADD      R1,R1,R2
   \   0000030C   0x8388             STRH     R0,[R1, #+28]
   \   0000030E   0xE00E             B.N      ??DMA_Init_14
    184            }
    185            else
    186            {
    187               DMA0->TCD[chx].CSR &= ~(DMA_CSR_DREQ_MASK); //主循环计数器等于零后，不关闭DMA
   \                     ??DMA_Init_13: (+1)
   \   00000310   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x40009000
   \   00000314   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000316   0x0171             LSLS     R1,R6,#+5
   \   00000318   0x4408             ADD      R0,R0,R1
   \   0000031A   0x8B81             LDRH     R1,[R0, #+28]
   \   0000031C   0xF64F 0x70F7      MOVW     R0,#+65527
   \   00000320   0x4001             ANDS     R1,R0,R1
   \   00000322   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x40009000
   \   00000326   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000328   0x0172             LSLS     R2,R6,#+5
   \   0000032A   0x4410             ADD      R0,R0,R2
   \   0000032C   0x8381             STRH     R1,[R0, #+28]
    188            } 
    189           
    190            //DMA通道使能
    191          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10)   
    192            DMAMUX->CHCFG[chx] |= DMAMUX_CHCFG_ENBL_MASK;
    193          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    194            if(chx < 16)
   \                     ??DMA_Init_14: (+1)
   \   0000032E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000330   0x2E10             CMP      R6,#+16
   \   00000332   0xDA0A             BGE.N    ??DMA_Init_15
    195            {
    196              DMAMUX0->CHCFG[chx] |= DMAMUX_CHCFG_ENBL_MASK;
   \   00000334   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x40021000
   \   00000338   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000033A   0x5D80             LDRB     R0,[R0, R6]
   \   0000033C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000340   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x40021000
   \   00000344   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000346   0x5588             STRB     R0,[R1, R6]
   \   00000348   0xE00D             B.N      ??DMA_Init_16
    197            }
    198            else
    199            {
    200              DMAMUX1->CHCFG[chx - 16] |= DMAMUX_CHCFG_ENBL_MASK;
   \                     ??DMA_Init_15: (+1)
   \   0000034A   0x.... 0x....      LDR.W    R0,??DataTable19_7  ;; 0x40022000
   \   0000034E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000350   0x4430             ADD      R0,R0,R6
   \   00000352   0xF810 0x0C10      LDRB     R0,[R0, #-16]
   \   00000356   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000035A   0x.... 0x....      LDR.W    R1,??DataTable19_7  ;; 0x40022000
   \   0000035E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000360   0x4431             ADD      R1,R1,R6
   \   00000362   0xF801 0x0C10      STRB     R0,[R1, #-16]
    201            }
    202          #endif
    203            return 1;
   \                     ??DMA_Init_16: (+1)
   \   00000366   0x2001             MOVS     R0,#+1
   \                     ??DMA_Init_17: (+1)
   \   00000368   0xB005             ADD      SP,SP,#+20
   \   0000036A   0xE8BD 0x0FF0      POP      {R4-R11}
   \   0000036E   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    204          }
    205          

   \                                 In section .text, align 2, keep-with-next
    206          char DMA_changeLength(uint8 chx, int length)
    207          {
   \                     DMA_changeLength: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
    208            //主的计数次数（major iteration count）达到后，重新调整源地址
    209            DMA0->TCD[chx].SLAST = DMA_SLAST_SLAST(-length);
   \   00000004   0x4248             RSBS     R0,R1,#+0
   \   00000006   0x.... 0x....      LDR.W    R3,??DataTable19_8  ;; 0x40009000
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x0154             LSLS     R4,R2,#+5
   \   0000000E   0x4423             ADD      R3,R3,R4
   \   00000010   0x60D8             STR      R0,[R3, #+12]
    210            //设置主循环计数器 current major loop count
    211            DMA0->TCD[chx].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(length);
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   00000016   0x0C40             LSRS     R0,R0,#+17
   \   00000018   0x.... 0x....      LDR.W    R3,??DataTable19_8  ;; 0x40009000
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x0154             LSLS     R4,R2,#+5
   \   00000020   0x4423             ADD      R3,R3,R4
   \   00000022   0x82D8             STRH     R0,[R3, #+22]
    212            //起始循环计数器，当主循环计数器为零的时候，将装载起始循环计数器的值
    213            DMA0->TCD[chx].BITER_ELINKNO = DMA_CITER_ELINKNO_CITER(length);
   \   00000024   0x0008             MOVS     R0,R1
   \   00000026   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   00000028   0x0C40             LSRS     R0,R0,#+17
   \   0000002A   0x.... 0x....      LDR.W    R3,??DataTable19_8  ;; 0x40009000
   \   0000002E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000030   0x0154             LSLS     R4,R2,#+5
   \   00000032   0x4423             ADD      R3,R3,R4
   \   00000034   0x83D8             STRH     R0,[R3, #+30]
    214            return 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xBC10             POP      {R4}
   \   0000003A   0x4770             BX       LR               ;; return
    215          }
    216          
    217          
    218          
    219          
    220          /*
    221           * DMA_EnableIrq
    222           * 使能eDMA中断
    223           * 
    224           * 参数:
    225           *    dma_init_struct--eDMA初始化结构体，
    226           *                        具体定义见DMA_InitTypeDef
    227           *
    228           * 输出:
    229           *    0--失败
    230           *    1--成功
    231           */

   \                                 In section .text, align 2, keep-with-next
    232          uint8 DMA_EnableIrq(DMA_InitTypeDef dma_init_struct)
    233          {
   \                     DMA_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    234          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
    235            enable_irq((IRQn_Type)(dma_init_struct.DMA_CHx + DMA0_IRQn)); 
    236          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    237            if(dma_init_struct.DMA_CHx < 16)
   \   00000004   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000008   0x2810             CMP      R0,#+16
   \   0000000A   0xDA05             BGE.N    ??DMA_EnableIrq_0
    238            {
    239              enable_irq((IRQn_Type)(dma_init_struct.DMA_CHx + DMA0_DMA16_IRQn));
   \   0000000C   0xF99D 0x0008      LDRSB    R0,[SP, #+8]
   \   00000010   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       _ZN26_INTERNAL_5_DMA_c_DMA_Init16__NVIC_EnableIRQE4IRQn
   \   00000016   0xE005             B.N      ??DMA_EnableIrq_1
    240            }
    241            else // ch > 16
    242            {
    243              enable_irq((IRQn_Type)(dma_init_struct.DMA_CHx - 16 + DMA0_DMA16_IRQn));
   \                     ??DMA_EnableIrq_0: (+1)
   \   00000018   0xF99D 0x0008      LDRSB    R0,[SP, #+8]
   \   0000001C   0x3810             SUBS     R0,R0,#+16
   \   0000001E   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000020   0x.... 0x....      BL       _ZN26_INTERNAL_5_DMA_c_DMA_Init16__NVIC_EnableIRQE4IRQn
    244            }
    245          #endif 
    246            return 1;
   \                     ??DMA_EnableIrq_1: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xBC02             POP      {R1}
   \   00000028   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    247          }
    248          
    249          /*
    250           * DMA_DisableIrq
    251           * 禁用eDMA中断
    252           * 
    253           * 参数:
    254           *    dma_init_struct--eDMA初始化结构体，
    255           *                        具体定义见DMA_InitTypeDef
    256           *
    257           * 输出:
    258           *    0--失败
    259           *    1--成功
    260           */

   \                                 In section .text, align 2, keep-with-next
    261          uint8 DMA_DisableIrq(DMA_InitTypeDef dma_init_struct)
    262          {
   \                     DMA_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    263          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
    264            disable_irq((IRQn_Type)(dma_init_struct.DMA_CHx + DMA0_IRQn)); 
    265          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    266            if(dma_init_struct.DMA_CHx < 16)
   \   00000004   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000008   0x2810             CMP      R0,#+16
   \   0000000A   0xDA05             BGE.N    ??DMA_DisableIrq_0
    267            {
    268              disable_irq((IRQn_Type)(dma_init_struct.DMA_CHx + DMA0_DMA16_IRQn));
   \   0000000C   0xF99D 0x0008      LDRSB    R0,[SP, #+8]
   \   00000010   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       _ZN26_INTERNAL_5_DMA_c_DMA_Init17__NVIC_DisableIRQE4IRQn
   \   00000016   0xE005             B.N      ??DMA_DisableIrq_1
    269            }
    270            else // ch > 16
    271            {
    272              disable_irq((IRQn_Type)(dma_init_struct.DMA_CHx - 16 + DMA0_DMA16_IRQn));
   \                     ??DMA_DisableIrq_0: (+1)
   \   00000018   0xF99D 0x0008      LDRSB    R0,[SP, #+8]
   \   0000001C   0x3810             SUBS     R0,R0,#+16
   \   0000001E   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000020   0x.... 0x....      BL       _ZN26_INTERNAL_5_DMA_c_DMA_Init17__NVIC_DisableIRQE4IRQn
    273            }
    274          #endif 
    275            return 1;
   \                     ??DMA_DisableIrq_1: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xBC02             POP      {R1}
   \   00000028   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    276          }
    277          
    278          
    279          
    280          /*
    281           * eDMA中断处理函数
    282           * 与启动文件startup_K60.s中的中断向量表关联
    283           * 用户无需修改，程序自动进入对应通道中断函数
    284           */
    285          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
    286          void DMA0_IRQHandler(void)
    287          {
    288          #if (UCOS_II > 0u)
    289            OS_CPU_SR  cpu_sr = 0u;
    290            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    291            OSIntEnter();
    292            OS_EXIT_CRITICAL();
    293          #endif  
    294            
    295            //调用用户自定义中断服务
    296            DMA_ISR[0]();
    297            //清除中断标志位
    298            DMA0->INT |= 0x1u<<0;
    299            
    300          #if (UCOS_II > 0u)
    301            OSIntExit();          //告知系统此时即将离开中断服务子函数
    302          #endif
    303          }
    304          
    305          void DMA1_IRQHandler(void)
    306          {
    307          #if (UCOS_II > 0u)
    308            OS_CPU_SR  cpu_sr = 0u;
    309            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    310            OSIntEnter();
    311            OS_EXIT_CRITICAL();
    312          #endif  
    313            
    314            //调用用户自定义中断服务
    315            DMA_ISR[1]();
    316            //清除中断标志位
    317            DMA0->INT |= 0x1u<<1;
    318            
    319          #if (UCOS_II > 0u)
    320            OSIntExit();          //告知系统此时即将离开中断服务子函数
    321          #endif
    322          }
    323          
    324          void DMA2_IRQHandler(void)
    325          {
    326          #if (UCOS_II > 0u)
    327            OS_CPU_SR  cpu_sr = 0u;
    328            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    329            OSIntEnter();
    330            OS_EXIT_CRITICAL();
    331          #endif  
    332            
    333            //调用用户自定义中断服务
    334            DMA_ISR[2]();
    335            //清除中断标志位
    336            DMA0->INT |= 0x1u<<2;
    337            
    338          #if (UCOS_II > 0u)
    339            OSIntExit();          //告知系统此时即将离开中断服务子函数
    340          #endif
    341          }
    342          
    343          void DMA3_IRQHandler(void)
    344          {
    345          #if (UCOS_II > 0u)
    346            OS_CPU_SR  cpu_sr = 0u;
    347            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    348            OSIntEnter();
    349            OS_EXIT_CRITICAL();
    350          #endif  
    351            
    352            //调用用户自定义中断服务
    353            DMA_ISR[3]();
    354            //清除中断标志位
    355            DMA0->INT |= 0x1u<<3;
    356            
    357          #if (UCOS_II > 0u)
    358            OSIntExit();          //告知系统此时即将离开中断服务子函数
    359          #endif
    360          }
    361          
    362          void DMA4_IRQHandler(void)
    363          {
    364          #if (UCOS_II > 0u)
    365            OS_CPU_SR  cpu_sr = 0u;
    366            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    367            OSIntEnter();
    368            OS_EXIT_CRITICAL();
    369          #endif  
    370            
    371            //调用用户自定义中断服务
    372            DMA_ISR[4]();
    373            //清除中断标志位
    374            DMA0->INT |= 0x1u<<4;
    375            
    376          #if (UCOS_II > 0u)
    377            OSIntExit();          //告知系统此时即将离开中断服务子函数
    378          #endif
    379          }
    380          
    381          void DMA5_IRQHandler(void)
    382          {
    383          #if (UCOS_II > 0u)
    384            OS_CPU_SR  cpu_sr = 0u;
    385            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    386            OSIntEnter();
    387            OS_EXIT_CRITICAL();
    388          #endif  
    389            
    390            //调用用户自定义中断服务
    391            DMA_ISR[5]();
    392            //清除中断标志位
    393            DMA0->INT |= 0x1u<<5;
    394            
    395          #if (UCOS_II > 0u)
    396            OSIntExit();          //告知系统此时即将离开中断服务子函数
    397          #endif
    398          }
    399          
    400          void DMA6_IRQHandler(void)
    401          {
    402          #if (UCOS_II > 0u)
    403            OS_CPU_SR  cpu_sr = 0u;
    404            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    405            OSIntEnter();
    406            OS_EXIT_CRITICAL();
    407          #endif  
    408            
    409            //调用用户自定义中断服务
    410            DMA_ISR[6]();
    411            //清除中断标志位
    412            DMA0->INT |= 0x1u<<6;
    413            
    414          #if (UCOS_II > 0u)
    415            OSIntExit();          //告知系统此时即将离开中断服务子函数
    416          #endif
    417          }
    418          
    419          void DMA7_IRQHandler(void)
    420          {
    421          #if (UCOS_II > 0u)
    422            OS_CPU_SR  cpu_sr = 0u;
    423            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    424            OSIntEnter();
    425            OS_EXIT_CRITICAL();
    426          #endif  
    427            
    428            //调用用户自定义中断服务
    429            DMA_ISR[7]();
    430            //清除中断标志位
    431            DMA0->INT |= 0x1u<<7;
    432            
    433          #if (UCOS_II > 0u)
    434            OSIntExit();          //告知系统此时即将离开中断服务子函数
    435          #endif
    436          }
    437          
    438          void DMA8_IRQHandler(void)
    439          {
    440          #if (UCOS_II > 0u)
    441            OS_CPU_SR  cpu_sr = 0u;
    442            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    443            OSIntEnter();
    444            OS_EXIT_CRITICAL();
    445          #endif  
    446            
    447            //调用用户自定义中断服务
    448            DMA_ISR[8]();
    449            //清除中断标志位
    450            DMA0->INT |= 0x1u<<8;
    451            
    452          #if (UCOS_II > 0u)
    453            OSIntExit();          //告知系统此时即将离开中断服务子函数
    454          #endif
    455          }
    456          
    457          void DMA9_IRQHandler(void)
    458          {
    459          #if (UCOS_II > 0u)
    460            OS_CPU_SR  cpu_sr = 0u;
    461            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    462            OSIntEnter();
    463            OS_EXIT_CRITICAL();
    464          #endif  
    465            
    466            //调用用户自定义中断服务
    467            DMA_ISR[9]();
    468            //清除中断标志位
    469            DMA0->INT |= 0x1u<<9;
    470            
    471          #if (UCOS_II > 0u)
    472            OSIntExit();          //告知系统此时即将离开中断服务子函数
    473          #endif
    474          }
    475          
    476          void DMA10_IRQHandler(void)
    477          {
    478          #if (UCOS_II > 0u)
    479            OS_CPU_SR  cpu_sr = 0u;
    480            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    481            OSIntEnter();
    482            OS_EXIT_CRITICAL();
    483          #endif  
    484            
    485            //调用用户自定义中断服务
    486            DMA_ISR[10]();
    487            //清除中断标志位
    488            DMA0->INT |= 0x1u<10;
    489            
    490          #if (UCOS_II > 0u)
    491            OSIntExit();          //告知系统此时即将离开中断服务子函数
    492          #endif
    493          }
    494          
    495          void DMA11_IRQHandler(void)
    496          {
    497          #if (UCOS_II > 0u)
    498            OS_CPU_SR  cpu_sr = 0u;
    499            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    500            OSIntEnter();
    501            OS_EXIT_CRITICAL();
    502          #endif  
    503            
    504            //调用用户自定义中断服务
    505            DMA_ISR[11]();
    506            //清除中断标志位
    507            DMA0->INT |= 0x1u<<11;
    508            
    509          #if (UCOS_II > 0u)
    510            OSIntExit();          //告知系统此时即将离开中断服务子函数
    511          #endif
    512          }
    513          
    514          void DMA12_IRQHandler(void)
    515          {
    516          #if (UCOS_II > 0u)
    517            OS_CPU_SR  cpu_sr = 0u;
    518            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    519            OSIntEnter();
    520            OS_EXIT_CRITICAL();
    521          #endif  
    522            
    523            //调用用户自定义中断服务
    524            DMA_ISR[12]();
    525            //清除中断标志位
    526            DMA0->INT |= 0x1u<<12;
    527            
    528          #if (UCOS_II > 0u)
    529            OSIntExit();          //告知系统此时即将离开中断服务子函数
    530          #endif
    531          }
    532          
    533          void DMA13_IRQHandler(void)
    534          {
    535          #if (UCOS_II > 0u)
    536            OS_CPU_SR  cpu_sr = 0u;
    537            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    538            OSIntEnter();
    539            OS_EXIT_CRITICAL();
    540          #endif  
    541            
    542            //调用用户自定义中断服务
    543            DMA_ISR[13]();
    544            //清除中断标志位
    545            DMA0->INT |= 0x1u<<13;
    546            
    547          #if (UCOS_II > 0u)
    548            OSIntExit();          //告知系统此时即将离开中断服务子函数
    549          #endif
    550          }
    551          
    552          void DMA14_IRQHandler(void)
    553          {
    554          #if (UCOS_II > 0u)
    555            OS_CPU_SR  cpu_sr = 0u;
    556            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    557            OSIntEnter();
    558            OS_EXIT_CRITICAL();
    559          #endif  
    560            
    561            //调用用户自定义中断服务
    562            DMA_ISR[14]();
    563            //清除中断标志位
    564            DMA0->INT |= 0x1u<<14;
    565            
    566          #if (UCOS_II > 0u)
    567            OSIntExit();          //告知系统此时即将离开中断服务子函数
    568          #endif
    569          }
    570          
    571          void DMA15_IRQHandler(void)
    572          {
    573          #if (UCOS_II > 0u)
    574            OS_CPU_SR  cpu_sr = 0u;
    575            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    576            OSIntEnter();
    577            OS_EXIT_CRITICAL();
    578          #endif  
    579            
    580            //调用用户自定义中断服务
    581            DMA_ISR[15]();
    582            //清除中断标志位
    583            DMA0->INT |= 0x1u<<15;
    584            
    585          #if (UCOS_II > 0u)
    586            OSIntExit();          //告知系统此时即将离开中断服务子函数
    587          #endif
    588          }
    589          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    590          //DMA0 DMA16共用此Handler

   \                                 In section .text, align 2, keep-with-next
    591          void DMA0_IRQHandler(void)
    592          {
   \                     _Z15DMA0_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    593          #if (UCOS_II > 0u)
    594            OS_CPU_SR  cpu_sr = 0u;
    595            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    596            OSIntEnter();
    597            OS_EXIT_CRITICAL();
    598          #endif  
    599            
    600            if( DMA0->INT & 0x1u<<0)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x07C0             LSLS     R0,R0,#+31
   \   0000000A   0xD50C             BPL.N    ??DMA0_IRQHandler_0
    601            {
    602              //调用用户自定义中断服务
    603              DMA_ISR[0]();
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x4780             BLX      R0
    604              //清除中断标志位
    605              DMA0->INT |= 0x1u<<0;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable19_10  ;; 0x40008024
   \   00000022   0x6008             STR      R0,[R1, #+0]
   \   00000024   0xE010             B.N      ??DMA0_IRQHandler_1
    606            }
    607            else if(DMA0->INT & 0x1u<<16)
   \                     ??DMA0_IRQHandler_0: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x03C0             LSLS     R0,R0,#+15
   \   0000002E   0xD50B             BPL.N    ??DMA0_IRQHandler_1
    608            {
    609              //调用用户自定义中断服务
    610              DMA_ISR[16]();
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000034   0x6C00             LDR      R0,[R0, #+64]
   \   00000036   0x4780             BLX      R0
    611              //清除中断标志位
    612              DMA0->INT |= 0x1u<<16;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable19_10  ;; 0x40008024
   \   00000046   0x6008             STR      R0,[R1, #+0]
    613            }
    614            else
    615            {}
    616            
    617          #if (UCOS_II > 0u)
    618            OSIntExit();          //告知系统此时即将离开中断服务子函数
    619          #endif
    620          }
   \                     ??DMA0_IRQHandler_1: (+1)
   \                     ??DMA0_IRQHandler_2: (+1)
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    621          //DMA1 DMA17共用此Handler

   \                                 In section .text, align 2, keep-with-next
    622          void DMA1_IRQHandler(void)
    623          {
   \                     _Z15DMA1_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    624          #if (UCOS_II > 0u)
    625            OS_CPU_SR  cpu_sr = 0u;
    626            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    627            OSIntEnter();
    628            OS_EXIT_CRITICAL();
    629          #endif  
    630            
    631            if( DMA0->INT & 0x1u<<1)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0780             LSLS     R0,R0,#+30
   \   0000000A   0xD50C             BPL.N    ??DMA1_IRQHandler_0
    632            {
    633              //调用用户自定义中断服务
    634              DMA_ISR[1]();
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x4780             BLX      R0
    635              //清除中断标志位
    636              DMA0->INT |= 0x1u<<1;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable19_10  ;; 0x40008024
   \   00000022   0x6008             STR      R0,[R1, #+0]
   \   00000024   0xE010             B.N      ??DMA1_IRQHandler_1
    637            }
    638            else if(DMA0->INT & 0x1u<<17)
   \                     ??DMA1_IRQHandler_0: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x0380             LSLS     R0,R0,#+14
   \   0000002E   0xD50B             BPL.N    ??DMA1_IRQHandler_1
    639            {
    640              //调用用户自定义中断服务
    641              DMA_ISR[17]();
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000034   0x6C40             LDR      R0,[R0, #+68]
   \   00000036   0x4780             BLX      R0
    642              //清除中断标志位
    643              DMA0->INT |= 0x1u<<17;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable19_10  ;; 0x40008024
   \   00000046   0x6008             STR      R0,[R1, #+0]
    644            }
    645            else
    646            {}
    647            
    648          #if (UCOS_II > 0u)
    649            OSIntExit();          //告知系统此时即将离开中断服务子函数
    650          #endif
    651          }
   \                     ??DMA1_IRQHandler_1: (+1)
   \                     ??DMA1_IRQHandler_2: (+1)
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    652          //DMA2 DMA18共用此Handler

   \                                 In section .text, align 2, keep-with-next
    653          void DMA2_IRQHandler(void)
    654          {
   \                     _Z15DMA2_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    655          #if (UCOS_II > 0u)
    656            OS_CPU_SR  cpu_sr = 0u;
    657            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    658            OSIntEnter();
    659            OS_EXIT_CRITICAL();
    660          #endif  
    661            
    662            if( DMA0->INT & 0x1u<<2)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0740             LSLS     R0,R0,#+29
   \   0000000A   0xD50C             BPL.N    ??DMA2_IRQHandler_0
    663            {
    664              //调用用户自定义中断服务
    665              DMA_ISR[2]();
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000010   0x6880             LDR      R0,[R0, #+8]
   \   00000012   0x4780             BLX      R0
    666              //清除中断标志位
    667              DMA0->INT |= 0x1u<<2;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable19_10  ;; 0x40008024
   \   00000022   0x6008             STR      R0,[R1, #+0]
   \   00000024   0xE010             B.N      ??DMA2_IRQHandler_1
    668            }
    669            else if(DMA0->INT & 0x1u<<18)
   \                     ??DMA2_IRQHandler_0: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x0340             LSLS     R0,R0,#+13
   \   0000002E   0xD50B             BPL.N    ??DMA2_IRQHandler_1
    670            {
    671              //调用用户自定义中断服务
    672              DMA_ISR[18]();
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000034   0x6C80             LDR      R0,[R0, #+72]
   \   00000036   0x4780             BLX      R0
    673              //清除中断标志位
    674              DMA0->INT |= 0x1u<<18;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable19_10  ;; 0x40008024
   \   00000046   0x6008             STR      R0,[R1, #+0]
    675            }
    676            else
    677            {}
    678            
    679          #if (UCOS_II > 0u)
    680            OSIntExit();          //告知系统此时即将离开中断服务子函数
    681          #endif
    682          }
   \                     ??DMA2_IRQHandler_1: (+1)
   \                     ??DMA2_IRQHandler_2: (+1)
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    683          //DMA3 DMA19共用此Handler

   \                                 In section .text, align 2, keep-with-next
    684          void DMA3_IRQHandler(void)
    685          {
   \                     _Z15DMA3_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    686          #if (UCOS_II > 0u)
    687            OS_CPU_SR  cpu_sr = 0u;
    688            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    689            OSIntEnter();
    690            OS_EXIT_CRITICAL();
    691          #endif  
    692            
    693            if( DMA0->INT & 0x1u<<3)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0700             LSLS     R0,R0,#+28
   \   0000000A   0xD50C             BPL.N    ??DMA3_IRQHandler_0
    694            {
    695              //调用用户自定义中断服务
    696              DMA_ISR[3]();
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000010   0x68C0             LDR      R0,[R0, #+12]
   \   00000012   0x4780             BLX      R0
    697              //清除中断标志位
    698              DMA0->INT |= 0x1u<<3;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable19_10  ;; 0x40008024
   \   00000022   0x6008             STR      R0,[R1, #+0]
   \   00000024   0xE010             B.N      ??DMA3_IRQHandler_1
    699            }
    700            else if(DMA0->INT & 0x1u<<19)
   \                     ??DMA3_IRQHandler_0: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x0300             LSLS     R0,R0,#+12
   \   0000002E   0xD50B             BPL.N    ??DMA3_IRQHandler_1
    701            {
    702              //调用用户自定义中断服务
    703              DMA_ISR[19]();
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000034   0x6CC0             LDR      R0,[R0, #+76]
   \   00000036   0x4780             BLX      R0
    704              //清除中断标志位
    705              DMA0->INT |= 0x1u<<19;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable19_10  ;; 0x40008024
   \   00000046   0x6008             STR      R0,[R1, #+0]
    706            }
    707            else
    708            {}
    709            
    710          #if (UCOS_II > 0u)
    711            OSIntExit();          //告知系统此时即将离开中断服务子函数
    712          #endif
    713          }
   \                     ??DMA3_IRQHandler_1: (+1)
   \                     ??DMA3_IRQHandler_2: (+1)
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    714          //DMA4 DMA20共用此Handler

   \                                 In section .text, align 2, keep-with-next
    715          void DMA4_IRQHandler(void)
    716          {
   \                     _Z15DMA4_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    717          #if (UCOS_II > 0u)
    718            OS_CPU_SR  cpu_sr = 0u;
    719            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    720            OSIntEnter();
    721            OS_EXIT_CRITICAL();
    722          #endif  
    723            
    724            if( DMA0->INT & 0x1u<<4)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x06C0             LSLS     R0,R0,#+27
   \   0000000A   0xD50C             BPL.N    ??DMA4_IRQHandler_0
    725            {
    726              //调用用户自定义中断服务
    727              DMA_ISR[4]();
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000010   0x6900             LDR      R0,[R0, #+16]
   \   00000012   0x4780             BLX      R0
    728              //清除中断标志位
    729              DMA0->INT |= 0x1u<<4;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40008024
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable19_10  ;; 0x40008024
   \   00000022   0x6008             STR      R0,[R1, #+0]
   \   00000024   0xE00C             B.N      ??DMA4_IRQHandler_1
    730            }
    731            else if(DMA0->INT & 0x1u<<20)
   \                     ??DMA4_IRQHandler_0: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x02C0             LSLS     R0,R0,#+11
   \   0000002C   0xD508             BPL.N    ??DMA4_IRQHandler_1
    732            {
    733              //调用用户自定义中断服务
    734              DMA_ISR[20]();
   \   0000002E   0x....             LDR.N    R0,??DataTable19_9
   \   00000030   0x6D00             LDR      R0,[R0, #+80]
   \   00000032   0x4780             BLX      R0
    735              //清除中断标志位
    736              DMA0->INT |= 0x1u<<20;
   \   00000034   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF450 0x1080      ORRS     R0,R0,#0x100000
   \   0000003C   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    737            }
    738            else
    739            {}
    740            
    741          #if (UCOS_II > 0u)
    742            OSIntExit();          //告知系统此时即将离开中断服务子函数
    743          #endif
    744          }
   \                     ??DMA4_IRQHandler_1: (+1)
   \                     ??DMA4_IRQHandler_2: (+1)
   \   00000040   0xBD01             POP      {R0,PC}          ;; return
    745          //DMA5 DMA21共用此Handler

   \                                 In section .text, align 2, keep-with-next
    746          void DMA5_IRQHandler(void)
    747          {
   \                     _Z15DMA5_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    748          #if (UCOS_II > 0u)
    749            OS_CPU_SR  cpu_sr = 0u;
    750            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    751            OSIntEnter();
    752            OS_EXIT_CRITICAL();
    753          #endif  
    754            
    755            if( DMA0->INT & 0x1u<<5)
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0680             LSLS     R0,R0,#+26
   \   00000008   0xD509             BPL.N    ??DMA5_IRQHandler_0
    756            {
    757              //调用用户自定义中断服务
    758              DMA_ISR[5]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x6940             LDR      R0,[R0, #+20]
   \   0000000E   0x4780             BLX      R0
    759              //清除中断标志位
    760              DMA0->INT |= 0x1u<<5;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA5_IRQHandler_1
    761            }
    762            else if(DMA0->INT & 0x1u<<21)
   \                     ??DMA5_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0280             LSLS     R0,R0,#+10
   \   00000024   0xD508             BPL.N    ??DMA5_IRQHandler_1
    763            {
    764              //调用用户自定义中断服务
    765              DMA_ISR[21]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6D40             LDR      R0,[R0, #+84]
   \   0000002A   0x4780             BLX      R0
    766              //清除中断标志位
    767              DMA0->INT |= 0x1u<<21;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
    768            }
    769            else
    770            {}
    771            
    772          #if (UCOS_II > 0u)
    773            OSIntExit();          //告知系统此时即将离开中断服务子函数
    774          #endif
    775          }
   \                     ??DMA5_IRQHandler_1: (+1)
   \                     ??DMA5_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    776          //DMA6 DMA22共用此Handler

   \                                 In section .text, align 2, keep-with-next
    777          void DMA6_IRQHandler(void)
    778          {
   \                     _Z15DMA6_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    779          #if (UCOS_II > 0u)
    780            OS_CPU_SR  cpu_sr = 0u;
    781            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    782            OSIntEnter();
    783            OS_EXIT_CRITICAL();
    784          #endif  
    785            
    786            if( DMA0->INT & 0x1u<<6)
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0640             LSLS     R0,R0,#+25
   \   00000008   0xD509             BPL.N    ??DMA6_IRQHandler_0
    787            {
    788              //调用用户自定义中断服务
    789              DMA_ISR[6]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x6980             LDR      R0,[R0, #+24]
   \   0000000E   0x4780             BLX      R0
    790              //清除中断标志位
    791              DMA0->INT |= 0x1u<<6;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA6_IRQHandler_1
    792            }
    793            else if(DMA0->INT & 0x1u<<22)
   \                     ??DMA6_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0240             LSLS     R0,R0,#+9
   \   00000024   0xD508             BPL.N    ??DMA6_IRQHandler_1
    794            {
    795              //调用用户自定义中断服务
    796              DMA_ISR[22]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6D80             LDR      R0,[R0, #+88]
   \   0000002A   0x4780             BLX      R0
    797              //清除中断标志位
    798              DMA0->INT |= 0x1u<<22;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
    799            }
    800            else
    801            {}
    802            
    803          #if (UCOS_II > 0u)
    804            OSIntExit();          //告知系统此时即将离开中断服务子函数
    805          #endif
    806          }
   \                     ??DMA6_IRQHandler_1: (+1)
   \                     ??DMA6_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    807          //DMA7 DMA23共用此Handler

   \                                 In section .text, align 2, keep-with-next
    808          void DMA7_IRQHandler(void)
    809          {
   \                     _Z15DMA7_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    810          #if (UCOS_II > 0u)
    811            OS_CPU_SR  cpu_sr = 0u;
    812            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    813            OSIntEnter();
    814            OS_EXIT_CRITICAL();
    815          #endif  
    816            
    817            if( DMA0->INT & 0x1u<<7 )
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0600             LSLS     R0,R0,#+24
   \   00000008   0xD509             BPL.N    ??DMA7_IRQHandler_0
    818            {
    819              //调用用户自定义中断服务
    820              DMA_ISR[7]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x69C0             LDR      R0,[R0, #+28]
   \   0000000E   0x4780             BLX      R0
    821              //清除中断标志位
    822              DMA0->INT |= 0x1u<<7;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA7_IRQHandler_1
    823            }
    824            else if( DMA0->INT & 0x1u<<23 )
   \                     ??DMA7_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0200             LSLS     R0,R0,#+8
   \   00000024   0xD508             BPL.N    ??DMA7_IRQHandler_1
    825            {
    826              //调用用户自定义中断服务
    827              DMA_ISR[23]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6DC0             LDR      R0,[R0, #+92]
   \   0000002A   0x4780             BLX      R0
    828              //清除中断标志位
    829              DMA0->INT |= 0x1u<<23;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF450 0x0000      ORRS     R0,R0,#0x800000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
    830            }
    831            else
    832            {}
    833            
    834          #if (UCOS_II > 0u)
    835            OSIntExit();          //告知系统此时即将离开中断服务子函数
    836          #endif
    837          }
   \                     ??DMA7_IRQHandler_1: (+1)
   \                     ??DMA7_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    838          //DMA8 DMA24共用此Handler

   \                                 In section .text, align 2, keep-with-next
    839          void DMA8_IRQHandler(void)
    840          {
   \                     _Z15DMA8_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    841          #if (UCOS_II > 0u)
    842            OS_CPU_SR  cpu_sr = 0u;
    843            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    844            OSIntEnter();
    845            OS_EXIT_CRITICAL();
    846          #endif  
    847            
    848            if( DMA0->INT & 0x1u<<8 )
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD509             BPL.N    ??DMA8_IRQHandler_0
    849            {
    850              //调用用户自定义中断服务
    851              DMA_ISR[8]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x6A00             LDR      R0,[R0, #+32]
   \   0000000E   0x4780             BLX      R0
    852              //清除中断标志位
    853              DMA0->INT |= 0x1u<<8;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA8_IRQHandler_1
    854            }
    855            else if( DMA0->INT & 0x1u<<24 )
   \                     ??DMA8_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x01C0             LSLS     R0,R0,#+7
   \   00000024   0xD508             BPL.N    ??DMA8_IRQHandler_1
    856            {
    857              //调用用户自定义中断服务
    858              DMA_ISR[24]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6E00             LDR      R0,[R0, #+96]
   \   0000002A   0x4780             BLX      R0
    859              //清除中断标志位
    860              DMA0->INT |= 0x1u<<24;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
    861            }
    862            else
    863            {}
    864            
    865          #if (UCOS_II > 0u)
    866            OSIntExit();          //告知系统此时即将离开中断服务子函数
    867          #endif
    868          }
   \                     ??DMA8_IRQHandler_1: (+1)
   \                     ??DMA8_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    869          //DMA9 DMA25共用此Handler

   \                                 In section .text, align 2, keep-with-next
    870          void DMA9_IRQHandler(void)
    871          {
   \                     _Z15DMA9_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    872          #if (UCOS_II > 0u)
    873            OS_CPU_SR  cpu_sr = 0u;
    874            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    875            OSIntEnter();
    876            OS_EXIT_CRITICAL();
    877          #endif  
    878            
    879            if( DMA0->INT & 0x1u<<9 )
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0580             LSLS     R0,R0,#+22
   \   00000008   0xD509             BPL.N    ??DMA9_IRQHandler_0
    880            {
    881              //调用用户自定义中断服务
    882              DMA_ISR[9]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x6A40             LDR      R0,[R0, #+36]
   \   0000000E   0x4780             BLX      R0
    883              //清除中断标志位
    884              DMA0->INT |= 0x1u<<9;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA9_IRQHandler_1
    885            }
    886            else if( DMA0->INT & 0x1u<<25 )
   \                     ??DMA9_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0180             LSLS     R0,R0,#+6
   \   00000024   0xD508             BPL.N    ??DMA9_IRQHandler_1
    887            {
    888              //调用用户自定义中断服务
    889              DMA_ISR[25]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6E40             LDR      R0,[R0, #+100]
   \   0000002A   0x4780             BLX      R0
    890              //清除中断标志位
    891              DMA0->INT |= 0x1u<<25;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
    892            }
    893            else
    894            {}
    895            
    896          #if (UCOS_II > 0u)
    897            OSIntExit();          //告知系统此时即将离开中断服务子函数
    898          #endif
    899          }
   \                     ??DMA9_IRQHandler_1: (+1)
   \                     ??DMA9_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    900          //DMA10 DMA26共用此Handler

   \                                 In section .text, align 2, keep-with-next
    901          void DMA10_IRQHandler(void)
    902          {
   \                     _Z16DMA10_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    903          #if (UCOS_II > 0u)
    904            OS_CPU_SR  cpu_sr = 0u;
    905            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    906            OSIntEnter();
    907            OS_EXIT_CRITICAL();
    908          #endif  
    909            
    910            if( DMA0->INT & 0x1u<<10 )
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0540             LSLS     R0,R0,#+21
   \   00000008   0xD509             BPL.N    ??DMA10_IRQHandler_0
    911            {
    912              //调用用户自定义中断服务
    913              DMA_ISR[10]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x6A80             LDR      R0,[R0, #+40]
   \   0000000E   0x4780             BLX      R0
    914              //清除中断标志位
    915              DMA0->INT |= 0x1u<<10;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA10_IRQHandler_1
    916            }
    917            else if( DMA0->INT & 0x1u<<26 )
   \                     ??DMA10_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0140             LSLS     R0,R0,#+5
   \   00000024   0xD508             BPL.N    ??DMA10_IRQHandler_1
    918            {
    919              //调用用户自定义中断服务
    920              DMA_ISR[26]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6E80             LDR      R0,[R0, #+104]
   \   0000002A   0x4780             BLX      R0
    921              //清除中断标志位
    922              DMA0->INT |= 0x1u<<26;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x6080      ORRS     R0,R0,#0x4000000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
    923            }
    924            else
    925            {}
    926            
    927          #if (UCOS_II > 0u)
    928            OSIntExit();          //告知系统此时即将离开中断服务子函数
    929          #endif
    930          }
   \                     ??DMA10_IRQHandler_1: (+1)
   \                     ??DMA10_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    931          //DMA11 DMA27共用此Handler

   \                                 In section .text, align 2, keep-with-next
    932          void DMA11_IRQHandler(void)
    933          {
   \                     _Z16DMA11_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    934          #if (UCOS_II > 0u)
    935            OS_CPU_SR  cpu_sr = 0u;
    936            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    937            OSIntEnter();
    938            OS_EXIT_CRITICAL();
    939          #endif  
    940            
    941            if( DMA0->INT & 0x1u<<11 )
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0500             LSLS     R0,R0,#+20
   \   00000008   0xD509             BPL.N    ??DMA11_IRQHandler_0
    942            {
    943              //调用用户自定义中断服务
    944              DMA_ISR[11]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x6AC0             LDR      R0,[R0, #+44]
   \   0000000E   0x4780             BLX      R0
    945              //清除中断标志位
    946              DMA0->INT |= 0x1u<<11;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA11_IRQHandler_1
    947            }
    948            else if( DMA0->INT & 0x1u<<27 )
   \                     ??DMA11_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0100             LSLS     R0,R0,#+4
   \   00000024   0xD508             BPL.N    ??DMA11_IRQHandler_1
    949            {
    950              //调用用户自定义中断服务
    951              DMA_ISR[27]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6EC0             LDR      R0,[R0, #+108]
   \   0000002A   0x4780             BLX      R0
    952              //清除中断标志位
    953              DMA0->INT |= 0x1u<<27;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
    954            }
    955            else
    956            {}  
    957          #if (UCOS_II > 0u)
    958            OSIntExit();          //告知系统此时即将离开中断服务子函数
    959          #endif
    960          }
   \                     ??DMA11_IRQHandler_1: (+1)
   \                     ??DMA11_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    961          //DMA12 DMA28共用此Handler

   \                                 In section .text, align 2, keep-with-next
    962          void DMA12_IRQHandler(void)
    963          {
   \                     _Z16DMA12_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    964          #if (UCOS_II > 0u)
    965            OS_CPU_SR  cpu_sr = 0u;
    966            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    967            OSIntEnter();
    968            OS_EXIT_CRITICAL();
    969          #endif  
    970            
    971            if( DMA0->INT & 0x1u<<12 )
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x04C0             LSLS     R0,R0,#+19
   \   00000008   0xD509             BPL.N    ??DMA12_IRQHandler_0
    972            {
    973              //调用用户自定义中断服务
    974              DMA_ISR[12]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x6B00             LDR      R0,[R0, #+48]
   \   0000000E   0x4780             BLX      R0
    975              //清除中断标志位
    976              DMA0->INT |= 0x1u<<12;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA12_IRQHandler_1
    977            }
    978            else if( DMA0->INT & 0x1u<<28 )
   \                     ??DMA12_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD508             BPL.N    ??DMA12_IRQHandler_1
    979            {
    980              //调用用户自定义中断服务
    981              DMA_ISR[28]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6F00             LDR      R0,[R0, #+112]
   \   0000002A   0x4780             BLX      R0
    982              //清除中断标志位
    983              DMA0->INT |= 0x1u<<28;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
    984            }
    985            else
    986            {}  
    987            
    988          #if (UCOS_II > 0u)
    989            OSIntExit();          //告知系统此时即将离开中断服务子函数
    990          #endif
    991          }
   \                     ??DMA12_IRQHandler_1: (+1)
   \                     ??DMA12_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    992          //DMA13 DMA29共用此Handler

   \                                 In section .text, align 2, keep-with-next
    993          void DMA13_IRQHandler(void)
    994          {
   \                     _Z16DMA13_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    995          #if (UCOS_II > 0u)
    996            OS_CPU_SR  cpu_sr = 0u;
    997            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    998            OSIntEnter();
    999            OS_EXIT_CRITICAL();
   1000          #endif  
   1001            
   1002            if( DMA0->INT & 0x1u<<13 )
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0480             LSLS     R0,R0,#+18
   \   00000008   0xD509             BPL.N    ??DMA13_IRQHandler_0
   1003            {
   1004              //调用用户自定义中断服务
   1005              DMA_ISR[13]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x6B40             LDR      R0,[R0, #+52]
   \   0000000E   0x4780             BLX      R0
   1006              //清除中断标志位
   1007              DMA0->INT |= 0x1u<<13;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA13_IRQHandler_1
   1008            }
   1009            else if( DMA0->INT & 0x1u<<29 )
   \                     ??DMA13_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0080             LSLS     R0,R0,#+2
   \   00000024   0xD508             BPL.N    ??DMA13_IRQHandler_1
   1010            {
   1011              //调用用户自定义中断服务
   1012              DMA_ISR[29]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6F40             LDR      R0,[R0, #+116]
   \   0000002A   0x4780             BLX      R0
   1013              //清除中断标志位
   1014              DMA0->INT |= 0x1u<<29;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5000      ORRS     R0,R0,#0x20000000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
   1015            }
   1016            else
   1017            {}   
   1018            
   1019          #if (UCOS_II > 0u)
   1020            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1021          #endif
   1022          }
   \                     ??DMA13_IRQHandler_1: (+1)
   \                     ??DMA13_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
   1023          //DMA14 DMA30共用此Handler

   \                                 In section .text, align 2, keep-with-next
   1024          void DMA14_IRQHandler(void)
   1025          {
   \                     _Z16DMA14_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1026          #if (UCOS_II > 0u)
   1027            OS_CPU_SR  cpu_sr = 0u;
   1028            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1029            OSIntEnter();
   1030            OS_EXIT_CRITICAL();
   1031          #endif  
   1032            
   1033            if( DMA0->INT & 0x1u<<14 )
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0440             LSLS     R0,R0,#+17
   \   00000008   0xD509             BPL.N    ??DMA14_IRQHandler_0
   1034            {
   1035              //调用用户自定义中断服务
   1036              DMA_ISR[14]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x6B80             LDR      R0,[R0, #+56]
   \   0000000E   0x4780             BLX      R0
   1037              //清除中断标志位
   1038              DMA0->INT |= 0x1u<<14;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA14_IRQHandler_1
   1039            }
   1040            else if( DMA0->INT & 0x1u<<30 )
   \                     ??DMA14_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0040             LSLS     R0,R0,#+1
   \   00000024   0xD508             BPL.N    ??DMA14_IRQHandler_1
   1041            {
   1042              //调用用户自定义中断服务
   1043              DMA_ISR[30]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6F80             LDR      R0,[R0, #+120]
   \   0000002A   0x4780             BLX      R0
   1044              //清除中断标志位
   1045              DMA0->INT |= 0x1u<<30;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x4080      ORRS     R0,R0,#0x40000000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
   1046            }
   1047            else
   1048            {}   
   1049            
   1050          #if (UCOS_II > 0u)
   1051            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1052          #endif
   1053          }
   \                     ??DMA14_IRQHandler_1: (+1)
   \                     ??DMA14_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
   1054          
   1055          //DMA15 DMA31共用此Handler

   \                                 In section .text, align 2, keep-with-next
   1056          void DMA15_IRQHandler(void)
   1057          {
   \                     _Z16DMA15_IRQHandlerv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1058          #if (UCOS_II > 0u)
   1059            OS_CPU_SR  cpu_sr = 0u;
   1060            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1061            OSIntEnter();
   1062            OS_EXIT_CRITICAL();
   1063          #endif  
   1064            
   1065            if( DMA0->INT & 0x1u<<15 )
   \   00000002   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0400             LSLS     R0,R0,#+16
   \   00000008   0xD509             BPL.N    ??DMA15_IRQHandler_0
   1066            {
   1067              //调用用户自定义中断服务
   1068              DMA_ISR[15]();
   \   0000000A   0x....             LDR.N    R0,??DataTable19_9
   \   0000000C   0x6BC0             LDR      R0,[R0, #+60]
   \   0000000E   0x4780             BLX      R0
   1069              //清除中断标志位
   1070              DMA0->INT |= 0x1u<<15;
   \   00000010   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000018   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE00C             B.N      ??DMA15_IRQHandler_1
   1071            }
   1072            else if( DMA0->INT & 0x1u<<31 )
   \                     ??DMA15_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD508             BPL.N    ??DMA15_IRQHandler_1
   1073            {
   1074              //调用用户自定义中断服务
   1075              DMA_ISR[31]();
   \   00000026   0x....             LDR.N    R0,??DataTable19_9
   \   00000028   0x6FC0             LDR      R0,[R0, #+124]
   \   0000002A   0x4780             BLX      R0
   1076              //清除中断标志位
   1077              DMA0->INT |= 0x1u<<31;
   \   0000002C   0x....             LDR.N    R0,??DataTable19_10  ;; 0x40008024
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000034   0x....             LDR.N    R1,??DataTable19_10  ;; 0x40008024
   \   00000036   0x6008             STR      R0,[R1, #+0]
   1078            }
   1079            else
   1080            {}
   1081            
   1082          #if (UCOS_II > 0u)
   1083            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1084          #endif
   1085          }
   \                     ??DMA15_IRQHandler_1: (+1)
   \                     ??DMA15_IRQHandler_2: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_7:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_8:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_9:
   \   00000000   0x........         DC32     DMA_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_10:
   \   00000000   0x40008024         DC32     0x40008024

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x78          DC8 5CH, 78H, 73H, 6BH, 31H, 39H, 39H, 34H
   \              0x73 0x6B    
   \              0x31 0x39    
   \              0x39 0x34    
   \   00000010   0x30 0x39          DC8 30H, 39H, 31H, 30H, 5CH, 44H, 65H, 73H
   \              0x31 0x30    
   \              0x5C 0x44    
   \              0x65 0x73    
   \   00000018   0x6B 0x74          DC8 6BH, 74H, 6FH, 70H, 5CH, 66H, 6CH, 69H
   \              0x6F 0x70    
   \              0x5C 0x66    
   \              0x6C 0x69    
   \   00000020   0x67 0x68          DC8 67H, 68H, 74H, 43H, 6FH, 6EH, 74H, 72H
   \              0x74 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \   00000028   0x6F 0x6C          DC8 6FH, 6CH, 6CH, 65H, 72H, 2DH, 31H, 5CH
   \              0x6C 0x65    
   \              0x72 0x2D    
   \              0x31 0x5C    
   \   00000030   0x66 0x6C          DC8 66H, 6CH, 69H, 67H, 68H, 74H, 43H, 6FH
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x43 0x6F    
   \   00000038   0x6E 0x74          DC8 6EH, 74H, 72H, 6FH, 6CH, 6CH, 65H, 72H
   \              0x72 0x6F    
   \              0x6C 0x6C    
   \              0x65 0x72    
   \   00000040   0x2D 0x31          DC8 2DH, 31H, 5CH, 70H, 72H, 6FH, 67H, 72H
   \              0x5C 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \   00000048   0x61 0x6D          DC8 61H, 6DH, 5CH, 6CH, 69H, 62H, 5CH, 4CH
   \              0x5C 0x6C    
   \              0x69 0x62    
   \              0x5C 0x4C    
   \   00000050   0x50 0x4C          DC8 50H, 4CH, 44H, 5CH, 48H, 57H, 5CH, 44H
   \              0x44 0x5C    
   \              0x48 0x57    
   \              0x5C 0x44    
   \   00000058   0x4D 0x41          DC8 4DH, 41H, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \   0000005D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1086          #endif
   1087          
   1088          
   1089          
   1090          
   1091          
   1092          
   1093          
   1094          
   1095          
   1096          
   1097          
   1098          
   1099          
   1100          
   1101          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DMA0_IRQHandler()
         8   -- Indirect call
       8   DMA10_IRQHandler()
         8   -- Indirect call
       8   DMA11_IRQHandler()
         8   -- Indirect call
       8   DMA12_IRQHandler()
         8   -- Indirect call
       8   DMA13_IRQHandler()
         8   -- Indirect call
       8   DMA14_IRQHandler()
         8   -- Indirect call
       8   DMA15_IRQHandler()
         8   -- Indirect call
       8   DMA1_IRQHandler()
         8   -- Indirect call
       8   DMA2_IRQHandler()
         8   -- Indirect call
       8   DMA3_IRQHandler()
         8   -- Indirect call
       8   DMA4_IRQHandler()
         8   -- Indirect call
       8   DMA5_IRQHandler()
         8   -- Indirect call
       8   DMA6_IRQHandler()
         8   -- Indirect call
       8   DMA7_IRQHandler()
         8   -- Indirect call
       8   DMA8_IRQHandler()
         8   -- Indirect call
       8   DMA9_IRQHandler()
         8   -- Indirect call
      24   DMA_DisableIrq
        24   -> __NVIC_DisableIRQ(IRQn)
      24   DMA_EnableIrq
        24   -> __NVIC_EnableIRQ(IRQn)
      72   DMA_Init
        72   -> assert_failed
       4   DMA_changeLength
       0   __NVIC_DisableIRQ(IRQn)
       0   __NVIC_EnableIRQ(IRQn)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_2
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
      96  ?_0
      74  DMA0_IRQHandler()
      58  DMA10_IRQHandler()
      58  DMA11_IRQHandler()
      58  DMA12_IRQHandler()
      58  DMA13_IRQHandler()
      58  DMA14_IRQHandler()
      58  DMA15_IRQHandler()
      74  DMA1_IRQHandler()
      74  DMA2_IRQHandler()
      74  DMA3_IRQHandler()
      66  DMA4_IRQHandler()
      58  DMA5_IRQHandler()
      58  DMA6_IRQHandler()
      58  DMA7_IRQHandler()
      58  DMA8_IRQHandler()
      58  DMA9_IRQHandler()
      44  DMA_DisableIrq
      44  DMA_EnableIrq
     128  DMA_ISR
     882  DMA_Init
      60  DMA_changeLength
      30  __NVIC_DisableIRQ(IRQn)
      30  __NVIC_EnableIRQ(IRQn)
     136  -- Other

 
   136 bytes in section .ARM.exidx
   128 bytes in section .bss
    96 bytes in section .rodata
 2 134 bytes in section .text
 
 2 134 bytes of CODE  memory
   232 bytes of CONST memory
   128 bytes of DATA  memory

Errors: none
Warnings: none
