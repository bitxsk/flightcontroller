###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       16/May/2018  07:32:55
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FLASH.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EWEAFD.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FLASH.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\List\FLASH.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\RAM\Obj\FLASH.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FLASH.c
      1          /**
      2           * @file HW_FLASH.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FTFL底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"
     23          #include "FLASH.h"
     24          
     25          /*
     26           * Flash_Init
     27           * Flash模块初始化
     28           * 
     29           * 参数:
     30           *    无
     31           *
     32           * 输出:
     33           *    无
     34           */

   \                                 In section .text, align 2, keep-with-next
     35          void Flash_Init(void)
     36          {
     37          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
     38            //检查Flash访问错误
     39            if (FTFL->FSTAT & FTFL_FSTAT_ACCERR_MASK)
     40            {
     41              FTFL->FSTAT |= FTFL_FSTAT_ACCERR_MASK;       //清除错误标志
     42            }
     43            //检查保护错误
     44            else if (FTFL->FSTAT & FTFL_FSTAT_FPVIOL_MASK)
     45            {
     46              FTFL->FSTAT |= FTFL_FSTAT_FPVIOL_MASK;
     47            }
     48            //检查读冲突错误
     49            else if (FTFL->FSTAT & FTFL_FSTAT_RDCOLERR_MASK)
     50            {
     51              FTFL->FSTAT |= FTFL_FSTAT_RDCOLERR_MASK;
     52            }
     53            
     54            //禁用Flash模块的数据缓存
     55            FMC->PFB0CR &= ~FMC_PFB0CR_B0DCE_MASK;
     56            FMC->PFB1CR &= ~FMC_PFB1CR_B1DCE_MASK;
     57          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)  
     58            //检查Flash访问错误
     59            if (FTFE->FSTAT & FTFE_FSTAT_ACCERR_MASK)
   \                     Flash_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x0680             LSLS     R0,R0,#+26
   \   00000006   0xD506             BPL.N    ??Flash_Init_0
     60            {
     61              FTFE->FSTAT |= FTFE_FSTAT_ACCERR_MASK;//清除错误标志
   \   00000008   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000010   0x....             LDR.N    R1,??DataTable2  ;; 0x40020000
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   \   00000014   0xE014             B.N      ??Flash_Init_1
     62            }
     63            //检查保护错误
     64            else if (FTFE->FSTAT & FTFE_FSTAT_FPVIOL_MASK)
   \                     ??Flash_Init_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x06C0             LSLS     R0,R0,#+27
   \   0000001C   0xD506             BPL.N    ??Flash_Init_2
     65            {
     66              FTFE->FSTAT |= FTFE_FSTAT_FPVIOL_MASK;
   \   0000001E   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000026   0x....             LDR.N    R1,??DataTable2  ;; 0x40020000
   \   00000028   0x7008             STRB     R0,[R1, #+0]
   \   0000002A   0xE009             B.N      ??Flash_Init_1
     67            }
     68            else if (FTFE->FSTAT & FTFE_FSTAT_RDCOLERR_MASK)
   \                     ??Flash_Init_2: (+1)
   \   0000002C   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x0640             LSLS     R0,R0,#+25
   \   00000032   0xD505             BPL.N    ??Flash_Init_1
     69            {
     70            //检查读冲突错误
     71              FTFE->FSTAT |= FTFE_FSTAT_RDCOLERR_MASK;
   \   00000034   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000003C   0x....             LDR.N    R1,??DataTable2  ;; 0x40020000
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
     72            } /* EndIf */
     73            //禁用Flash模块的数据缓存
     74            FMC->PFB01CR &= ~FMC_PFB01CR_B01DCE_MASK;
   \                     ??Flash_Init_1: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable2_1  ;; 0x4001f004
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF030 0x0010      BICS     R0,R0,#0x10
   \   00000048   0x....             LDR.N    R1,??DataTable2_1  ;; 0x4001f004
   \   0000004A   0x6008             STR      R0,[R1, #+0]
     75            FMC->PFB23CR &= ~FMC_PFB23CR_B23DCE_MASK;
   \   0000004C   0x....             LDR.N    R0,??DataTable2_2  ;; 0x4001f008
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF030 0x0010      BICS     R0,R0,#0x10
   \   00000054   0x....             LDR.N    R1,??DataTable2_2  ;; 0x4001f008
   \   00000056   0x6008             STR      R0,[R1, #+0]
     76          #endif
     77          } 
   \   00000058   0x4770             BX       LR               ;; return
     78          
     79          
     80          /*
     81           * Flash_SectorErase
     82           * 擦除Flash扇区
     83           * 
     84           * 参数:
     85           *    FlashPtr--扇区地址指针，即扇区号乘以2048
     86           *
     87           * 输出:
     88           *    错误代码
     89           */

   \                                 In section .text, align 2, keep-with-next
     90          uint8 Flash_SectorErase(uint32 FlashPtr)
     91          {
   \                     Flash_SectorErase: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     92            uint8 Return = FLASH_OK;
   \   00000002   0x2000             MOVS     R0,#+0
     93          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10)   
     94            //等待CCIF置1
     95            while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)){};
     96            //写入命令道FCCOB寄存器
     97            FTFL->FCCOB0 = FLASH_CMD_ERSSCR;
     98            FTFL->FCCOB1 = (uint8) (FlashPtr >> 16);
     99            FTFL->FCCOB2 = (uint8)((FlashPtr >> 8 ) & 0xFF);
    100            FTFL->FCCOB3 = (uint8)( FlashPtr & 0xFF);
    101            
    102            //执行命令
    103            FTFL->FSTAT |= FTFL_FSTAT_CCIF_MASK;    
    104            //等待命令完成
    105            while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)) {};
    106            
    107            //检查Flash访问错误
    108            if (FTFL->FSTAT & FTFL_FSTAT_ACCERR_MASK)
    109            {
    110              FTFL->FSTAT |= FTFL_FSTAT_ACCERR_MASK;       //清除错误标志
    111              Return |= FLASH_FACCERR;                    //更新返回值
    112            }
    113            //检查Flash保护标志
    114            else if (FTFL->FSTAT & FTFL_FSTAT_FPVIOL_MASK)
    115            {
    116              FTFL->FSTAT |= FTFL_FSTAT_FPVIOL_MASK;
    117              Return |= FLASH_FPVIOL;
    118            }
    119            //检查Flash读冲突错误
    120            else if (FTFL->FSTAT & FTFL_FSTAT_RDCOLERR_MASK)
    121            {
    122              FTFL->FSTAT |= FTFL_FSTAT_RDCOLERR_MASK;
    123              Return |= FLASH_RDCOLERR;
    124            }
    125            //检查MGSTAT0非可纠正错误
    126            else if (FTFL->FSTAT & FTFL_FSTAT_MGSTAT0_MASK)
    127            {
    128              Return |= FLASH_MGSTAT0;
    129            } 
    130          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    131            //等待CCIF置1
    132            while (!(FTFE->FSTAT & FTFE_FSTAT_CCIF_MASK)){};
   \                     ??Flash_SectorErase_0: (+1)
   \   00000004   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \   00000006   0x7812             LDRB     R2,[R2, #+0]
   \   00000008   0x0612             LSLS     R2,R2,#+24
   \   0000000A   0xD5FB             BPL.N    ??Flash_SectorErase_0
    133            //写入命令道FCCOB寄存器
    134            FTFE->FCCOB0 = FlashCmd_SectorErase;
   \   0000000C   0x2209             MOVS     R2,#+9
   \   0000000E   0x....             LDR.N    R3,??DataTable2_3  ;; 0x40020007
   \   00000010   0x701A             STRB     R2,[R3, #+0]
    135            FTFE->FCCOB1 = (uint8_t) (FlashPtr >> 16);
   \   00000012   0x000A             MOVS     R2,R1
   \   00000014   0x0C12             LSRS     R2,R2,#+16
   \   00000016   0x....             LDR.N    R3,??DataTable2_4  ;; 0x40020006
   \   00000018   0x701A             STRB     R2,[R3, #+0]
    136            FTFE->FCCOB2 = (uint8_t)((FlashPtr >> 8 ) & 0xFF);
   \   0000001A   0x000A             MOVS     R2,R1
   \   0000001C   0x0A12             LSRS     R2,R2,#+8
   \   0000001E   0x....             LDR.N    R3,??DataTable2_5  ;; 0x40020005
   \   00000020   0x701A             STRB     R2,[R3, #+0]
    137            FTFE->FCCOB3 = (uint8_t)( FlashPtr & 0xFF);
   \   00000022   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40020004
   \   00000024   0x7011             STRB     R1,[R2, #+0]
    138          
    139            //执行命令
    140            FTFE->FSTAT |= FTFE_FSTAT_CCIF_MASK;    
   \   00000026   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \   00000028   0x7812             LDRB     R2,[R2, #+0]
   \   0000002A   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   0000002E   0x....             LDR.N    R3,??DataTable2  ;; 0x40020000
   \   00000030   0x701A             STRB     R2,[R3, #+0]
    141            //等待命令完成
    142            while (!(FTFE->FSTAT & FTFE_FSTAT_CCIF_MASK)) {};
   \                     ??Flash_SectorErase_1: (+1)
   \   00000032   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \   00000034   0x7812             LDRB     R2,[R2, #+0]
   \   00000036   0x0612             LSLS     R2,R2,#+24
   \   00000038   0xD5FB             BPL.N    ??Flash_SectorErase_1
    143            //检查Flash访问错误
    144            if (FTFE->FSTAT & FTFE_FSTAT_ACCERR_MASK)
   \   0000003A   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \   0000003C   0x7812             LDRB     R2,[R2, #+0]
   \   0000003E   0x0692             LSLS     R2,R2,#+26
   \   00000040   0xD508             BPL.N    ??Flash_SectorErase_2
    145            {
    146              FTFE->FSTAT |= FTFE_FSTAT_ACCERR_MASK; //清除错误标志
   \   00000042   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \   00000044   0x7812             LDRB     R2,[R2, #+0]
   \   00000046   0xF052 0x0220      ORRS     R2,R2,#0x20
   \   0000004A   0x....             LDR.N    R3,??DataTable2  ;; 0x40020000
   \   0000004C   0x701A             STRB     R2,[R3, #+0]
    147              Return |= FLASH_FACCERR;              //更新返回值
   \   0000004E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000052   0xE01F             B.N      ??Flash_SectorErase_3
    148            }
    149            //检查Flash保护标志
    150            else if (FTFE->FSTAT & FTFE_FSTAT_FPVIOL_MASK)
   \                     ??Flash_SectorErase_2: (+1)
   \   00000054   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \   00000056   0x7812             LDRB     R2,[R2, #+0]
   \   00000058   0x06D2             LSLS     R2,R2,#+27
   \   0000005A   0xD508             BPL.N    ??Flash_SectorErase_4
    151            {
    152              FTFE->FSTAT |= FTFE_FSTAT_FPVIOL_MASK;
   \   0000005C   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \   0000005E   0x7812             LDRB     R2,[R2, #+0]
   \   00000060   0xF052 0x0210      ORRS     R2,R2,#0x10
   \   00000064   0x....             LDR.N    R3,??DataTable2  ;; 0x40020000
   \   00000066   0x701A             STRB     R2,[R3, #+0]
    153              Return |= FLASH_FPVIOL;
   \   00000068   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000006C   0xE012             B.N      ??Flash_SectorErase_3
    154            }
    155            else if (FTFE->FSTAT & FTFE_FSTAT_RDCOLERR_MASK)
   \                     ??Flash_SectorErase_4: (+1)
   \   0000006E   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \   00000070   0x7812             LDRB     R2,[R2, #+0]
   \   00000072   0x0652             LSLS     R2,R2,#+25
   \   00000074   0xD508             BPL.N    ??Flash_SectorErase_5
    156            {
    157              FTFE->FSTAT |= FTFE_FSTAT_RDCOLERR_MASK;
   \   00000076   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \   00000078   0x7812             LDRB     R2,[R2, #+0]
   \   0000007A   0xF052 0x0240      ORRS     R2,R2,#0x40
   \   0000007E   0x....             LDR.N    R3,??DataTable2  ;; 0x40020000
   \   00000080   0x701A             STRB     R2,[R3, #+0]
    158              Return |= FLASH_RDCOLERR;
   \   00000082   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000086   0xE005             B.N      ??Flash_SectorErase_3
    159            }
    160            //检查Flash读冲突错误
    161            else if (FTFE->FSTAT & FTFE_FSTAT_MGSTAT0_MASK)
   \                     ??Flash_SectorErase_5: (+1)
   \   00000088   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \   0000008A   0x7812             LDRB     R2,[R2, #+0]
   \   0000008C   0x07D2             LSLS     R2,R2,#+31
   \   0000008E   0xD501             BPL.N    ??Flash_SectorErase_3
    162            {
    163              Return |= FLASH_MGSTAT0;
   \   00000090   0xF050 0x0004      ORRS     R0,R0,#0x4
    164            } 
    165          #endif
    166            return  Return;
   \                     ??Flash_SectorErase_3: (+1)
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x4770             BX       LR               ;; return
    167          }
    168          
    169          /*
    170           * Flash_ByteProgram
    171           * 编程Flash
    172           * 
    173           * 参数:
    174           *    FlashStartAdd--Flash编程起始地址
    175           *    *DataSrcPtr--数据源指针
    176           *    NumberOfBytes--数据字节长度
    177           *
    178           * 输出:
    179           *    错误代码
    180           */

   \                                 In section .text, align 2, keep-with-next
    181          uint8 Flash_ByteProgram(uint32 FlashStartAdd, uint32 *DataSrcPtr, uint32 NumberOfBytes)
    182          {
   \                     Flash_ByteProgram: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    183            uint8 Return = FLASH_OK;
   \   00000006   0x2100             MOVS     R1,#+0
    184            
    185            uint32 size_buffer;
    186            
    187            if (NumberOfBytes == 0)
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD101             BNE.N    ??Flash_ByteProgram_0
    188            {
    189              return FLASH_CONTENTERR;
   \   0000000C   0x2011             MOVS     R0,#+17
   \   0000000E   0xE06D             B.N      ??Flash_ByteProgram_1
    190            }
    191            else
    192            {
    193              size_buffer = (NumberOfBytes - 1)/BYTE_DIV + 1;
   \                     ??Flash_ByteProgram_0: (+1)
   \   00000010   0x1E53             SUBS     R3,R2,#+1
   \   00000012   0x08DB             LSRS     R3,R3,#+3
   \   00000014   0x1C5B             ADDS     R3,R3,#+1
    194            }
    195          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10)
    196            //等待直到CCIF设置
    197            while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)){};
    198          
    199            while ((size_buffer) && (Return == FLASH_OK))
    200            {
    201              //写FLASH命令到FCCOB
    202              FTFL->FCCOB0 = FLASH_CMD_PGM4;
    203              FTFL->FCCOB1 = (uint8)(FlashStartAdd >> 16);
    204              FTFL->FCCOB2 = (uint8)((FlashStartAdd >> 8) & 0xFF);
    205              FTFL->FCCOB3 = (uint8)(FlashStartAdd & 0xFF);
    206              //如果K60设置成为小端格式，进行如下操作
    207              FTFL->FCCOB4 = (uint8)(*((uint8*)DataSrcPtr+3));
    208              FTFL->FCCOB5 = (uint8)(*((uint8*)DataSrcPtr+2));
    209              FTFL->FCCOB6 = (uint8)(*((uint8*)DataSrcPtr+1));
    210              FTFL->FCCOB7 = (uint8)(*((uint8*)DataSrcPtr+0));
    211              //如果K60设置成为大端格式，进行如下操作
    212              //FTFL_FCCOB4 = (uint8)(*((uint_8*)DataSrcPtr+0));
    213              //FTFL_FCCOB5 = (uint8)(*((uint_8*)DataSrcPtr+1));
    214              //FTFL_FCCOB6 = (uint8)(*((uint_8*)DataSrcPtr+2));
    215              //FTFL_FCCOB7 = (uint8)(*((uint_8*)DataSrcPtr+3));
    216              //设置FLASH加载命令
    217              FTFL->FSTAT |= FTFL_FSTAT_CCIF_MASK;    
    218              //等待命令完成
    219              while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)) {};
    220              
    221              //检测FLASH访问错误
    222              if (FTFL->FSTAT & FTFL_FSTAT_ACCERR_MASK)
    223              {
    224                  
    225                  FTFL->FSTAT |= FTFL_FSTAT_ACCERR_MASK;
    226              
    227                  Return |= FLASH_FACCERR;
    228              }
    229              //检测FLASH保护错误
    230              else if (FTFL->FSTAT & FTFL_FSTAT_FPVIOL_MASK)
    231              {
    232                  FTFL->FSTAT |= FTFL_FSTAT_FPVIOL_MASK;
    233              
    234                  Return |= FLASH_FPVIOL;
    235              }
    236              
    237              else if (FTFL->FSTAT & FTFL_FSTAT_RDCOLERR_MASK)
    238              {
    239                  FTFL->FSTAT |= FTFL_FSTAT_RDCOLERR_MASK;
    240              
    241                  Return |= FLASH_RDCOLERR;
    242              }
    243              else if (FTFL->FSTAT & FTFL_FSTAT_MGSTAT0_MASK)
    244              {
    245                  Return |= FLASH_MGSTAT0;
    246              } 
    247              size_buffer --;
    248              (uint32*)DataSrcPtr++;
    249              FlashStartAdd +=4;
    250            }
    251          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15) 
    252            //等待直到CCIF设置
    253            while (!(FTFE->FSTAT & FTFE_FSTAT_CCIF_MASK)){};
   \                     ??Flash_ByteProgram_2: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x0600             LSLS     R0,R0,#+24
   \   0000001C   0xD5FB             BPL.N    ??Flash_ByteProgram_2
    254          
    255            while ((size_buffer) && (Return == FLASH_OK))
   \                     ??Flash_ByteProgram_3: (+1)
   \   0000001E   0x2B00             CMP      R3,#+0
   \   00000020   0xD062             BEQ.N    ??Flash_ByteProgram_4
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD15F             BNE.N    ??Flash_ByteProgram_4
    256            {
    257              //写FLASH命令到FCCOB
    258              FTFE->FCCOB0 = FlashCmd_ProgramPhrase;
   \   00000028   0x2007             MOVS     R0,#+7
   \   0000002A   0x....             LDR.N    R6,??DataTable2_3  ;; 0x40020007
   \   0000002C   0x7030             STRB     R0,[R6, #+0]
    259              FTFE->FCCOB1 = (uint8_t)( FlashStartAdd >> 16);
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0x0C00             LSRS     R0,R0,#+16
   \   00000032   0x....             LDR.N    R6,??DataTable2_4  ;; 0x40020006
   \   00000034   0x7030             STRB     R0,[R6, #+0]
    260              FTFE->FCCOB2 = (uint8_t)((FlashStartAdd >>  8) & 0xFF);
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0x0A00             LSRS     R0,R0,#+8
   \   0000003A   0x....             LDR.N    R6,??DataTable2_5  ;; 0x40020005
   \   0000003C   0x7030             STRB     R0,[R6, #+0]
    261              FTFE->FCCOB3 = (uint8_t)( FlashStartAdd & 0xFF);
   \   0000003E   0x....             LDR.N    R0,??DataTable2_6  ;; 0x40020004
   \   00000040   0x7005             STRB     R5,[R0, #+0]
    262              //如果K60设置成为小端格式，进行如下操作
    263              FTFE->FCCOB4 = (uint8_t)(*((uint8_t*)DataSrcPtr+3));
   \   00000042   0x78E0             LDRB     R0,[R4, #+3]
   \   00000044   0x....             LDR.N    R6,??DataTable2_7  ;; 0x4002000b
   \   00000046   0x7030             STRB     R0,[R6, #+0]
    264              FTFE->FCCOB5 = (uint8_t)(*((uint8_t*)DataSrcPtr+2));
   \   00000048   0x78A0             LDRB     R0,[R4, #+2]
   \   0000004A   0x....             LDR.N    R6,??DataTable2_8  ;; 0x4002000a
   \   0000004C   0x7030             STRB     R0,[R6, #+0]
    265              FTFE->FCCOB6 = (uint8_t)(*((uint8_t*)DataSrcPtr+1));
   \   0000004E   0x7860             LDRB     R0,[R4, #+1]
   \   00000050   0x....             LDR.N    R6,??DataTable2_9  ;; 0x40020009
   \   00000052   0x7030             STRB     R0,[R6, #+0]
    266              FTFE->FCCOB7 = (uint8_t)(*((uint8_t*)DataSrcPtr+0));
   \   00000054   0x7820             LDRB     R0,[R4, #+0]
   \   00000056   0x....             LDR.N    R6,??DataTable2_10  ;; 0x40020008
   \   00000058   0x7030             STRB     R0,[R6, #+0]
    267              FTFE->FCCOB8 = (uint8_t)(*((uint8_t*)DataSrcPtr+7));
   \   0000005A   0x79E0             LDRB     R0,[R4, #+7]
   \   0000005C   0x....             LDR.N    R6,??DataTable2_11  ;; 0x4002000f
   \   0000005E   0x7030             STRB     R0,[R6, #+0]
    268              FTFE->FCCOB9 = (uint8_t)(*((uint8_t*)DataSrcPtr+6));
   \   00000060   0x79A0             LDRB     R0,[R4, #+6]
   \   00000062   0x....             LDR.N    R6,??DataTable2_12  ;; 0x4002000e
   \   00000064   0x7030             STRB     R0,[R6, #+0]
    269              FTFE->FCCOBA = (uint8_t)(*((uint8_t*)DataSrcPtr+5));
   \   00000066   0x7960             LDRB     R0,[R4, #+5]
   \   00000068   0x....             LDR.N    R6,??DataTable2_13  ;; 0x4002000d
   \   0000006A   0x7030             STRB     R0,[R6, #+0]
    270              FTFE->FCCOBB = (uint8_t)(*((uint8_t*)DataSrcPtr+4));
   \   0000006C   0x7920             LDRB     R0,[R4, #+4]
   \   0000006E   0x....             LDR.N    R6,??DataTable2_14  ;; 0x4002000c
   \   00000070   0x7030             STRB     R0,[R6, #+0]
    271              //如果K60设置成为大端格式，进行如下操作
    272              //FTFE_FCCOB4 = (uint8_t)(*((uint_8*)DataSrcPtr+0));
    273              //FTFE_FCCOB5 = (uint8_t)(*((uint_8*)DataSrcPtr+1));
    274              //FTFE_FCCOB6 = (uint8_t)(*((uint_8*)DataSrcPtr+2));
    275              //FTFE_FCCOB7 = (uint8_t)(*((uint_8*)DataSrcPtr+3));
    276              //设置FLASH加载命令
    277              FTFE->FSTAT |= FTFE_FSTAT_CCIF_MASK;    
   \   00000072   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000074   0x7800             LDRB     R0,[R0, #+0]
   \   00000076   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000007A   0x....             LDR.N    R6,??DataTable2  ;; 0x40020000
   \   0000007C   0x7030             STRB     R0,[R6, #+0]
    278              //等待命令完成
    279              while (!(FTFE->FSTAT & FTFE_FSTAT_CCIF_MASK)) {};
   \                     ??Flash_ByteProgram_5: (+1)
   \   0000007E   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x0600             LSLS     R0,R0,#+24
   \   00000084   0xD5FB             BPL.N    ??Flash_ByteProgram_5
    280          
    281              //检测FLASH访问错误
    282              if (FTFE->FSTAT & FTFE_FSTAT_ACCERR_MASK)
   \   00000086   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000088   0x7800             LDRB     R0,[R0, #+0]
   \   0000008A   0x0680             LSLS     R0,R0,#+26
   \   0000008C   0xD508             BPL.N    ??Flash_ByteProgram_6
    283              {
    284                FTFE->FSTAT |= FTFE_FSTAT_ACCERR_MASK;
   \   0000008E   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000096   0x....             LDR.N    R6,??DataTable2  ;; 0x40020000
   \   00000098   0x7030             STRB     R0,[R6, #+0]
    285                Return |= FLASH_FACCERR;
   \   0000009A   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   0000009E   0xE01F             B.N      ??Flash_ByteProgram_7
    286              }
    287              //检测FLASH保护错误
    288              else if (FTFE->FSTAT & FTFE_FSTAT_FPVIOL_MASK)
   \                     ??Flash_ByteProgram_6: (+1)
   \   000000A0   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0x06C0             LSLS     R0,R0,#+27
   \   000000A6   0xD508             BPL.N    ??Flash_ByteProgram_8
    289              {
    290                FTFE->FSTAT |= FTFE_FSTAT_FPVIOL_MASK;
   \   000000A8   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   000000AA   0x7800             LDRB     R0,[R0, #+0]
   \   000000AC   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   000000B0   0x....             LDR.N    R6,??DataTable2  ;; 0x40020000
   \   000000B2   0x7030             STRB     R0,[R6, #+0]
    291                Return |= FLASH_FPVIOL;
   \   000000B4   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   000000B8   0xE012             B.N      ??Flash_ByteProgram_7
    292              }
    293              else if (FTFE->FSTAT & FTFE_FSTAT_RDCOLERR_MASK)
   \                     ??Flash_ByteProgram_8: (+1)
   \   000000BA   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   000000BC   0x7800             LDRB     R0,[R0, #+0]
   \   000000BE   0x0640             LSLS     R0,R0,#+25
   \   000000C0   0xD508             BPL.N    ??Flash_ByteProgram_9
    294              {
    295                FTFE->FSTAT |= FTFE_FSTAT_RDCOLERR_MASK;
   \   000000C2   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   000000C4   0x7800             LDRB     R0,[R0, #+0]
   \   000000C6   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000000CA   0x....             LDR.N    R6,??DataTable2  ;; 0x40020000
   \   000000CC   0x7030             STRB     R0,[R6, #+0]
    296                Return |= FLASH_RDCOLERR;
   \   000000CE   0xF051 0x0108      ORRS     R1,R1,#0x8
   \   000000D2   0xE005             B.N      ??Flash_ByteProgram_7
    297              }
    298              else if (FTFE->FSTAT & FTFE_FSTAT_MGSTAT0_MASK)
   \                     ??Flash_ByteProgram_9: (+1)
   \   000000D4   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \   000000D6   0x7800             LDRB     R0,[R0, #+0]
   \   000000D8   0x07C0             LSLS     R0,R0,#+31
   \   000000DA   0xD501             BPL.N    ??Flash_ByteProgram_7
    299              {
    300                  Return |= FLASH_MGSTAT0;
   \   000000DC   0xF051 0x0104      ORRS     R1,R1,#0x4
    301              } 
    302              //计算偏移量
    303              size_buffer --;
   \                     ??Flash_ByteProgram_7: (+1)
   \   000000E0   0x1E5B             SUBS     R3,R3,#+1
    304              DataSrcPtr += 2;     
   \   000000E2   0x3408             ADDS     R4,R4,#+8
    305              FlashStartAdd +=BYTE_DIV;
   \   000000E4   0x3508             ADDS     R5,R5,#+8
   \   000000E6   0xE79A             B.N      ??Flash_ByteProgram_3
    306            }
    307          #endif
    308            return  Return;
   \                     ??Flash_ByteProgram_4: (+1)
   \   000000E8   0x0008             MOVS     R0,R1
   \   000000EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??Flash_ByteProgram_1: (+1)
   \   000000EC   0xBC70             POP      {R4-R6}
   \   000000EE   0x4770             BX       LR               ;; return
    309          } 

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4001F004         DC32     0x4001f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x4001F008         DC32     0x4001f008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40020007         DC32     0x40020007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x40020006         DC32     0x40020006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40020005         DC32     0x40020005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x4002000B         DC32     0x4002000b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x4002000A         DC32     0x4002000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x40020009         DC32     0x40020009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x4002000F         DC32     0x4002000f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x4002000E         DC32     0x4002000e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x4002000D         DC32     0x4002000d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x4002000C         DC32     0x4002000c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   Flash_ByteProgram
       0   Flash_Init
       0   Flash_SectorErase


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     240  Flash_ByteProgram
      90  Flash_Init
     152  Flash_SectorErase

 
 542 bytes in section .text
 
 542 bytes of CODE memory

Errors: none
Warnings: none
