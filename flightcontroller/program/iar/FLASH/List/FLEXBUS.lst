###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         31/Aug/2018  16:56:49
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FLEXBUS.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW5C2D.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FLEXBUS.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\inc\c\DLib_Config_Full.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Core\Include\ -I
#        D:\iar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List\FLEXBUS.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj\FLEXBUS.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FLEXBUS.c
      1          /**
      2           * @file FLEXBUS.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FLEXBUS底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include "FLEXBUS.h"
     25          

   \                                 In section .data, align 4
     26          const uint32* FB_PORT[32] = {(uint32*)&PORTD->PCR[6], (uint32*)&PORTD->PCR[5], (uint32*)&PORTD->PCR[4], (uint32*)&PORTD->PCR[3],
   \                     FB_PORT:
   \        0x0   0x4004'C018        DC32 4004C018H, 4004C014H, 4004C010H, 4004C00CH, 4004C008H, 4004B028H
   \              0x4004'C014  
   \              0x4004'C010  
   \              0x4004'C00C  
   \              0x4004'C008  
   \              0x4004'B028  
   \       0x18   0x4004'B024        DC32 4004B024H, 4004B020H, 4004B01CH, 4004B018H, 4004B014H, 4004B010H
   \              0x4004'B020  
   \              0x4004'B01C  
   \              0x4004'B018  
   \              0x4004'B014  
   \              0x4004'B010  
   \       0x30   0x4004'B008        DC32 4004B008H, 4004B004H, 4004B000H, 4004A048H, 4004A044H, 4004A040H
   \              0x4004'B004  
   \              0x4004'B000  
   \              0x4004'A048  
   \              0x4004'A044  
   \              0x4004'A040  
   \       0x48   0x4004'A02C        DC32 4004A02CH, 4004A028H, 4004A024H, 4004A020H, 4004A01CH, 4004A018H
   \              0x4004'A028  
   \              0x4004'A024  
   \              0x4004'A020  
   \              0x4004'A01C  
   \              0x4004'A018  
   \       0x60   0x4004'B03C        DC32 4004B03CH, 4004B038H, 4004B034H, 4004B030H, 4004A05CH, 4004A058H
   \              0x4004'B038  
   \              0x4004'B034  
   \              0x4004'B030  
   \              0x4004'A05C  
   \              0x4004'A058  
   \       0x78   0x4004'A054        DC32 4004A054H, 4004A050H
   \              0x4004'A050  
     27                                       (uint32*)&PORTD->PCR[2], (uint32*)&PORTC->PCR[10], (uint32*)&PORTC->PCR[9], (uint32*)&PORTC->PCR[8],
     28                                       (uint32*)&PORTC->PCR[7], (uint32*)&PORTC->PCR[6], (uint32*)&PORTC->PCR[5], (uint32*)&PORTC->PCR[4],
     29                                       (uint32*)&PORTC->PCR[2], (uint32*)&PORTC->PCR[1], (uint32*)&PORTC->PCR[0], (uint32*)&PORTB->PCR[18],
     30                                       (uint32*)&PORTB->PCR[17], (uint32*)&PORTB->PCR[16], (uint32*)&PORTB->PCR[11], (uint32*)&PORTB->PCR[10],
     31                                       (uint32*)&PORTB->PCR[9], (uint32*)&PORTB->PCR[8], (uint32*)&PORTB->PCR[7], (uint32*)&PORTB->PCR[6],
     32                                       (uint32*)&PORTC->PCR[15], (uint32*)&PORTC->PCR[14], (uint32*)&PORTC->PCR[13], (uint32*)&PORTC->PCR[12],
     33                                       (uint32*)&PORTB->PCR[23], (uint32*)&PORTB->PCR[22], (uint32*)&PORTB->PCR[21], (uint32*)&PORTB->PCR[20]};
     34          
     35          /*
     36           * FlexBus_Init
     37           * FlexBux通用初始化函数
     38           * 
     39           * 参数:
     40           *    fb_init_struct--FlexBus初始化结构体，
     41           *                        具体定义见FB_InitTypeDef
     42           *
     43           * 输出:
     44           *    0--配置错误
     45           *    1--配置成功
     46           */

   \                                 In section .text, align 4, keep-with-next
     47          uint8 FlexBus_Init(FB_InitTypeDef fb_init_struct)
     48          {
   \                     FlexBus_Init: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
     49            FBx Fbx = fb_init_struct.FB_Fbx;
   \        0x6   0xF89D 0x6028      LDRB     R6,[SP, #+40]
     50            uint32 base_addr = fb_init_struct.FB_ChipSelAddress;
   \        0xA   0x9F0B             LDR      R7,[SP, #+44]
     51            uint32 addr_space = fb_init_struct.FB_AddressSpace;
   \        0xC   0x9C0C             LDR      R4,[SP, #+48]
     52            uint8 size = fb_init_struct.FB_PortSize;
   \        0xE   0xF89D 0x8034      LDRB     R8,[SP, #+52]
     53            boolean justied = fb_init_struct.FB_IsRightJustied;
   \       0x12   0xF89D 0x9035      LDRB     R9,[SP, #+53]
     54            boolean aa = fb_init_struct.FB_AutoAckEnable;
   \       0x16   0xF89D 0x0036      LDRB     R0,[SP, #+54]
   \       0x1A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     55            uint8 ws = fb_init_struct.FB_WateStates;
   \       0x1E   0xF89D 0x0037      LDRB     R0,[SP, #+55]
   \       0x22   0xF88D 0x0001      STRB     R0,[SP, #+1]
     56            uint8 rah = fb_init_struct.FB_ReadAddrHold; 
   \       0x26   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \       0x2A   0xF88D 0x0000      STRB     R0,[SP, #+0]
     57            uint8 wah = fb_init_struct.FB_WriteAddrHold;
   \       0x2E   0xF89D 0xA039      LDRB     R10,[SP, #+57]
     58            uint32* pcr;
     59            uint8 n=0;
   \       0x32   0xF05F 0x0B00      MOVS     R11,#+0
     60            
     61            //参数检查
     62            ASSERT( Fbx <= 5);    //判断FB通道号
   \       0x36   0x0030             MOVS     R0,R6
   \       0x38   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x3A   0x2806             CMP      R0,#+6
   \       0x3C   0xDB03             BLT.N    ??FlexBus_Init_1
   \       0x3E   0x213E             MOVS     R1,#+62
   \       0x40   0x48A9             LDR.N    R0,??FlexBus_Init_0
   \       0x42   0x.... 0x....      BL       assert_failed
     63            ASSERT( base_addr >= 0x60000000 && base_addr <= 0xDFFFFFFF);    //判断基地址合法性
   \                     ??FlexBus_Init_1: (+1)
   \       0x46   0xF1B7 0x4FC0      CMP      R7,#+1610612736
   \       0x4A   0xD302             BCC.N    ??FlexBus_Init_2
   \       0x4C   0xF1B7 0x4F60      CMP      R7,#-536870912
   \       0x50   0xD303             BCC.N    ??FlexBus_Init_3
   \                     ??FlexBus_Init_2: (+1)
   \       0x52   0x213F             MOVS     R1,#+63
   \       0x54   0x48A4             LDR.N    R0,??FlexBus_Init_0
   \       0x56   0x.... 0x....      BL       assert_failed
     64            ASSERT( addr_space != 0);    //寻址空间大小
   \                     ??FlexBus_Init_3: (+1)
   \       0x5A   0x2C00             CMP      R4,#+0
   \       0x5C   0xD103             BNE.N    ??FlexBus_Init_4
   \       0x5E   0x2140             MOVS     R1,#+64
   \       0x60   0x48A1             LDR.N    R0,??FlexBus_Init_0
   \       0x62   0x.... 0x....      BL       assert_failed
     65            ASSERT( size <= 3);    //判断数据位宽
   \                     ??FlexBus_Init_4: (+1)
   \       0x66   0x4640             MOV      R0,R8
   \       0x68   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x6A   0x2804             CMP      R0,#+4
   \       0x6C   0xDB03             BLT.N    ??FlexBus_Init_5
   \       0x6E   0x2141             MOVS     R1,#+65
   \       0x70   0x489D             LDR.N    R0,??FlexBus_Init_0
   \       0x72   0x.... 0x....      BL       assert_failed
     66            ASSERT( rah <= 3);     //判断读地址保持时间
   \                     ??FlexBus_Init_5: (+1)
   \       0x76   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x7A   0x2804             CMP      R0,#+4
   \       0x7C   0xDB03             BLT.N    ??FlexBus_Init_6
   \       0x7E   0x2142             MOVS     R1,#+66
   \       0x80   0x4899             LDR.N    R0,??FlexBus_Init_0
   \       0x82   0x.... 0x....      BL       assert_failed
     67            ASSERT( wah <= 3);     //判断写地址保持时间
   \                     ??FlexBus_Init_6: (+1)
   \       0x86   0x4650             MOV      R0,R10
   \       0x88   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x8A   0x2804             CMP      R0,#+4
   \       0x8C   0xDB03             BLT.N    ??FlexBus_Init_7
   \       0x8E   0x2143             MOVS     R1,#+67
   \       0x90   0x4895             LDR.N    R0,??FlexBus_Init_0
   \       0x92   0x.... 0x....      BL       assert_failed
     68            
     69            FB->CS[Fbx].CSMR = 0;
   \                     ??FlexBus_Init_7: (+1)
   \       0x96   0x4995             LDR.N    R1,??FlexBus_Init_0+0x4  ;; 0x4000c000
   \       0x98   0x220C             MOVS     R2,#+12
   \       0x9A   0x0030             MOVS     R0,R6
   \       0x9C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x9E   0x4350             MULS     R0,R2,R0
   \       0xA0   0x4408             ADD      R0,R1,R0
   \       0xA2   0x2300             MOVS     R3,#+0
   \       0xA4   0x6043             STR      R3,[R0, #+4]
     70                
     71            //设置基地址
     72            FB->CS[Fbx].CSAR = base_addr;
   \       0xA6   0x0030             MOVS     R0,R6
   \       0xA8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xAA   0x4350             MULS     R0,R2,R0
   \       0xAC   0x500F             STR      R7,[R1, R0]
     73            //端口位宽
     74            FB->CS[Fbx].CSCR  = FB_CSCR_PS(size);      
   \       0xAE   0x0030             MOVS     R0,R6
   \       0xB0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xB2   0x4350             MULS     R0,R2,R0
   \       0xB4   0x4408             ADD      R0,R1,R0
   \       0xB6   0x4643             MOV      R3,R8
   \       0xB8   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xBA   0x019B             LSLS     R3,R3,#+6
   \       0xBC   0xF013 0x03C0      ANDS     R3,R3,#0xC0
   \       0xC0   0x6083             STR      R3,[R0, #+8]
     75            
     76            if(justied)
   \       0xC2   0x4648             MOV      R0,R9
   \       0xC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xC6   0x2800             CMP      R0,#+0
   \       0xC8   0xD00B             BEQ.N    ??FlexBus_Init_8
     77            {
     78              FB->CS[Fbx].CSCR |= FB_CSCR_BLS_MASK;   // 数据右对齐
   \       0xCA   0x0030             MOVS     R0,R6
   \       0xCC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xCE   0x4350             MULS     R0,R2,R0
   \       0xD0   0x4408             ADD      R0,R1,R0
   \       0xD2   0x0033             MOVS     R3,R6
   \       0xD4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xD6   0x4353             MULS     R3,R2,R3
   \       0xD8   0x440B             ADD      R3,R1,R3
   \       0xDA   0x689B             LDR      R3,[R3, #+8]
   \       0xDC   0xF453 0x7300      ORRS     R3,R3,#0x200
   \       0xE0   0x6083             STR      R3,[R0, #+8]
     79            }
     80                
     81            if(aa)    
   \                     ??FlexBus_Init_8: (+1)
   \       0xE2   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \       0xE6   0x2800             CMP      R0,#+0
   \       0xE8   0xD00B             BEQ.N    ??FlexBus_Init_9
     82            {
     83              FB->CS[Fbx].CSCR |= FB_CSCR_AA_MASK;   //使能内部应答
   \       0xEA   0x0030             MOVS     R0,R6
   \       0xEC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xEE   0x4350             MULS     R0,R2,R0
   \       0xF0   0x4408             ADD      R0,R1,R0
   \       0xF2   0x0033             MOVS     R3,R6
   \       0xF4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xF6   0x4353             MULS     R3,R2,R3
   \       0xF8   0x440B             ADD      R3,R1,R3
   \       0xFA   0x689B             LDR      R3,[R3, #+8]
   \       0xFC   0xF453 0x7380      ORRS     R3,R3,#0x100
   \      0x100   0x6083             STR      R3,[R0, #+8]
     84            }
     85            
     86            FB->CS[Fbx].CSCR |= FB_CSCR_WS(ws)    // 在内部应答信号之前加入ws个WS
     87                               | FB_CSCR_RDAH(rah)
     88                               | FB_CSCR_WRAH(wah);
   \                     ??FlexBus_Init_9: (+1)
   \      0x102   0x0030             MOVS     R0,R6
   \      0x104   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x106   0x4350             MULS     R0,R2,R0
   \      0x108   0x4408             ADD      R0,R1,R0
   \      0x10A   0x0033             MOVS     R3,R6
   \      0x10C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x10E   0x4353             MULS     R3,R2,R3
   \      0x110   0x440B             ADD      R3,R1,R3
   \      0x112   0xF8D3 0xC008      LDR      R12,[R3, #+8]
   \      0x116   0xF89D 0x3001      LDRB     R3,[SP, #+1]
   \      0x11A   0x029B             LSLS     R3,R3,#+10
   \      0x11C   0xF413 0x437C      ANDS     R3,R3,#0xFC00
   \      0x120   0xF89D 0xE000      LDRB     LR,[SP, #+0]
   \      0x124   0xEA5F 0x4E8E      LSLS     LR,LR,#+18
   \      0x128   0xF41E 0x2E40      ANDS     LR,LR,#0xC0000
   \      0x12C   0xEA5E 0x0303      ORRS     R3,LR,R3
   \      0x130   0x46D6             MOV      LR,R10
   \      0x132   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \      0x136   0xEA5F 0x4E0E      LSLS     LR,LR,#+16
   \      0x13A   0xF41E 0x3E40      ANDS     LR,LR,#0x30000
   \      0x13E   0xEA5E 0x0303      ORRS     R3,LR,R3
   \      0x142   0xEA53 0x030C      ORRS     R3,R3,R12
   \      0x146   0x6083             STR      R3,[R0, #+8]
     89            
     90            //根据寻址空间大小计算基地址掩码
     91            addr_space = (addr_space-1)>>16;
   \      0x148   0x1E64             SUBS     R4,R4,#+1
   \      0x14A   0x0C24             LSRS     R4,R4,#+16
     92            FB->CS[Fbx].CSMR = FB_CSMR_BAM(addr_space)  //设置基地址掩码为128K地址空间 =2^n(n=BAM+16)
     93                          | FB_CSMR_V_MASK;    //使能CS信号
   \      0x14C   0x0030             MOVS     R0,R6
   \      0x14E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x150   0xFB02 0xF200      MUL      R2,R2,R0
   \      0x154   0xEB01 0x0002      ADD      R0,R1,R2
   \      0x158   0x0421             LSLS     R1,R4,#+16
   \      0x15A   0xF051 0x0101      ORRS     R1,R1,#0x1
   \      0x15E   0x6041             STR      R1,[R0, #+4]
     94            
     95            //使能复用功能的FB_CSn及引脚复用
     96            if(Fbx == FB0)
   \      0x160   0x0030             MOVS     R0,R6
   \      0x162   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x164   0x2800             CMP      R0,#+0
   \      0x166   0xD104             BNE.N    ??FlexBus_Init_10
     97            {
     98              PORTD->PCR[1]  = PORT_PCR_MUX(5);       // FB_CS0     
   \      0x168   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x16C   0x4960             LDR.N    R1,??FlexBus_Init_0+0x8  ;; 0x4004c004
   \      0x16E   0x6008             STR      R0,[R1, #+0]
   \      0x170   0xE054             B.N      ??FlexBus_Init_11
     99            }
    100            else if(Fbx == FB1)
   \                     ??FlexBus_Init_10: (+1)
   \      0x172   0x0030             MOVS     R0,R6
   \      0x174   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x176   0x2801             CMP      R0,#+1
   \      0x178   0xD10D             BNE.N    ??FlexBus_Init_12
    101            {
    102              FB->CSPMCR &= ~(FB_CSPMCR_GROUP1_MASK);
   \      0x17A   0x485E             LDR.N    R0,??FlexBus_Init_0+0xC  ;; 0x4000c060
   \      0x17C   0x6801             LDR      R1,[R0, #+0]
   \      0x17E   0xF021 0x4170      BIC      R1,R1,#0xF0000000
   \      0x182   0x6001             STR      R1,[R0, #+0]
    103              FB->CSPMCR |= FB_CSPMCR_GROUP1(1);      
   \      0x184   0x6801             LDR      R1,[R0, #+0]
   \      0x186   0xF051 0x5180      ORRS     R1,R1,#0x10000000
   \      0x18A   0x6001             STR      R1,[R0, #+0]
    104              PORTD->PCR[0]  = PORT_PCR_MUX(5);       // FB_CS1  
   \      0x18C   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x190   0x4959             LDR.N    R1,??FlexBus_Init_0+0x10  ;; 0x4004c000
   \      0x192   0x6008             STR      R0,[R1, #+0]
   \      0x194   0xE042             B.N      ??FlexBus_Init_11
    105            }
    106            else if(Fbx == FB2)
   \                     ??FlexBus_Init_12: (+1)
   \      0x196   0x0030             MOVS     R0,R6
   \      0x198   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x19A   0x2802             CMP      R0,#+2
   \      0x19C   0xD10D             BNE.N    ??FlexBus_Init_13
    107            {
    108              FB->CSPMCR &= ~(FB_CSPMCR_GROUP4_MASK);
   \      0x19E   0x4855             LDR.N    R0,??FlexBus_Init_0+0xC  ;; 0x4000c060
   \      0x1A0   0x6801             LDR      R1,[R0, #+0]
   \      0x1A2   0xF431 0x2170      BICS     R1,R1,#0xF0000
   \      0x1A6   0x6001             STR      R1,[R0, #+0]
    109              FB->CSPMCR |= FB_CSPMCR_GROUP4(1);     
   \      0x1A8   0x6801             LDR      R1,[R0, #+0]
   \      0x1AA   0xF451 0x3180      ORRS     R1,R1,#0x10000
   \      0x1AE   0x6001             STR      R1,[R0, #+0]
    110              PORTC->PCR[18]  = PORT_PCR_MUX(5);       // FB_CS2
   \      0x1B0   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x1B4   0x4951             LDR.N    R1,??FlexBus_Init_0+0x14  ;; 0x4004b048
   \      0x1B6   0x6008             STR      R0,[R1, #+0]
   \      0x1B8   0xE030             B.N      ??FlexBus_Init_11
    111            }
    112            else if(Fbx == FB3)
   \                     ??FlexBus_Init_13: (+1)
   \      0x1BA   0x0030             MOVS     R0,R6
   \      0x1BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x1BE   0x2803             CMP      R0,#+3
   \      0x1C0   0xD10D             BNE.N    ??FlexBus_Init_14
    113            {
    114              FB->CSPMCR &= ~(FB_CSPMCR_GROUP5_MASK);
   \      0x1C2   0x484C             LDR.N    R0,??FlexBus_Init_0+0xC  ;; 0x4000c060
   \      0x1C4   0x6801             LDR      R1,[R0, #+0]
   \      0x1C6   0xF431 0x4170      BICS     R1,R1,#0xF000
   \      0x1CA   0x6001             STR      R1,[R0, #+0]
    115              FB->CSPMCR |= FB_CSPMCR_GROUP5(1);     
   \      0x1CC   0x6801             LDR      R1,[R0, #+0]
   \      0x1CE   0xF451 0x5180      ORRS     R1,R1,#0x1000
   \      0x1D2   0x6001             STR      R1,[R0, #+0]
    116              PORTC->PCR[19]  = PORT_PCR_MUX(5);       // FB_CS3
   \      0x1D4   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x1D8   0x4949             LDR.N    R1,??FlexBus_Init_0+0x18  ;; 0x4004b04c
   \      0x1DA   0x6008             STR      R0,[R1, #+0]
   \      0x1DC   0xE01E             B.N      ??FlexBus_Init_11
    117            }
    118            else if(Fbx == FB4)
   \                     ??FlexBus_Init_14: (+1)
   \      0x1DE   0x0030             MOVS     R0,R6
   \      0x1E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x1E2   0x2804             CMP      R0,#+4
   \      0x1E4   0xD10B             BNE.N    ??FlexBus_Init_15
    119            {
    120              FB->CSPMCR &= ~(FB_CSPMCR_GROUP2_MASK);
   \      0x1E6   0x4843             LDR.N    R0,??FlexBus_Init_0+0xC  ;; 0x4000c060
   \      0x1E8   0x6801             LDR      R1,[R0, #+0]
   \      0x1EA   0xF031 0x6170      BICS     R1,R1,#0xF000000
   \      0x1EE   0x6001             STR      R1,[R0, #+0]
    121              FB->CSPMCR |= FB_CSPMCR_GROUP2(0);      
   \      0x1F0   0x6801             LDR      R1,[R0, #+0]
   \      0x1F2   0x6001             STR      R1,[R0, #+0]
    122              PORTC->PCR[17]  = PORT_PCR_MUX(5);       // FB_CS4
   \      0x1F4   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x1F8   0x4942             LDR.N    R1,??FlexBus_Init_0+0x1C  ;; 0x4004b044
   \      0x1FA   0x6008             STR      R0,[R1, #+0]
   \      0x1FC   0xE00E             B.N      ??FlexBus_Init_11
    123            }
    124            else if(Fbx == FB5)
   \                     ??FlexBus_Init_15: (+1)
   \      0x1FE   0x0030             MOVS     R0,R6
   \      0x200   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x202   0x2805             CMP      R0,#+5
   \      0x204   0xD10A             BNE.N    ??FlexBus_Init_11
    125            {
    126              FB->CSPMCR &= ~(FB_CSPMCR_GROUP3_MASK);
   \      0x206   0x483B             LDR.N    R0,??FlexBus_Init_0+0xC  ;; 0x4000c060
   \      0x208   0x6801             LDR      R1,[R0, #+0]
   \      0x20A   0xF431 0x0170      BICS     R1,R1,#0xF00000
   \      0x20E   0x6001             STR      R1,[R0, #+0]
    127              FB->CSPMCR |= FB_CSPMCR_GROUP3(0);     
   \      0x210   0x6801             LDR      R1,[R0, #+0]
   \      0x212   0x6001             STR      R1,[R0, #+0]
    128              PORTC->PCR[16]  = PORT_PCR_MUX(5);       // FB_CS5
   \      0x214   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x218   0x493B             LDR.N    R1,??FlexBus_Init_0+0x20  ;; 0x4004b040
   \      0x21A   0x6008             STR      R0,[R1, #+0]
    129            }
    130            
    131            //使能总线地址、数据引脚复用功能
    132            //先使能低16位地址总线
    133            for(uint8 i=0; i<16; i++)
   \                     ??FlexBus_Init_11: (+1)
   \      0x21C   0x2000             MOVS     R0,#+0
   \                     ??FlexBus_Init_16: (+1)
   \      0x21E   0x0001             MOVS     R1,R0
   \      0x220   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \      0x222   0x2910             CMP      R1,#+16
   \      0x224   0xDA0A             BGE.N    ??FlexBus_Init_17
    134            {
    135              pcr = (uint32 *)FB_PORT[i];
   \      0x226   0x4939             LDR.N    R1,??FlexBus_Init_0+0x24
   \      0x228   0x0002             MOVS     R2,R0
   \      0x22A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x22C   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \      0x230   0x000D             MOVS     R5,R1
    136              *pcr = PORT_PCR_MUX(5);    
   \      0x232   0xF44F 0x61A0      MOV      R1,#+1280
   \      0x236   0x6029             STR      R1,[R5, #+0]
    137            }
   \      0x238   0x1C40             ADDS     R0,R0,#+1
   \      0x23A   0xE7F0             B.N      ??FlexBus_Init_16
    138            //使能其余的地址总线
    139            n=16;
   \                     ??FlexBus_Init_17: (+1)
   \      0x23C   0x2010             MOVS     R0,#+16
    140            for(uint8 i=0; i<16; i++)
   \      0x23E   0x2100             MOVS     R1,#+0
   \                     ??FlexBus_Init_18: (+1)
   \      0x240   0x000A             MOVS     R2,R1
   \      0x242   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x244   0x2A10             CMP      R2,#+16
   \      0x246   0xDA0F             BGE.N    ??FlexBus_Init_19
    141            {
    142              if((addr_space>>i)&0x01)
   \      0x248   0x0022             MOVS     R2,R4
   \      0x24A   0x40CA             LSRS     R2,R2,R1
   \      0x24C   0x07D2             LSLS     R2,R2,#+31
   \      0x24E   0xD509             BPL.N    ??FlexBus_Init_20
    143              {
    144                pcr = (uint32 *)FB_PORT[n++];
   \      0x250   0x4A2E             LDR.N    R2,??FlexBus_Init_0+0x24
   \      0x252   0x0003             MOVS     R3,R0
   \      0x254   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x256   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \      0x25A   0x0015             MOVS     R5,R2
   \      0x25C   0x1C40             ADDS     R0,R0,#+1
    145                *pcr = PORT_PCR_MUX(5); 
   \      0x25E   0xF44F 0x62A0      MOV      R2,#+1280
   \      0x262   0x602A             STR      R2,[R5, #+0]
    146              }
    147            }
   \                     ??FlexBus_Init_20: (+1)
   \      0x264   0x1C49             ADDS     R1,R1,#+1
   \      0x266   0xE7EB             B.N      ??FlexBus_Init_18
    148            //如果是32位宽，则使能高16位
    149            n=0;
   \                     ??FlexBus_Init_19: (+1)
   \      0x268   0x2100             MOVS     R1,#+0
    150            if(size == 0)
   \      0x26A   0x4642             MOV      R2,R8
   \      0x26C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x26E   0x2A00             CMP      R2,#+0
   \      0x270   0xD102             BNE.N    ??FlexBus_Init_21
    151            {   
    152              n=16;
   \      0x272   0x2010             MOVS     R0,#+16
   \      0x274   0x0001             MOVS     R1,R0
   \      0x276   0xE014             B.N      ??FlexBus_Init_22
    153            }else if(justied==0 && size == 0x10)
   \                     ??FlexBus_Init_21: (+1)
   \      0x278   0x4648             MOV      R0,R9
   \      0x27A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x27C   0x2800             CMP      R0,#+0
   \      0x27E   0xD106             BNE.N    ??FlexBus_Init_23
   \      0x280   0x4640             MOV      R0,R8
   \      0x282   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x284   0x2810             CMP      R0,#+16
   \      0x286   0xD102             BNE.N    ??FlexBus_Init_23
    154            {
    155              n=16;
   \      0x288   0x2010             MOVS     R0,#+16
   \      0x28A   0x0001             MOVS     R1,R0
   \      0x28C   0xE009             B.N      ??FlexBus_Init_22
    156            }else if(justied==0 && size == 0x01)
   \                     ??FlexBus_Init_23: (+1)
   \      0x28E   0x4648             MOV      R0,R9
   \      0x290   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x292   0x2800             CMP      R0,#+0
   \      0x294   0xD105             BNE.N    ??FlexBus_Init_22
   \      0x296   0x4640             MOV      R0,R8
   \      0x298   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x29A   0x2801             CMP      R0,#+1
   \      0x29C   0xD101             BNE.N    ??FlexBus_Init_22
    157            {
    158              n=8;
   \      0x29E   0x2008             MOVS     R0,#+8
   \      0x2A0   0x0001             MOVS     R1,R0
    159            }
    160            if(n!=0)
   \                     ??FlexBus_Init_22: (+1)
   \      0x2A2   0x0008             MOVS     R0,R1
   \      0x2A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x2A6   0x2800             CMP      R0,#+0
   \      0x2A8   0xD013             BEQ.N    ??FlexBus_Init_24
    161            {
    162              for(uint8 i=31; i>31-n; i--)
   \      0x2AA   0x201F             MOVS     R0,#+31
   \                     ??FlexBus_Init_25: (+1)
   \      0x2AC   0x000A             MOVS     R2,R1
   \      0x2AE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x2B0   0xF1D2 0x021F      RSBS     R2,R2,#+31
   \      0x2B4   0x0003             MOVS     R3,R0
   \      0x2B6   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x2B8   0x429A             CMP      R2,R3
   \      0x2BA   0xDA0A             BGE.N    ??FlexBus_Init_24
    163              {
    164                pcr = (uint32 *)FB_PORT[i];
   \      0x2BC   0x4A13             LDR.N    R2,??FlexBus_Init_0+0x24
   \      0x2BE   0x0003             MOVS     R3,R0
   \      0x2C0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x2C2   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \      0x2C6   0x0015             MOVS     R5,R2
    165                *pcr = PORT_PCR_MUX(5);    
   \      0x2C8   0xF44F 0x62A0      MOV      R2,#+1280
   \      0x2CC   0x602A             STR      R2,[R5, #+0]
    166              }
   \      0x2CE   0x1E40             SUBS     R0,R0,#+1
   \      0x2D0   0xE7EC             B.N      ??FlexBus_Init_25
    167            }
    168            
    169            //控制信号线
    170            PORTB->PCR[19] = PORT_PCR_MUX(5);          // fb_oe_b
   \                     ??FlexBus_Init_24: (+1)
   \      0x2D2   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x2D6   0x4A0E             LDR.N    R2,??FlexBus_Init_0+0x28  ;; 0x4004a04c
   \      0x2D8   0x6010             STR      R0,[R2, #+0]
    171            PORTC->PCR[11] = PORT_PCR_MUX(5);          // fb_rw_b  
   \      0x2DA   0x4A0E             LDR.N    R2,??FlexBus_Init_0+0x2C  ;; 0x4004b02c
   \      0x2DC   0x6010             STR      R0,[R2, #+0]
    172                        
    173            return 1;
   \      0x2DE   0x2001             MOVS     R0,#+1
   \                     ??FlexBus_Init_26: (+1)
   \      0x2E0   0xE8BD 0x0FF2      POP      {R1,R4-R11}
   \      0x2E4   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??FlexBus_Init_0:
   \      0x2E8   0x....'....        DC32     ?_0
   \      0x2EC   0x4000'C000        DC32     0x4000c000
   \      0x2F0   0x4004'C004        DC32     0x4004c004
   \      0x2F4   0x4000'C060        DC32     0x4000c060
   \      0x2F8   0x4004'C000        DC32     0x4004c000
   \      0x2FC   0x4004'B048        DC32     0x4004b048
   \      0x300   0x4004'B04C        DC32     0x4004b04c
   \      0x304   0x4004'B044        DC32     0x4004b044
   \      0x308   0x4004'B040        DC32     0x4004b040
   \      0x30C   0x....'....        DC32     FB_PORT
   \      0x310   0x4004'A04C        DC32     0x4004a04c
   \      0x314   0x4004'B02C        DC32     0x4004b02c
    174          }

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \        0x8   0x5C 0x78          DC8 5CH, 78H, 73H, 6BH, 31H, 39H, 39H, 34H
   \              0x73 0x6B    
   \              0x31 0x39    
   \              0x39 0x34    
   \       0x10   0x30 0x39          DC8 30H, 39H, 31H, 30H, 5CH, 44H, 65H, 73H
   \              0x31 0x30    
   \              0x5C 0x44    
   \              0x65 0x73    
   \       0x18   0x6B 0x74          DC8 6BH, 74H, 6FH, 70H, 5CH, 66H, 6CH, 69H
   \              0x6F 0x70    
   \              0x5C 0x66    
   \              0x6C 0x69    
   \       0x20   0x67 0x68          DC8 67H, 68H, 74H, 43H, 6FH, 6EH, 74H, 72H
   \              0x74 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \       0x28   0x6F 0x6C          DC8 6FH, 6CH, 6CH, 65H, 72H, 2DH, 31H, 5CH
   \              0x6C 0x65    
   \              0x72 0x2D    
   \              0x31 0x5C    
   \       0x30   0x66 0x6C          DC8 66H, 6CH, 69H, 67H, 68H, 74H, 43H, 6FH
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x43 0x6F    
   \       0x38   0x6E 0x74          DC8 6EH, 74H, 72H, 6FH, 6CH, 6CH, 65H, 72H
   \              0x72 0x6F    
   \              0x6C 0x6C    
   \              0x65 0x72    
   \       0x40   0x2D 0x31          DC8 2DH, 31H, 5CH, 70H, 72H, 6FH, 67H, 72H
   \              0x5C 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \       0x48   0x61 0x6D          DC8 61H, 6DH, 5CH, 6CH, 69H, 62H, 5CH, 4CH
   \              0x5C 0x6C    
   \              0x69 0x62    
   \              0x5C 0x4C    
   \       0x50   0x50 0x4C          DC8 50H, 4CH, 44H, 5CH, 48H, 57H, 5CH, 46H
   \              0x44 0x5C    
   \              0x48 0x57    
   \              0x5C 0x46    
   \       0x58   0x4C 0x45          DC8 4CH, 45H, 58H, 42H, 55H, 53H, 2EH, 63H
   \              0x58 0x42    
   \              0x55 0x53    
   \              0x2E 0x63    
   \       0x60   0x00               DC8 0
   \       0x61   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   FlexBus_Init
        56   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     100  ?_0
     128  FB_PORT
     792  FlexBus_Init
       8  -- Other

 
   8 bytes in section .ARM.exidx
 128 bytes in section .data
 100 bytes in section .rodata
 792 bytes in section .text
 
 792 bytes of CODE  memory
 108 bytes of CONST memory
 128 bytes of DATA  memory

Errors: none
Warnings: none
