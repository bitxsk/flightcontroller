###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         30/Jul/2018  16:04:04
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Odom.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW444C.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Odom.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\inc\c\DLib_Config_Full.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Core\Include\ -I
#        D:\iar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4 --text_out utf8
#        --utf8_text_in)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List\Odom.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj\Odom.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Odom.c
      1          #include "Odom.h"

   \                                 In section .text, align 4
   \   __interwork __softfp bool DMA_isOccupying(uint8)
   \                     DMA_isOccupying: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0x4803             LDR.N    R0,??DMA_isOccupying_0  ;; 0x4000800c
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x40C8             LSRS     R0,R0,R1
   \        0x8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \        0xC   0x4770             BX       LR               ;; return
   \        0xE   0xBF00             Nop      
   \                     ??DMA_isOccupying_0:
   \       0x10   0x4000'800C        DC32     0x4000800c

   \                                 In section .text, align 4
   \   __code __interwork __softfp CJumpFilter::CJumpFilter()
   \                     _ZN11CJumpFilterC1Ev: (+1)
   \        0x0   0x4903             LDR.N    R1,??CJumpFilter_0  ;; 0x42c80000
   \        0x2   0x6081             STR      R1,[R0, #+8]
   \        0x4   0x2132             MOVS     R1,#+50
   \        0x6   0x6281             STR      R1,[R0, #+40]
   \        0x8   0xF05F 0x517E      MOVS     R1,#+1065353216
   \        0xC   0x62C1             STR      R1,[R0, #+44]
   \        0xE   0x4770             BX       LR               ;; return
   \                     ??CJumpFilter_0:
   \       0x10   0x42C8'0000        DC32     0x42c80000

   \                                 In section .text, align 4
   \   __code __interwork __softfp CoordinateElement::CoordinateElement()
   \                     _ZN17CoordinateElementC1Ev: (+1)
   \        0x0   0x4903             LDR.N    R1,??CoordinateElement_0  ;; 0x3f4ccccd
   \        0x2   0x6101             STR      R1,[R0, #+16]
   \        0x4   0x4903             LDR.N    R1,??CoordinateElement_0+0x4  ;; 0x461c4000
   \        0x6   0x6141             STR      R1,[R0, #+20]
   \        0x8   0x4903             LDR.N    R1,??CoordinateElement_0+0x8  ;; 0xc61c4000
   \        0xA   0x6181             STR      R1,[R0, #+24]
   \        0xC   0x4770             BX       LR               ;; return
   \        0xE   0xBF00             Nop      
   \                     ??CoordinateElement_0:
   \       0x10   0x3F4C'CCCD        DC32     0x3f4ccccd
   \       0x14   0x461C'4000        DC32     0x461c4000
   \       0x18   0xC61C'4000        DC32     0xc61c4000

   \                                 In section .text, align 2
   \   __code __interwork __softfp Coordinate::Coordinate()
   \                     _ZN10CoordinateC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \        0xA   0xF114 0x001C      ADDS     R0,R4,#+28
   \        0xE   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x12   0xF114 0x0038      ADDS     R0,R4,#+56
   \       0x16   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void COdom::TX_::add(char)
   \                     _ZN5COdom3TX_3addEc: (+1)
   \        0x0   0xF8D0 0x23E8      LDR      R2,[R0, #+1000]
   \        0x4   0x1C53             ADDS     R3,R2,#+1
   \        0x6   0xF8C0 0x33E8      STR      R3,[R0, #+1000]
   \        0xA   0x5481             STRB     R1,[R0, R2]
   \        0xC   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void COdom::TX_::clear()
   \                     _ZN5COdom3TX_5clearEv: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x2564             MOVS     R5,#+100
   \        0x6   0x2600             MOVS     R6,#+0
   \        0x8   0x0027             MOVS     R7,R4
   \        0xA   0x0032             MOVS     R2,R6
   \        0xC   0x0029             MOVS     R1,R5
   \        0xE   0x0038             MOVS     R0,R7
   \       0x10   0x.... 0x....      BL       __aeabi_memset
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xF8C4 0x03E8      STR      R0,[R4, #+1000]
   \       0x1A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 2
   \   __code __interwork __softfp COdom::COdom()
   \                     _ZN5COdomC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0xF514 0x70A2      ADDS     R0,R4,#+324
   \        0x8   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \        0xC   0xF514 0x70BE      ADDS     R0,R4,#+380
   \       0x10   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xF884 0x05A6      STRB     R0,[R4, #+1446]
   \       0x1A   0xF204 0x600C      ADDW     R0,R4,#+1548
   \       0x1E   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \       0x22   0xF514 0x60CC      ADDS     R0,R4,#+1632
   \       0x26   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \       0x2A   0xF204 0x60B4      ADDW     R0,R4,#+1716
   \       0x2E   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \       0x32   0x0020             MOVS     R0,R4
   \       0x34   0xBD10             POP      {R4,PC}          ;; return
      2          

   \                                 In section .bss, align 4
      3          COdom *Odom;
   \                     Odom:
   \        0x0                      DS8 4
      4          

   \                                 In section .text, align 2, keep-with-next
      5          void Odom_Init()
      6          {
   \                     _Z9Odom_Initv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0x.... 0x....      LDR.W    R4,??DataTable4_3
   \        0xA   0x7820             LDRB     R0,[R4, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD105             BNE.N    ??Odom_Init_0
      7            static COdom Odom_static;
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable4_4
   \       0x14   0x.... 0x....      BL       _ZN5COdomC1Ev
   \       0x18   0x2001             MOVS     R0,#+1
   \       0x1A   0x7020             STRB     R0,[R4, #+0]
      8            Odom = &Odom_static;
   \                     ??Odom_Init_0: (+1)
   \       0x1C   0x.... 0x....      LDR.W    R4,??DataTable4_5
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable4_4
   \       0x24   0x6020             STR      R0,[R4, #+0]
      9            Odom->DMA_CHn_Tx = DMA_CH9;
   \       0x26   0x2009             MOVS     R0,#+9
   \       0x28   0x6821             LDR      R1,[R4, #+0]
   \       0x2A   0x7048             STRB     R0,[R1, #+1]
     10            Odom->DMA_CHn_Rx = DMA_CH8;
   \       0x2C   0x2008             MOVS     R0,#+8
   \       0x2E   0x6821             LDR      R1,[R4, #+0]
   \       0x30   0x7008             STRB     R0,[R1, #+0]
     11            Odom->positionFilterX.setParameter(10, 100);
   \       0x32   0xEEB2 0x8A04      VMOV.F32 S16,#10.0
   \       0x36   0x2164             MOVS     R1,#+100
   \       0x38   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x3C   0x6820             LDR      R0,[R4, #+0]
   \       0x3E   0xF510 0x70A2      ADDS     R0,R0,#+324
   \       0x42   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     12            Odom->positionFilterY.setParameter(10, 100);
   \       0x46   0x2164             MOVS     R1,#+100
   \       0x48   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x4C   0x6820             LDR      R0,[R4, #+0]
   \       0x4E   0xF510 0x70BE      ADDS     R0,R0,#+380
   \       0x52   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     13            
     14            Odom->positionFilterX.maxValue = 20;
   \       0x56   0xEEB3 0x0A04      VMOV.F32 S0,#20.0
   \       0x5A   0x6820             LDR      R0,[R4, #+0]
   \       0x5C   0xED80 0x0A54      VSTR     S0,[R0, #+336]
     15            Odom->positionFilterX.minValue = -20;
   \       0x60   0xEEFB 0x0A04      VMOV.F32 S1,#-20.0
   \       0x64   0x6820             LDR      R0,[R4, #+0]
   \       0x66   0xEDC0 0x0A55      VSTR     S1,[R0, #+340]
     16            
     17            Odom->positionFilterY.maxValue = 20;
   \       0x6A   0x6820             LDR      R0,[R4, #+0]
   \       0x6C   0xED80 0x0A62      VSTR     S0,[R0, #+392]
     18            Odom->positionFilterY.minValue = -20;
   \       0x70   0x6820             LDR      R0,[R4, #+0]
   \       0x72   0xEDC0 0x0A63      VSTR     S1,[R0, #+396]
     19          }
   \                     ??Odom_Init_1: (+1)
   \       0x76   0xECBD 0x8B02      VPOP     {D8}
   \       0x7A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 4
   \                     `Odom_Init()::Odom_static`:
   \        0x0                      DS8 1800
     20          
     21          

   \                                 In section .text, align 2, keep-with-next
     22          void COdom::update()
     23          {
   \                     _ZN5COdom6updateEv: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x0004             MOVS     R4,R0
     24            bool newPackage = false;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xF88D 0x0001      STRB     R0,[SP, #+1]
     25            int i = 0, i0 = 0, n;
   \        0xC   0xF05F 0x0900      MOVS     R9,#+0
   \       0x10   0x2500             MOVS     R5,#+0
     26            int address0 = (DMA0->TCD[DMA_CHn_Rx].DADDR) - (uint32)(&uartData[0]);
   \       0x12   0x.... 0x....      LDR.W    R6,??DataTable4_6  ;; 0x40009000
   \       0x16   0x7820             LDRB     R0,[R4, #+0]
   \       0x18   0x0140             LSLS     R0,R0,#+5
   \       0x1A   0x4430             ADD      R0,R6,R0
   \       0x1C   0x6900             LDR      R0,[R0, #+16]
   \       0x1E   0x1CA7             ADDS     R7,R4,#+2
   \       0x20   0x1BC7             SUBS     R7,R0,R7
     27            int moveLength = 0;
   \       0x22   0xF05F 0x0800      MOVS     R8,#+0
     28            const int packageLength = 27;
   \       0x26   0x201B             MOVS     R0,#+27
   \       0x28   0x9002             STR      R0,[SP, #+8]
     29            bool loopFlag = false;  
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     30            readflag = false;
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0xF884 0x05A5      STRB     R0,[R4, #+1445]
     31            for(; i < address0; i++)
   \                     ??update_0: (+1)
   \       0x36   0x45B9             CMP      R9,R7
   \       0x38   0xDA36             BGE.N    ??update_1
     32            {
     33              for(; uartData[i] != 'x'&& i < address0 - 1; i++)
   \                     ??update_2: (+1)
   \       0x3A   0xEB04 0x0009      ADD      R0,R4,R9
   \       0x3E   0x7880             LDRB     R0,[R0, #+2]
   \       0x40   0x2878             CMP      R0,#+120
   \       0x42   0xD005             BEQ.N    ??update_3
   \       0x44   0x1E78             SUBS     R0,R7,#+1
   \       0x46   0x4581             CMP      R9,R0
   \       0x48   0xDA02             BGE.N    ??update_3
   \       0x4A   0xF119 0x0901      ADDS     R9,R9,#+1
   \       0x4E   0xE7F4             B.N      ??update_2
     34              {
     35              }
     36              if(i - i0 < packageLength)
   \                     ??update_3: (+1)
   \       0x50   0xEBB9 0x0005      SUBS     R0,R9,R5
   \       0x54   0x281B             CMP      R0,#+27
   \       0x56   0xDB24             BLT.N    ??update_4
     37              {
     38                continue;
     39              }
     40              
     41              unsigned char checkSum = 0; //×¢ÒâÃ¿¸ö°üµÄcheckSum¶¼ÒªÇåÁã
   \                     ??update_5: (+1)
   \       0x58   0xF05F 0x0A00      MOVS     R10,#+0
     42              for(int k = i - (packageLength - 2); k < i - 1; k++)
   \       0x5C   0xF1B9 0x0119      SUBS     R1,R9,#+25
   \                     ??update_6: (+1)
   \       0x60   0xF1B9 0x0001      SUBS     R0,R9,#+1
   \       0x64   0x4281             CMP      R1,R0
   \       0x66   0xDA06             BGE.N    ??update_7
     43              {
     44                checkSum += uartData[k];
   \       0x68   0xEB04 0x0001      ADD      R0,R4,R1
   \       0x6C   0x7880             LDRB     R0,[R0, #+2]
   \       0x6E   0xEB10 0x0A0A      ADDS     R10,R0,R10
     45              }
   \       0x72   0x1C49             ADDS     R1,R1,#+1
   \       0x74   0xE7F4             B.N      ??update_6
     46              if(checkSum != uartData[i-1])
   \                     ??update_7: (+1)
   \       0x76   0x4650             MOV      R0,R10
   \       0x78   0xEB04 0x0109      ADD      R1,R4,R9
   \       0x7C   0x7849             LDRB     R1,[R1, #+1]
   \       0x7E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x80   0x4288             CMP      R0,R1
   \       0x82   0xD10E             BNE.N    ??update_4
     47              {
     48                continue;
     49              }
     50            
     51              i0 = i;    
   \                     ??update_8: (+1)
   \       0x84   0x464D             MOV      R5,R9
     52              if( uartData[i+1] != 'X')
   \       0x86   0xEB04 0x0009      ADD      R0,R4,R9
   \       0x8A   0x78C0             LDRB     R0,[R0, #+3]
   \       0x8C   0x2858             CMP      R0,#+88
   \       0x8E   0xD108             BNE.N    ??update_4
     53              {
     54                continue;
     55              }
     56              int packageTop = i - packageLength + 2;
   \                     ??update_9: (+1)
   \       0x90   0xF1B9 0x0B19      SUBS     R11,R9,#+25
     57              readflag = true;
   \       0x94   0x2001             MOVS     R0,#+1
   \       0x96   0xF884 0x05A5      STRB     R0,[R4, #+1445]
     58              Odom_convert(packageTop);
   \       0x9A   0x4659             MOV      R1,R11
   \       0x9C   0x0020             MOVS     R0,R4
   \       0x9E   0x.... 0x....      BL       _ZN5COdom12Odom_convertEj
     59             
     60            }
   \                     ??update_4: (+1)
   \       0xA2   0xF119 0x0901      ADDS     R9,R9,#+1
   \       0xA6   0xE7C6             B.N      ??update_0
     61            
     62            if(readflag)
   \                     ??update_1: (+1)
   \       0xA8   0xF894 0x05A5      LDRB     R0,[R4, #+1445]
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD02E             BEQ.N    ??update_10
     63            {  
     64              moveLength = (DMA0->TCD[DMA_CHn_Rx].DADDR - (uint32)&uartData[0]) - i0;
   \       0xB0   0x7820             LDRB     R0,[R4, #+0]
   \       0xB2   0x0140             LSLS     R0,R0,#+5
   \       0xB4   0x4430             ADD      R0,R6,R0
   \       0xB6   0x6901             LDR      R1,[R0, #+16]
   \       0xB8   0x1CA0             ADDS     R0,R4,#+2
   \       0xBA   0x1A09             SUBS     R1,R1,R0
   \       0xBC   0x1B49             SUBS     R1,R1,R5
   \       0xBE   0x4688             MOV      R8,R1
     65              if(moveLength < 0) 
   \       0xC0   0xF1B8 0x0F00      CMP      R8,#+0
   \       0xC4   0xD501             BPL.N    ??update_11
     66              {
     67                moveLength = 0;
   \       0xC6   0x2000             MOVS     R0,#+0
   \       0xC8   0x4680             MOV      R8,R0
     68              }
     69              DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&uartData[0] + moveLength);
   \                     ??update_11: (+1)
   \       0xCA   0x7820             LDRB     R0,[R4, #+0]
   \       0xCC   0x0140             LSLS     R0,R0,#+5
   \       0xCE   0x4430             ADD      R0,R6,R0
   \       0xD0   0x1CA1             ADDS     R1,R4,#+2
   \       0xD2   0xEB18 0x0101      ADDS     R1,R8,R1
   \       0xD6   0x6101             STR      R1,[R0, #+16]
     70              for(i = 0; i < moveLength; i++)
   \       0xD8   0x2000             MOVS     R0,#+0
   \       0xDA   0x4681             MOV      R9,R0
   \                     ??update_12: (+1)
   \       0xDC   0x45C1             CMP      R9,R8
   \       0xDE   0xDA09             BGE.N    ??update_13
     71              {
     72                uartData[i] = uartData[i0 + i];
   \       0xE0   0xEB19 0x0005      ADDS     R0,R9,R5
   \       0xE4   0x4420             ADD      R0,R4,R0
   \       0xE6   0x7880             LDRB     R0,[R0, #+2]
   \       0xE8   0xEB04 0x0109      ADD      R1,R4,R9
   \       0xEC   0x7088             STRB     R0,[R1, #+2]
     73              }
   \       0xEE   0xF119 0x0901      ADDS     R9,R9,#+1
   \       0xF2   0xE7F3             B.N      ??update_12
     74              memset(uartData + moveLength, 0, 150 * sizeof(char));
   \                     ??update_13: (+1)
   \       0xF4   0x2096             MOVS     R0,#+150
   \       0xF6   0x9001             STR      R0,[SP, #+4]
   \       0xF8   0xF05F 0x0A00      MOVS     R10,#+0
   \       0xFC   0xEB04 0x0008      ADD      R0,R4,R8
   \      0x100   0xF110 0x0B02      ADDS     R11,R0,#+2
   \      0x104   0x4652             MOV      R2,R10
   \      0x106   0x9901             LDR      R1,[SP, #+4]
   \      0x108   0x4658             MOV      R0,R11
   \      0x10A   0x.... 0x....      BL       __aeabi_memset
     75            }  
     76            
     77            if(address0 > 100)
   \                     ??update_10: (+1)
   \      0x10E   0x2F65             CMP      R7,#+101
   \      0x110   0xDB04             BLT.N    ??update_14
     78            {
     79               DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&uartData[0]);
   \      0x112   0x7820             LDRB     R0,[R4, #+0]
   \      0x114   0x0140             LSLS     R0,R0,#+5
   \      0x116   0x4430             ADD      R0,R6,R0
   \      0x118   0x1CA1             ADDS     R1,R4,#+2
   \      0x11A   0x6101             STR      R1,[R0, #+16]
     80            }
     81            
     82             
     83            
     84          }
   \                     ??update_14: (+1)
   \      0x11C   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
     85          
     86          
     87          
     88          

   \                                 In section .text, align 4, keep-with-next
     89          unsigned char COdom::Odom_convert(unsigned int start)
     90          { 
   \                     _ZN5COdom12Odom_convertEj: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0002             MOVS     R2,R0
     91            int i;
     92            float kx = 0.73,ky = 0.54;
   \        0x4   0xED9F 0x....      VLDR.W   S0,??DataTable4  ;; 0x3f3ae148
   \        0x8   0xEDDF 0x....      VLDR.W   S1,??DataTable4_1  ;; 0x3f0a3d71
     93              for (int i = 0; i < 4; i++)
   \        0xC   0x2000             MOVS     R0,#+0
   \                     ??Odom_convert_0: (+1)
   \        0xE   0x2804             CMP      R0,#+4
   \       0x10   0xDA2B             BGE.N    ??Odom_convert_1
     94              {
     95                positionX_raw.data[i] = uartData[start+i];
   \       0x12   0x1843             ADDS     R3,R0,R1
   \       0x14   0x4413             ADD      R3,R2,R3
   \       0x16   0x789B             LDRB     R3,[R3, #+2]
   \       0x18   0xEB02 0x0400      ADD      R4,R2,R0
   \       0x1C   0xF884 0x35CC      STRB     R3,[R4, #+1484]
     96                positionY_raw.data[i] = uartData[start+i+4];
   \       0x20   0x1843             ADDS     R3,R0,R1
   \       0x22   0x4413             ADD      R3,R2,R3
   \       0x24   0x799B             LDRB     R3,[R3, #+6]
   \       0x26   0xEB02 0x0400      ADD      R4,R2,R0
   \       0x2A   0xF884 0x35D0      STRB     R3,[R4, #+1488]
     97                positionZ_raw.data[i] = uartData[start+i+8];
   \       0x2E   0x1843             ADDS     R3,R0,R1
   \       0x30   0x4413             ADD      R3,R2,R3
   \       0x32   0x7A9B             LDRB     R3,[R3, #+10]
   \       0x34   0xEB02 0x0400      ADD      R4,R2,R0
   \       0x38   0xF884 0x35D4      STRB     R3,[R4, #+1492]
     98                velX_raw.data[i] = uartData[start+i+12];
   \       0x3C   0x1843             ADDS     R3,R0,R1
   \       0x3E   0x4413             ADD      R3,R2,R3
   \       0x40   0x7B9B             LDRB     R3,[R3, #+14]
   \       0x42   0xEB02 0x0400      ADD      R4,R2,R0
   \       0x46   0xF884 0x35D8      STRB     R3,[R4, #+1496]
     99                velY_raw.data[i] = uartData[start+i+16];
   \       0x4A   0x1843             ADDS     R3,R0,R1
   \       0x4C   0x4413             ADD      R3,R2,R3
   \       0x4E   0x7C9B             LDRB     R3,[R3, #+18]
   \       0x50   0xEB02 0x0400      ADD      R4,R2,R0
   \       0x54   0xF884 0x35DC      STRB     R3,[R4, #+1500]
    100                velZ_raw.data[i] = uartData[start+i+20];
   \       0x58   0x1843             ADDS     R3,R0,R1
   \       0x5A   0x4413             ADD      R3,R2,R3
   \       0x5C   0x7D9B             LDRB     R3,[R3, #+22]
   \       0x5E   0xEB02 0x0400      ADD      R4,R2,R0
   \       0x62   0xF884 0x35E0      STRB     R3,[R4, #+1504]
    101              } 
   \       0x66   0x1C40             ADDS     R0,R0,#+1
   \       0x68   0xE7D1             B.N      ??Odom_convert_0
    102              valid = true;
   \                     ??Odom_convert_1: (+1)
   \       0x6A   0x2001             MOVS     R0,#+1
   \       0x6C   0xF882 0x05A4      STRB     R0,[R2, #+1444]
    103              if(valid)
   \       0x70   0xF892 0x05A4      LDRB     R0,[R2, #+1444]
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD017             BEQ.N    ??Odom_convert_2
    104              {
    105                positionX  = positionX_raw.d; 
   \       0x78   0xF8D2 0x05CC      LDR      R0,[R2, #+1484]
   \       0x7C   0xF8C2 0x05B4      STR      R0,[R2, #+1460]
    106                positionY  = positionY_raw.d;
   \       0x80   0xF8D2 0x05D0      LDR      R0,[R2, #+1488]
   \       0x84   0xF8C2 0x05B8      STR      R0,[R2, #+1464]
    107                positionZ  = positionZ_raw.d;
   \       0x88   0xF8D2 0x05D4      LDR      R0,[R2, #+1492]
   \       0x8C   0xF8C2 0x05BC      STR      R0,[R2, #+1468]
    108                velX       = velX_raw.d;
   \       0x90   0xF8D2 0x05D8      LDR      R0,[R2, #+1496]
   \       0x94   0xF8C2 0x05C0      STR      R0,[R2, #+1472]
    109                velY       = velY_raw.d;
   \       0x98   0xF8D2 0x05DC      LDR      R0,[R2, #+1500]
   \       0x9C   0xF8C2 0x05C4      STR      R0,[R2, #+1476]
    110                velZ       = velZ_raw.d;
   \       0xA0   0xF8D2 0x05E0      LDR      R0,[R2, #+1504]
   \       0xA4   0xF8C2 0x05C8      STR      R0,[R2, #+1480]
    111              }
    112          //    positionX_raw_f = positionFilterX.newData3(positionX, t);
    113          //    positionY_raw_f = positionFilterY.newData3(positionY, t);
    114              positionX_raw_f = positionX*kx/100;
   \                     ??Odom_convert_2: (+1)
   \       0xA8   0xF8D2 0x05B4      LDR      R0,[R2, #+1460]
   \       0xAC   0xEE01 0x0A10      VMOV     S2,R0
   \       0xB0   0xEE21 0x1A00      VMUL.F32 S2,S2,S0
   \       0xB4   0xEDDF 0x....      VLDR.W   S3,??DataTable4_2  ;; 0x42c80000
   \       0xB8   0xEE81 0x1A21      VDIV.F32 S2,S2,S3
   \       0xBC   0xF202 0x50AC      ADDW     R0,R2,#+1452
   \       0xC0   0xED80 0x1A00      VSTR     S2,[R0, #0]
    115              positionY_raw_f = positionY*ky/100;
   \       0xC4   0xF8D2 0x05B8      LDR      R0,[R2, #+1464]
   \       0xC8   0xEE01 0x0A10      VMOV     S2,R0
   \       0xCC   0xEE21 0x1A20      VMUL.F32 S2,S2,S1
   \       0xD0   0xEDDF 0x....      VLDR.W   S3,??DataTable4_2  ;; 0x42c80000
   \       0xD4   0xEE81 0x1A21      VDIV.F32 S2,S2,S3
   \       0xD8   0xF202 0x50B0      ADDW     R0,R2,#+1456
   \       0xDC   0xED80 0x1A00      VSTR     S2,[R0, #0]
    116              return(0);    
   \       0xE0   0x2000             MOVS     R0,#+0
   \       0xE2   0xBC10             POP      {R4}
   \       0xE4   0x4770             BX       LR               ;; return
    117            
    118          }

   \                                 In section .text, align 2, keep-with-next
    119          void COdom::sendPackage()
    120          {
   \                     _ZN5COdom11sendPackageEv: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    121            if(!DMA_isOccupying(DMA_CH9))
   \        0x4   0x2009             MOVS     R0,#+9
   \        0x6   0x.... 0x....      BL       DMA_isOccupying
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xF040 0x80AF      BNE.W    ??sendPackage_0
    122            {
    123              q0.d = 0;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xF8C4 0x05E4      STR      R0,[R4, #+1508]
    124              q1.d = 0;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xF8C4 0x05E8      STR      R0,[R4, #+1512]
    125              q2.d = 0;
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0xF8C4 0x05EC      STR      R0,[R4, #+1516]
    126              q3.d = 0;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xF8C4 0x05F0      STR      R0,[R4, #+1520]
    127              accel_X.d = MPU6000_Raw.accel_x;
   \       0x28   0x....             LDR.N    R0,??DataTable4_7
   \       0x2A   0x6B01             LDR      R1,[R0, #+48]
   \       0x2C   0xF8C4 0x15F4      STR      R1,[R4, #+1524]
    128              accel_Y.d = MPU6000_Raw.accel_y;
   \       0x30   0x6B41             LDR      R1,[R0, #+52]
   \       0x32   0xF8C4 0x15F8      STR      R1,[R4, #+1528]
    129              accel_Z.d = MPU6000_Raw.accel_z;
   \       0x36   0x6B81             LDR      R1,[R0, #+56]
   \       0x38   0xF8C4 0x15FC      STR      R1,[R4, #+1532]
    130              gyro_X.d = MPU6000_Raw.gyro_x;
   \       0x3C   0x6BC1             LDR      R1,[R0, #+60]
   \       0x3E   0xF8C4 0x1600      STR      R1,[R4, #+1536]
    131              gyro_Y.d = MPU6000_Raw.gyro_y;
   \       0x42   0x6C01             LDR      R1,[R0, #+64]
   \       0x44   0xF8C4 0x1604      STR      R1,[R4, #+1540]
    132              gyro_Z.d = MPU6000_Raw.gyro_z;
   \       0x48   0x6C40             LDR      R0,[R0, #+68]
   \       0x4A   0xF8C4 0x0608      STR      R0,[R4, #+1544]
    133              TX.clear();
   \       0x4E   0xF514 0x70DA      ADDS     R0,R4,#+436
   \       0x52   0x.... 0x....      BL       _ZN5COdom3TX_5clearEv
    134              for (int i = 0; i < 4; i++)
   \       0x56   0x2500             MOVS     R5,#+0
   \                     ??sendPackage_1: (+1)
   \       0x58   0x2D04             CMP      R5,#+4
   \       0x5A   0xDA09             BGE.N    ??sendPackage_2
    135              {
    136                TX.add(q0.data[i]); 
   \       0x5C   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x60   0xF890 0x15E4      LDRB     R1,[R0, #+1508]
   \       0x64   0xF514 0x70DA      ADDS     R0,R4,#+436
   \       0x68   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    137              } 
   \       0x6C   0x1C6D             ADDS     R5,R5,#+1
   \       0x6E   0xE7F3             B.N      ??sendPackage_1
    138              for (int i = 0; i < 4; i++)
   \                     ??sendPackage_2: (+1)
   \       0x70   0x2500             MOVS     R5,#+0
   \                     ??sendPackage_3: (+1)
   \       0x72   0x2D04             CMP      R5,#+4
   \       0x74   0xDA09             BGE.N    ??sendPackage_4
    139              {
    140                TX.add(q1.data[i]); 
   \       0x76   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x7A   0xF890 0x15E8      LDRB     R1,[R0, #+1512]
   \       0x7E   0xF514 0x70DA      ADDS     R0,R4,#+436
   \       0x82   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    141              } 
   \       0x86   0x1C6D             ADDS     R5,R5,#+1
   \       0x88   0xE7F3             B.N      ??sendPackage_3
    142              for (int i = 0; i < 4; i++)
   \                     ??sendPackage_4: (+1)
   \       0x8A   0x2500             MOVS     R5,#+0
   \                     ??sendPackage_5: (+1)
   \       0x8C   0x2D04             CMP      R5,#+4
   \       0x8E   0xDA09             BGE.N    ??sendPackage_6
    143              {
    144                TX.add(q2.data[i]); 
   \       0x90   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x94   0xF890 0x15EC      LDRB     R1,[R0, #+1516]
   \       0x98   0xF514 0x70DA      ADDS     R0,R4,#+436
   \       0x9C   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    145              }
   \       0xA0   0x1C6D             ADDS     R5,R5,#+1
   \       0xA2   0xE7F3             B.N      ??sendPackage_5
    146              for (int i = 0; i < 4; i++)
   \                     ??sendPackage_6: (+1)
   \       0xA4   0x2500             MOVS     R5,#+0
   \                     ??sendPackage_7: (+1)
   \       0xA6   0x2D04             CMP      R5,#+4
   \       0xA8   0xDA09             BGE.N    ??sendPackage_8
    147              {
    148                TX.add(q3.data[i]); 
   \       0xAA   0xEB04 0x0005      ADD      R0,R4,R5
   \       0xAE   0xF890 0x15F0      LDRB     R1,[R0, #+1520]
   \       0xB2   0xF514 0x70DA      ADDS     R0,R4,#+436
   \       0xB6   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    149              }
   \       0xBA   0x1C6D             ADDS     R5,R5,#+1
   \       0xBC   0xE7F3             B.N      ??sendPackage_7
    150              
    151              
    152              for (int i = 0; i < 4; i++)
   \                     ??sendPackage_8: (+1)
   \       0xBE   0x2500             MOVS     R5,#+0
   \                     ??sendPackage_9: (+1)
   \       0xC0   0x2D04             CMP      R5,#+4
   \       0xC2   0xDA09             BGE.N    ??sendPackage_10
    153              {
    154                TX.add(accel_X.data[i]); 
   \       0xC4   0xEB04 0x0005      ADD      R0,R4,R5
   \       0xC8   0xF890 0x15F4      LDRB     R1,[R0, #+1524]
   \       0xCC   0xF514 0x70DA      ADDS     R0,R4,#+436
   \       0xD0   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    155              } 
   \       0xD4   0x1C6D             ADDS     R5,R5,#+1
   \       0xD6   0xE7F3             B.N      ??sendPackage_9
    156              for (int i = 0; i < 4; i++)
   \                     ??sendPackage_10: (+1)
   \       0xD8   0x2500             MOVS     R5,#+0
   \                     ??sendPackage_11: (+1)
   \       0xDA   0x2D04             CMP      R5,#+4
   \       0xDC   0xDA09             BGE.N    ??sendPackage_12
    157              {
    158                TX.add(accel_Y.data[i]); 
   \       0xDE   0xEB04 0x0005      ADD      R0,R4,R5
   \       0xE2   0xF890 0x15F8      LDRB     R1,[R0, #+1528]
   \       0xE6   0xF514 0x70DA      ADDS     R0,R4,#+436
   \       0xEA   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    159              }
   \       0xEE   0x1C6D             ADDS     R5,R5,#+1
   \       0xF0   0xE7F3             B.N      ??sendPackage_11
    160              for (int i = 0; i < 4; i++)
   \                     ??sendPackage_12: (+1)
   \       0xF2   0x2500             MOVS     R5,#+0
   \                     ??sendPackage_13: (+1)
   \       0xF4   0x2D04             CMP      R5,#+4
   \       0xF6   0xDA09             BGE.N    ??sendPackage_14
    161              {
    162                TX.add(accel_Z.data[i]); 
   \       0xF8   0xEB04 0x0005      ADD      R0,R4,R5
   \       0xFC   0xF890 0x15FC      LDRB     R1,[R0, #+1532]
   \      0x100   0xF514 0x70DA      ADDS     R0,R4,#+436
   \      0x104   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    163              }
   \      0x108   0x1C6D             ADDS     R5,R5,#+1
   \      0x10A   0xE7F3             B.N      ??sendPackage_13
    164              
    165              
    166              for (int i = 0; i < 4; i++)
   \                     ??sendPackage_14: (+1)
   \      0x10C   0x2500             MOVS     R5,#+0
   \                     ??sendPackage_15: (+1)
   \      0x10E   0x2D04             CMP      R5,#+4
   \      0x110   0xDA09             BGE.N    ??sendPackage_16
    167              {
    168                TX.add(gyro_X.data[i]); 
   \      0x112   0xEB04 0x0005      ADD      R0,R4,R5
   \      0x116   0xF890 0x1600      LDRB     R1,[R0, #+1536]
   \      0x11A   0xF514 0x70DA      ADDS     R0,R4,#+436
   \      0x11E   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    169              } 
   \      0x122   0x1C6D             ADDS     R5,R5,#+1
   \      0x124   0xE7F3             B.N      ??sendPackage_15
    170              for (int i = 0; i < 4; i++)
   \                     ??sendPackage_16: (+1)
   \      0x126   0x2500             MOVS     R5,#+0
   \                     ??sendPackage_17: (+1)
   \      0x128   0x2D04             CMP      R5,#+4
   \      0x12A   0xDA09             BGE.N    ??sendPackage_18
    171              {
    172                TX.add(gyro_Y.data[i]); 
   \      0x12C   0xEB04 0x0005      ADD      R0,R4,R5
   \      0x130   0xF890 0x1604      LDRB     R1,[R0, #+1540]
   \      0x134   0xF514 0x70DA      ADDS     R0,R4,#+436
   \      0x138   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    173              }
   \      0x13C   0x1C6D             ADDS     R5,R5,#+1
   \      0x13E   0xE7F3             B.N      ??sendPackage_17
    174              for (int i = 0; i < 4; i++)
   \                     ??sendPackage_18: (+1)
   \      0x140   0x2500             MOVS     R5,#+0
   \                     ??sendPackage_19: (+1)
   \      0x142   0x2D04             CMP      R5,#+4
   \      0x144   0xDA09             BGE.N    ??sendPackage_20
    175              {
    176                TX.add(gyro_Z.data[i]); 
   \      0x146   0xEB04 0x0005      ADD      R0,R4,R5
   \      0x14A   0xF890 0x1608      LDRB     R1,[R0, #+1544]
   \      0x14E   0xF514 0x70DA      ADDS     R0,R4,#+436
   \      0x152   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    177              }   
   \      0x156   0x1C6D             ADDS     R5,R5,#+1
   \      0x158   0xE7F3             B.N      ??sendPackage_19
    178              TX.add(0x0a);
   \                     ??sendPackage_20: (+1)
   \      0x15A   0x210A             MOVS     R1,#+10
   \      0x15C   0xF514 0x70DA      ADDS     R0,R4,#+436
   \      0x160   0x.... 0x....      BL       _ZN5COdom3TX_3addEc
    179              TX.startDMA_Transmit(this);    
   \      0x164   0x0021             MOVS     R1,R4
   \      0x166   0xF514 0x70DA      ADDS     R0,R4,#+436
   \      0x16A   0x.... 0x....      BL       _ZN5COdom3TX_17startDMA_TransmitEPS_
    180            }
    181          }
   \                     ??sendPackage_0: (+1)
   \      0x16E   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    182          void COdom::TX_::startDMA_Transmit(COdom *tmp)
    183          { 
   \                     _ZN5COdom3TX_17startDMA_TransmitEPS_: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    184            //µ÷ÕûÔ´µØÖ·
    185            DMA0->TCD[tmp->DMA_CHn_Tx].SADDR = DMA_SADDR_SADDR(tmp->TX.data);
   \        0x2   0x....             LDR.N    R2,??DataTable4_6  ;; 0x40009000
   \        0x4   0xF511 0x73DA      ADDS     R3,R1,#+436
   \        0x8   0x784C             LDRB     R4,[R1, #+1]
   \        0xA   0x0164             LSLS     R4,R4,#+5
   \        0xC   0x5113             STR      R3,[R2, R4]
    186            
    187            //ÉèÖÃÖ÷Ñ­»·¼ÆÊýÆ÷ current major loop count
    188            DMA0->TCD[tmp->DMA_CHn_Tx].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(tmp->TX.index);
   \        0xE   0x784B             LDRB     R3,[R1, #+1]
   \       0x10   0x015B             LSLS     R3,R3,#+5
   \       0x12   0x4413             ADD      R3,R2,R3
   \       0x14   0xF8D1 0x459C      LDR      R4,[R1, #+1436]
   \       0x18   0x0464             LSLS     R4,R4,#+17       ;; ZeroExtS R4,R4,#+17,#+17
   \       0x1A   0x0C64             LSRS     R4,R4,#+17
   \       0x1C   0x82DC             STRH     R4,[R3, #+22]
    189            
    190            //ÆðÊ¼Ñ­»·¼ÆÊýÆ÷£¬µ±Ö÷Ñ­»·¼ÆÊýÆ÷ÎªÁãµÄÊ±ºò£¬½«×°ÔØÆðÊ¼Ñ­»·¼ÆÊýÆ÷µÄÖµ
    191            DMA0->TCD[tmp->DMA_CHn_Tx].BITER_ELINKNO = DMA_CITER_ELINKNO_CITER(tmp->TX.index);
   \       0x1E   0x784B             LDRB     R3,[R1, #+1]
   \       0x20   0x015B             LSLS     R3,R3,#+5
   \       0x22   0x441A             ADD      R2,R2,R3
   \       0x24   0xF8D1 0x359C      LDR      R3,[R1, #+1436]
   \       0x28   0x045B             LSLS     R3,R3,#+17       ;; ZeroExtS R3,R3,#+17,#+17
   \       0x2A   0x0C5B             LSRS     R3,R3,#+17
   \       0x2C   0x83D3             STRH     R3,[R2, #+30]
    192              
    193            DMA_EnableReq(tmp->DMA_CHn_Tx);
   \       0x2E   0x....             LDR.N    R3,??DataTable4_8  ;; 0x4000800c
   \       0x30   0x681C             LDR      R4,[R3, #+0]
   \       0x32   0x2501             MOVS     R5,#+1
   \       0x34   0xF991 0x2001      LDRSB    R2,[R1, #+1]
   \       0x38   0x4095             LSLS     R5,R5,R2
   \       0x3A   0x432C             ORRS     R4,R5,R4
   \       0x3C   0x601C             STR      R4,[R3, #+0]
    194          }
   \       0x3E   0xBC30             POP      {R4,R5}
   \       0x40   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x3F3A'E148        DC32     0x3f3ae148

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x3F0A'3D71        DC32     0x3f0a3d71

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x42C8'0000        DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     `Odom_Init()::static guard for Odom_static`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x....'....        DC32     `Odom_Init()::Odom_static`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     Odom

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x4000'9000        DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x....'....        DC32     MPU6000_Raw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0x4000'800C        DC32     0x4000800c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CJumpFilter::CJumpFilter()
       8   COdom::COdom()
         8   -> CJumpFilter::CJumpFilter()
         8   -> Coordinate::Coordinate()
       4   COdom::Odom_convert(unsigned int)
       0   COdom::TX_::add(char)
      24   COdom::TX_::clear()
        24   -> __aeabi_memset
       8   COdom::TX_::startDMA_Transmit(COdom *)
      16   COdom::sendPackage()
        16   -> COdom::TX_::add(char)
        16   -> COdom::TX_::clear()
        16   -> COdom::TX_::startDMA_Transmit(COdom *)
        16   -> DMA_isOccupying
      48   COdom::update()
        48   -> COdom::Odom_convert(unsigned int)
        48   -> __aeabi_memset
       8   Coordinate::Coordinate()
         8   -> CoordinateElement::CoordinateElement()
       0   CoordinateElement::CoordinateElement()
       0   DMA_isOccupying
      16   Odom_Init()
        16   -> CJumpFilter::setParameter(float, int)
        16   -> COdom::COdom()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
      20  CJumpFilter::CJumpFilter()
      54  COdom::COdom()
     230  COdom::Odom_convert(unsigned int)
      14  COdom::TX_::add(char)
      28  COdom::TX_::clear()
      66  COdom::TX_::startDMA_Transmit(COdom *)
     368  COdom::sendPackage()
     288  COdom::update()
      30  Coordinate::Coordinate()
      28  CoordinateElement::CoordinateElement()
      20  DMA_isOccupying
       4  Odom
     124  Odom_Init()
    1800  Odom_static
       9  -- Other

 
     8 bytes in section .ARM.exidx
 1 805 bytes in section .bss
 1 306 bytes in section .text
 
 1 112 bytes of CODE  memory (+ 194 bytes shared)
     8 bytes of CONST memory
 1 805 bytes of DATA  memory

Errors: none
Warnings: 4
