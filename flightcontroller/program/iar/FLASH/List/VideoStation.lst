###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         30/Jul/2018  16:04:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\VideoStation.cpp
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW51E1.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\VideoStation.cpp
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\inc\c\DLib_Config_Full.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Core\Include\ -I
#        D:\iar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4 --text_out utf8
#        --utf8_text_in)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List\VideoStation.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj\VideoStation.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\VideoStation.cpp
      1          #include "VideoStation.h"

   \                                 In section .text, align 4
   \   __interwork __softfp bool DMA_isOccupying(uint8)
   \                     DMA_isOccupying: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0x4803             LDR.N    R0,??DMA_isOccupying_0  ;; 0x4000800c
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x40C8             LSRS     R0,R0,R1
   \        0x8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \        0xC   0x4770             BX       LR               ;; return
   \        0xE   0xBF00             Nop      
   \                     ??DMA_isOccupying_0:
   \       0x10   0x4000'800C        DC32     0x4000800c

   \                                 In section .text, align 4
   \   __code __interwork __softfp CJumpFilter::CJumpFilter()
   \                     _ZN11CJumpFilterC1Ev: (+1)
   \        0x0   0x4903             LDR.N    R1,??CJumpFilter_0  ;; 0x42c80000
   \        0x2   0x6081             STR      R1,[R0, #+8]
   \        0x4   0x2132             MOVS     R1,#+50
   \        0x6   0x6281             STR      R1,[R0, #+40]
   \        0x8   0xF05F 0x517E      MOVS     R1,#+1065353216
   \        0xC   0x62C1             STR      R1,[R0, #+44]
   \        0xE   0x4770             BX       LR               ;; return
   \                     ??CJumpFilter_0:
   \       0x10   0x42C8'0000        DC32     0x42c80000

   \                                 In section .text, align 4
   \   __code __interwork __softfp CoordinateElement::CoordinateElement()
   \                     _ZN17CoordinateElementC1Ev: (+1)
   \        0x0   0x4903             LDR.N    R1,??CoordinateElement_0  ;; 0x3f4ccccd
   \        0x2   0x6101             STR      R1,[R0, #+16]
   \        0x4   0x4903             LDR.N    R1,??CoordinateElement_0+0x4  ;; 0x461c4000
   \        0x6   0x6141             STR      R1,[R0, #+20]
   \        0x8   0x4903             LDR.N    R1,??CoordinateElement_0+0x8  ;; 0xc61c4000
   \        0xA   0x6181             STR      R1,[R0, #+24]
   \        0xC   0x4770             BX       LR               ;; return
   \        0xE   0xBF00             Nop      
   \                     ??CoordinateElement_0:
   \       0x10   0x3F4C'CCCD        DC32     0x3f4ccccd
   \       0x14   0x461C'4000        DC32     0x461c4000
   \       0x18   0xC61C'4000        DC32     0xc61c4000

   \                                 In section .text, align 2
   \   __code __interwork __softfp Coordinate::Coordinate()
   \                     _ZN10CoordinateC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \        0xA   0xF114 0x001C      ADDS     R0,R4,#+28
   \        0xE   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x12   0xF114 0x0038      ADDS     R0,R4,#+56
   \       0x16   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void CVideoStation::TX_::add(char)
   \                     _ZN13CVideoStation3TX_3addEc: (+1)
   \        0x0   0xF8D0 0x212C      LDR      R2,[R0, #+300]
   \        0x4   0x1C53             ADDS     R3,R2,#+1
   \        0x6   0xF8C0 0x312C      STR      R3,[R0, #+300]
   \        0xA   0x5481             STRB     R1,[R0, R2]
   \        0xC   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void CVideoStation::TX_::clear()
   \                     _ZN13CVideoStation3TX_5clearEv: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0xF44F 0x7596      MOV      R5,#+300
   \        0x8   0x2600             MOVS     R6,#+0
   \        0xA   0x0027             MOVS     R7,R4
   \        0xC   0x0032             MOVS     R2,R6
   \        0xE   0x0029             MOVS     R1,R5
   \       0x10   0x0038             MOVS     R0,R7
   \       0x12   0x.... 0x....      BL       __aeabi_memset
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xF8C4 0x012C      STR      R0,[R4, #+300]
   \       0x1C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4
   \   __code __interwork __softfp CVideoStation::CVideoStation()
   \                     _ZN13CVideoStationC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0xF204 0x70F4      ADDW     R0,R4,#+2036
   \        0xC   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x10   0xF604 0x002C      ADDW     R0,R4,#+2092
   \       0x14   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x18   0xF604 0x0064      ADDW     R0,R4,#+2148
   \       0x1C   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x20   0xF604 0x009C      ADDW     R0,R4,#+2204
   \       0x24   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x28   0xF604 0x00E4      ADDW     R0,R4,#+2276
   \       0x2C   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \       0x30   0xF604 0x1038      ADDW     R0,R4,#+2360
   \       0x34   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \       0x38   0xF604 0x108C      ADDW     R0,R4,#+2444
   \       0x3C   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \       0x40   0xED9F 0x8A0C      VLDR.W   S16,??CVideoStation_0  ;; 0x3e19999a
   \       0x44   0xEEF3 0x8A04      VMOV.F32 S17,#20.0
   \       0x48   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \       0x4C   0x2164             MOVS     R1,#+100
   \       0x4E   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x52   0xF204 0x70F4      ADDW     R0,R4,#+2036
   \       0x56   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfif
   \       0x5A   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \       0x5E   0x2164             MOVS     R1,#+100
   \       0x60   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x64   0xF604 0x002C      ADDW     R0,R4,#+2092
   \       0x68   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfif
   \       0x6C   0x0020             MOVS     R0,R4
   \                     ??CVideoStation_1: (+1)
   \       0x6E   0xECBD 0x8B02      VPOP     {D8}
   \       0x72   0xBD10             POP      {R4,PC}          ;; return
   \                     ??CVideoStation_0:
   \       0x74   0x3E19'999A        DC32     0x3e19999a
      2          

   \                                 In section .bss, align 4
      3          CVideoStation *videoStation;
   \                     videoStation:
   \        0x0                      DS8 4
      4          
      5          

   \                                 In section .text, align 4, keep-with-next
      6          void VideoStation_Init()
      7          {
   \                     _Z17VideoStation_Initv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0x.... 0x....      LDR.W    R4,??DataTable4_3
   \        0xA   0x7820             LDRB     R0,[R4, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD105             BNE.N    ??VideoStation_Init_0
      8            static CVideoStation videoStation_0;
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable4_4
   \       0x14   0x.... 0x....      BL       _ZN13CVideoStationC1Ev
   \       0x18   0x2001             MOVS     R0,#+1
   \       0x1A   0x7020             STRB     R0,[R4, #+0]
      9            videoStation = &videoStation_0;
   \                     ??VideoStation_Init_0: (+1)
   \       0x1C   0x.... 0x....      LDR.W    R4,??DataTable4_5
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable4_4
   \       0x24   0x6020             STR      R0,[R4, #+0]
     10            
     11            videoStation->DMA_CHn_Rx = DMA_CH6;
   \       0x26   0x2006             MOVS     R0,#+6
   \       0x28   0x6821             LDR      R1,[R4, #+0]
   \       0x2A   0x7008             STRB     R0,[R1, #+0]
     12            videoStation->DMA_CHn_Tx = DMA_CH7;
   \       0x2C   0x2007             MOVS     R0,#+7
   \       0x2E   0x6821             LDR      R1,[R4, #+0]
   \       0x30   0x7048             STRB     R0,[R1, #+1]
     13            
     14            videoStation->positionFilterX.setParameter(100, 100);
   \       0x32   0xED9F 0x....      VLDR.W   S16,??DataTable1  ;; 0x42c80000
   \       0x36   0x2164             MOVS     R1,#+100
   \       0x38   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x3C   0x6820             LDR      R0,[R4, #+0]
   \       0x3E   0xF600 0x0064      ADDW     R0,R0,#+2148
   \       0x42   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     15            videoStation->positionFilterX.maxValue = 240;
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0x.... 0x....      LDR.W    R1,??DataTable4_6  ;; 0x43700000
   \       0x4C   0xF8C0 0x1870      STR      R1,[R0, #+2160]
     16            videoStation->positionFilterX.minValue = 0;
   \       0x50   0x6820             LDR      R0,[R4, #+0]
   \       0x52   0x2100             MOVS     R1,#+0
   \       0x54   0xF8C0 0x1874      STR      R1,[R0, #+2164]
     17            
     18            
     19            videoStation->positionFilterY.setParameter(100, 100);
   \       0x58   0x2164             MOVS     R1,#+100
   \       0x5A   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x5E   0x6820             LDR      R0,[R4, #+0]
   \       0x60   0xF600 0x009C      ADDW     R0,R0,#+2204
   \       0x64   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     20            videoStation->positionFilterY.maxValue = 320;
   \       0x68   0x6820             LDR      R0,[R4, #+0]
   \       0x6A   0x.... 0x....      LDR.W    R1,??DataTable4_15  ;; 0x43a00000
   \       0x6E   0xF8C0 0x18A8      STR      R1,[R0, #+2216]
     21            videoStation->positionFilterY.minValue = 0;
   \       0x72   0x6820             LDR      R0,[R4, #+0]
   \       0x74   0x2100             MOVS     R1,#+0
   \       0x76   0xF8C0 0x18AC      STR      R1,[R0, #+2220]
     22          }
   \                     ??VideoStation_Init_1: (+1)
   \       0x7A   0xECBD 0x8B02      VPOP     {D8}
   \       0x7E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 4
   \                     `VideoStation_Init()::videoStation_0`:
   \        0x0                      DS8 2856
     23          
     24          

   \                                 In section .text, align 4, keep-with-next
     25          void CVideoStation::updateUart()
     26          {
   \                     _ZN13CVideoStation10updateUartEv: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xED2D 0x8B02      VPUSH    {D8}
   \        0x8   0xB084             SUB      SP,SP,#+16
   \        0xA   0x0004             MOVS     R4,R0
     27            bool newPackage = false;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xF88D 0x0000      STRB     R0,[SP, #+0]
     28            int i = 0, i0 = 0;
   \       0x12   0xF05F 0x0A00      MOVS     R10,#+0
   \       0x16   0x2500             MOVS     R5,#+0
     29            int address0 = (DMA0->TCD[DMA_CHn_Rx].DADDR) - (uint32)(&uartData[0]);
   \       0x18   0x.... 0x....      LDR.W    R6,??DataTable4_7  ;; 0x40009000
   \       0x1C   0x7820             LDRB     R0,[R4, #+0]
   \       0x1E   0x0140             LSLS     R0,R0,#+5
   \       0x20   0x4430             ADD      R0,R6,R0
   \       0x22   0x6900             LDR      R0,[R0, #+16]
   \       0x24   0x1CA7             ADDS     R7,R4,#+2
   \       0x26   0x1BC7             SUBS     R7,R0,R7
     30            int moveLength = 0;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x9001             STR      R0,[SP, #+4]
     31            const int packageLength = 6;
   \       0x2C   0x2006             MOVS     R0,#+6
   \       0x2E   0x9003             STR      R0,[SP, #+12]
     32            
     33            bool loopFlag = false;
   \       0x30   0xF05F 0x0800      MOVS     R8,#+0
     34            byteInterval = t - byte_lastTime;
   \       0x34   0x.... 0x....      LDR.W    R9,??DataTable4_8
   \       0x38   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \       0x3C   0xF8D4 0x07D8      LDR      R0,[R4, #+2008]
   \       0x40   0x1A09             SUBS     R1,R1,R0
   \       0x42   0xF8C4 0x17D4      STR      R1,[R4, #+2004]
     35            
     36            if(byteInterval > 300 || !positionFilterX.valid || !positionFilterY.valid)
   \       0x46   0xF8D4 0x07D4      LDR      R0,[R4, #+2004]
   \       0x4A   0xF240 0x112D      MOVW     R1,#+301
   \       0x4E   0x4288             CMP      R0,R1
   \       0x50   0xDA07             BGE.N    ??updateUart_0
   \       0x52   0xF894 0x0898      LDRB     R0,[R4, #+2200]
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD003             BEQ.N    ??updateUart_0
   \       0x5A   0xF894 0x08D0      LDRB     R0,[R4, #+2256]
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD102             BNE.N    ??updateUart_1
     37            {
     38              valid = false;
   \                     ??updateUart_0: (+1)
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0xF884 0x09E0      STRB     R0,[R4, #+2528]
     39            }
     40            
     41            if(byte_lastAddress != address0)
   \                     ??updateUart_1: (+1)
   \       0x68   0xF8D4 0x07DC      LDR      R0,[R4, #+2012]
   \       0x6C   0x42B8             CMP      R0,R7
   \       0x6E   0xD001             BEQ.N    ??updateUart_2
     42            {
     43              byte_lastAddress = address0;
   \       0x70   0xF8C4 0x77DC      STR      R7,[R4, #+2012]
     44            }
     45            for(; i < address0; i++)
   \                     ??updateUart_2: (+1)
   \       0x74   0x45BA             CMP      R10,R7
   \       0x76   0xF280 0x80C7      BGE.W    ??updateUart_3
     46            {
     47              for(; uartData[i] != 'e'; i++)
   \                     ??updateUart_4: (+1)
   \       0x7A   0xEB04 0x000A      ADD      R0,R4,R10
   \       0x7E   0x7880             LDRB     R0,[R0, #+2]
   \       0x80   0x2865             CMP      R0,#+101
   \       0x82   0xD007             BEQ.N    ??updateUart_5
     48              {
     49                if(i >= address0)
   \       0x84   0x45BA             CMP      R10,R7
   \       0x86   0xDB02             BLT.N    ??updateUart_6
     50                {
     51                  loopFlag = true;
   \       0x88   0x2001             MOVS     R0,#+1
   \       0x8A   0x4680             MOV      R8,R0
     52                  break;
   \       0x8C   0xE002             B.N      ??updateUart_5
     53                }
     54              }
   \                     ??updateUart_6: (+1)
   \       0x8E   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \       0x92   0xE7F2             B.N      ??updateUart_4
     55                
     56              if(loopFlag)
   \                     ??updateUart_5: (+1)
   \       0x94   0x4640             MOV      R0,R8
   \       0x96   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x98   0x2800             CMP      R0,#+0
   \       0x9A   0xF040 0x80B5      BNE.W    ??updateUart_3
     57              {
     58                break;
     59              }
     60              if(i - i0 < packageLength - 1)
   \                     ??updateUart_7: (+1)
   \       0x9E   0xEBBA 0x0005      SUBS     R0,R10,R5
   \       0xA2   0x2805             CMP      R0,#+5
   \       0xA4   0xF2C0 0x80AD      BLT.W    ??updateUart_8
     61              {
     62                continue;
     63              }
     64              
     65          //    char checkSum = 0; //×¢ÒâÃ¿¸ö°üµÄcheckSum¶¼ÒªÇåÁã
     66          //    for(int k = i - (packageLength - 1); k < i - 1; k++)
     67          //    {
     68          //      checkSum += uartData[k];
     69          //    }
     70          //    if(checkSum != uartData[i-1])
     71          //    {
     72          //      continue;
     73          //    }
     74              byte_lastTime = t;
   \                     ??updateUart_9: (+1)
   \       0xA8   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xAC   0xF8C4 0x07D8      STR      R0,[R4, #+2008]
     75              byte_lastAddress = address0;
   \       0xB0   0xF8C4 0x77DC      STR      R7,[R4, #+2012]
     76              i0 = i;    
   \       0xB4   0x4655             MOV      R5,R10
     77              
     78              int packageTop = i - packageLength + 1;
   \       0xB6   0xF1BA 0x0B05      SUBS     R11,R10,#+5
     79              valid = (bool)(uartData[packageTop] - '0');
   \       0xBA   0xEB04 0x000B      ADD      R0,R4,R11
   \       0xBE   0x7880             LDRB     R0,[R0, #+2]
   \       0xC0   0x3830             SUBS     R0,R0,#+48
   \       0xC2   0x2800             CMP      R0,#+0
   \       0xC4   0xD001             BEQ.N    ??updateUart_10
   \       0xC6   0x2001             MOVS     R0,#+1
   \       0xC8   0xE000             B.N      ??updateUart_11
   \                     ??updateUart_10: (+1)
   \       0xCA   0x2000             MOVS     R0,#+0
   \                     ??updateUart_11: (+1)
   \       0xCC   0xF884 0x09E0      STRB     R0,[R4, #+2528]
     80              packageTop += 1;
   \       0xD0   0xF11B 0x0B01      ADDS     R11,R11,#+1
     81              
     82              switch(uartData[packageTop] - '0')
   \       0xD4   0xEB04 0x000B      ADD      R0,R4,R11
   \       0xD8   0x7880             LDRB     R0,[R0, #+2]
   \       0xDA   0x3830             SUBS     R0,R0,#+48
   \       0xDC   0x2800             CMP      R0,#+0
   \       0xDE   0xD005             BEQ.N    ??updateUart_12
   \       0xE0   0x2802             CMP      R0,#+2
   \       0xE2   0xD00B             BEQ.N    ??updateUart_13
   \       0xE4   0xD306             BCC.N    ??updateUart_14
   \       0xE6   0x2803             CMP      R0,#+3
   \       0xE8   0xD00C             BEQ.N    ??updateUart_15
   \       0xEA   0xE00E             B.N      ??updateUart_16
     83              {
     84              case 0:
     85                remoteState = searchScreen;
   \                     ??updateUart_12: (+1)
   \       0xEC   0x2000             MOVS     R0,#+0
   \       0xEE   0xF884 0x09ED      STRB     R0,[R4, #+2541]
     86                break;
   \       0xF2   0xE00A             B.N      ??updateUart_16
     87              case 1:
     88                remoteState = searchTarget;
   \                     ??updateUart_14: (+1)
   \       0xF4   0x2001             MOVS     R0,#+1
   \       0xF6   0xF884 0x09ED      STRB     R0,[R4, #+2541]
     89                break;
   \       0xFA   0xE006             B.N      ??updateUart_16
     90              case 2:
     91                remoteState = foundTarget;
   \                     ??updateUart_13: (+1)
   \       0xFC   0x2002             MOVS     R0,#+2
   \       0xFE   0xF884 0x09ED      STRB     R0,[R4, #+2541]
     92                break;
   \      0x102   0xE002             B.N      ??updateUart_16
     93              case 3:
     94                remoteState = idel;
   \                     ??updateUart_15: (+1)
   \      0x104   0x2003             MOVS     R0,#+3
   \      0x106   0xF884 0x09ED      STRB     R0,[R4, #+2541]
     95                break;
     96              }
     97              if(myState == searchScreen  && (t - idelTime > 1000))
   \                     ??updateUart_16: (+1)
   \      0x10A   0xF894 0x09EC      LDRB     R0,[R4, #+2540]
   \      0x10E   0x2800             CMP      R0,#+0
   \      0x110   0xD10B             BNE.N    ??updateUart_17
   \      0x112   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \      0x116   0xF8D4 0x09F0      LDR      R0,[R4, #+2544]
   \      0x11A   0x1A09             SUBS     R1,R1,R0
   \      0x11C   0xF240 0x30E9      MOVW     R0,#+1001
   \      0x120   0x4281             CMP      R1,R0
   \      0x122   0xDB02             BLT.N    ??updateUart_17
     98              {
     99                myState = searchTarget;
   \      0x124   0x2001             MOVS     R0,#+1
   \      0x126   0xF884 0x09EC      STRB     R0,[R4, #+2540]
    100              }
    101              
    102              if(valid)
   \                     ??updateUart_17: (+1)
   \      0x12A   0xF894 0x09E0      LDRB     R0,[R4, #+2528]
   \      0x12E   0x2800             CMP      R0,#+0
   \      0x130   0xD067             BEQ.N    ??updateUart_8
    103              {
    104                float distanceCmaera = 1.54;//Navigation->DesiredDistanceToScreen - EKF_AHRS.fusion.position.x + 0.1; //0.1ÊÇÏà»úÀë³¬Éù²¨µÄ¾àÀë
   \      0x132   0xED9F 0x....      VLDR.W   S16,??DataTable4  ;; 0x3fc51eb8
    105                
    106                packageTop += 1;
   \      0x136   0xF11B 0x0B01      ADDS     R11,R11,#+1
    107                positionX_raw = (int16)(uartData[packageTop + 1] << 8 | uartData[packageTop]); //x×ø±ê µ¥Î»ÏñËØ
   \      0x13A   0xEB04 0x000B      ADD      R0,R4,R11
   \      0x13E   0x78C0             LDRB     R0,[R0, #+3]
   \      0x140   0xEB04 0x010B      ADD      R1,R4,R11
   \      0x144   0x7889             LDRB     R1,[R1, #+2]
   \      0x146   0xEA51 0x2100      ORRS     R1,R1,R0, LSL #+8
   \      0x14A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \      0x14C   0xEE00 0x1A10      VMOV     S0,R1
   \      0x150   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \      0x154   0xF204 0x70E4      ADDW     R0,R4,#+2020
   \      0x158   0xED80 0x0A00      VSTR     S0,[R0, #0]
    108                positionX_F = positionFilterX.newData3(positionX_raw, t);
   \      0x15C   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \      0x160   0xF8D4 0x07E4      LDR      R0,[R4, #+2020]
   \      0x164   0xEE00 0x0A10      VMOV     S0,R0
   \      0x168   0xF604 0x0064      ADDW     R0,R4,#+2148
   \      0x16C   0x.... 0x....      BL       _ZN11CJumpFilter8newData3Efi
   \      0x170   0xF604 0x00D4      ADDW     R0,R4,#+2260
   \      0x174   0xED80 0x0A00      VSTR     S0,[R0, #0]
    109                positionX_A = (positionX_F - 120) * distanceCmaera / 192;
   \      0x178   0xF8D4 0x08D4      LDR      R0,[R4, #+2260]
   \      0x17C   0xEE00 0x0A10      VMOV     S0,R0
   \      0x180   0xEDDF 0x....      VLDR.W   S1,??DataTable4_1  ;; 0xc2f00000
   \      0x184   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \      0x188   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \      0x18C   0xEDDF 0x....      VLDR.W   S1,??DataTable4_16  ;; 0x43400000
   \      0x190   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \      0x194   0xF604 0x00DC      ADDW     R0,R4,#+2268
   \      0x198   0xED80 0x0A00      VSTR     S0,[R0, #0]
    110                
    111                packageTop += 2;
   \      0x19C   0xF11B 0x0B02      ADDS     R11,R11,#+2
    112                positionY_raw = (int16)(uartData[packageTop + 1] << 8 | uartData[packageTop]); //y×ø±ê
   \      0x1A0   0xEB04 0x000B      ADD      R0,R4,R11
   \      0x1A4   0x78C0             LDRB     R0,[R0, #+3]
   \      0x1A6   0xEB04 0x010B      ADD      R1,R4,R11
   \      0x1AA   0x7889             LDRB     R1,[R1, #+2]
   \      0x1AC   0xEA51 0x2100      ORRS     R1,R1,R0, LSL #+8
   \      0x1B0   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \      0x1B2   0xEE00 0x1A10      VMOV     S0,R1
   \      0x1B6   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \      0x1BA   0xF204 0x70E8      ADDW     R0,R4,#+2024
   \      0x1BE   0xED80 0x0A00      VSTR     S0,[R0, #0]
    113                positionY_F = positionFilterY.newData3(positionY_raw, t);
   \      0x1C2   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \      0x1C6   0xF8D4 0x07E8      LDR      R0,[R4, #+2024]
   \      0x1CA   0xEE00 0x0A10      VMOV     S0,R0
   \      0x1CE   0xF604 0x009C      ADDW     R0,R4,#+2204
   \      0x1D2   0x.... 0x....      BL       _ZN11CJumpFilter8newData3Efi
   \      0x1D6   0xF604 0x00D8      ADDW     R0,R4,#+2264
   \      0x1DA   0xED80 0x0A00      VSTR     S0,[R0, #0]
    114                positionY_A = (positionY_F - 160) * distanceCmaera / 192;
   \      0x1DE   0xF8D4 0x08D8      LDR      R0,[R4, #+2264]
   \      0x1E2   0xEE00 0x0A10      VMOV     S0,R0
   \      0x1E6   0xEDDF 0x....      VLDR.W   S1,??DataTable4_2  ;; 0xc3200000
   \      0x1EA   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \      0x1EE   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \      0x1F2   0xEDDF 0x....      VLDR.W   S1,??DataTable4_16  ;; 0x43400000
   \      0x1F6   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \      0x1FA   0xF604 0x00E0      ADDW     R0,R4,#+2272
   \      0x1FE   0xED80 0x0A00      VSTR     S0,[R0, #0]
    115              }
    116            }
   \                     ??updateUart_8: (+1)
   \      0x202   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \      0x206   0xE735             B.N      ??updateUart_2
    117            if(valid && !validLast)
   \                     ??updateUart_3: (+1)
   \      0x208   0xF894 0x09E0      LDRB     R0,[R4, #+2528]
   \      0x20C   0x2800             CMP      R0,#+0
   \      0x20E   0xD008             BEQ.N    ??updateUart_18
   \      0x210   0xF894 0x09E1      LDRB     R0,[R4, #+2529]
   \      0x214   0x2800             CMP      R0,#+0
   \      0x216   0xD104             BNE.N    ??updateUart_18
    118            {
    119              validTime = t;
   \      0x218   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x21C   0xF8C4 0x09E8      STR      R0,[R4, #+2536]
   \      0x220   0xE00B             B.N      ??updateUart_19
    120            }
    121            else if(!valid && validLast)
   \                     ??updateUart_18: (+1)
   \      0x222   0xF894 0x09E0      LDRB     R0,[R4, #+2528]
   \      0x226   0x2800             CMP      R0,#+0
   \      0x228   0xD107             BNE.N    ??updateUart_19
   \      0x22A   0xF894 0x09E1      LDRB     R0,[R4, #+2529]
   \      0x22E   0x2800             CMP      R0,#+0
   \      0x230   0xD003             BEQ.N    ??updateUart_19
    122            {
    123              invalidTime = t;
   \      0x232   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x236   0xF8C4 0x09E4      STR      R0,[R4, #+2532]
    124            }
    125            validLast = valid;
   \                     ??updateUart_19: (+1)
   \      0x23A   0xF894 0x09E0      LDRB     R0,[R4, #+2528]
   \      0x23E   0xF884 0x09E1      STRB     R0,[R4, #+2529]
    126              
    127            moveLength = (DMA0->TCD[DMA_CHn_Rx].DADDR - (uint32)&uartData[0]) - i0;
   \      0x242   0x7820             LDRB     R0,[R4, #+0]
   \      0x244   0x0140             LSLS     R0,R0,#+5
   \      0x246   0x4430             ADD      R0,R6,R0
   \      0x248   0x6900             LDR      R0,[R0, #+16]
   \      0x24A   0xF114 0x0902      ADDS     R9,R4,#+2
   \      0x24E   0xEBB0 0x0909      SUBS     R9,R0,R9
   \      0x252   0xEBB9 0x0905      SUBS     R9,R9,R5
    128            if(moveLength < 0) moveLength = 0;
   \      0x256   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x25A   0xD501             BPL.N    ??updateUart_20
   \      0x25C   0x2000             MOVS     R0,#+0
   \      0x25E   0x4681             MOV      R9,R0
    129             
    130            DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&uartData[0] + moveLength);
   \                     ??updateUart_20: (+1)
   \      0x260   0x7820             LDRB     R0,[R4, #+0]
   \      0x262   0x0140             LSLS     R0,R0,#+5
   \      0x264   0x4430             ADD      R0,R6,R0
   \      0x266   0x1CA1             ADDS     R1,R4,#+2
   \      0x268   0xEB19 0x0101      ADDS     R1,R9,R1
   \      0x26C   0x6101             STR      R1,[R0, #+16]
    131            for(i = 0; i < moveLength; i++)
   \      0x26E   0xF05F 0x0B00      MOVS     R11,#+0
   \                     ??updateUart_21: (+1)
   \      0x272   0x45CB             CMP      R11,R9
   \      0x274   0xDA09             BGE.N    ??updateUart_22
    132            {
    133              uartData[i] = uartData[i0 + i];
   \      0x276   0xEB1B 0x0005      ADDS     R0,R11,R5
   \      0x27A   0x4420             ADD      R0,R4,R0
   \      0x27C   0x7880             LDRB     R0,[R0, #+2]
   \      0x27E   0xEB04 0x010B      ADD      R1,R4,R11
   \      0x282   0x7088             STRB     R0,[R1, #+2]
    134            }
   \      0x284   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \      0x288   0xE7F3             B.N      ??updateUart_21
    135            memset(uartData + moveLength, 0, 150 * sizeof(char));
   \                     ??updateUart_22: (+1)
   \      0x28A   0x2096             MOVS     R0,#+150
   \      0x28C   0x9002             STR      R0,[SP, #+8]
   \      0x28E   0x2000             MOVS     R0,#+0
   \      0x290   0x9001             STR      R0,[SP, #+4]
   \      0x292   0xEB04 0x0009      ADD      R0,R4,R9
   \      0x296   0xF110 0x0A02      ADDS     R10,R0,#+2
   \      0x29A   0x9A01             LDR      R2,[SP, #+4]
   \      0x29C   0x9902             LDR      R1,[SP, #+8]
   \      0x29E   0x4650             MOV      R0,R10
   \      0x2A0   0x.... 0x....      BL       __aeabi_memset
    136            if(address0 > 100)
   \      0x2A4   0x2F65             CMP      R7,#+101
   \      0x2A6   0xDB04             BLT.N    ??updateUart_23
    137            {
    138              DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&uartData[0]);
   \      0x2A8   0x7820             LDRB     R0,[R4, #+0]
   \      0x2AA   0x0140             LSLS     R0,R0,#+5
   \      0x2AC   0x4430             ADD      R0,R6,R0
   \      0x2AE   0x1CA1             ADDS     R1,R4,#+2
   \      0x2B0   0x6101             STR      R1,[R0, #+16]
    139            }
    140          }
   \                     ??updateUart_23: (+1)
   \                     ??updateUart_24: (+1)
   \      0x2B2   0xB004             ADD      SP,SP,#+16
   \      0x2B4   0xECBD 0x8B02      VPOP     {D8}
   \      0x2B8   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    141          
    142          

   \                                 In section .text, align 4, keep-with-next
    143          void CVideoStation::PIT_isr()
    144          {
   \                     _ZN13CVideoStation7PIT_isrEv: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0x0004             MOVS     R4,R0
    145            this->velFilter_x.checkIsNewData(t);
   \        0x8   0x....             LDR.N    R5,??DataTable4_8
   \        0xA   0x6829             LDR      R1,[R5, #+0]
   \        0xC   0xF204 0x70F4      ADDW     R0,R4,#+2036
   \       0x10   0x.... 0x....      BL       _ZN11CJumpFilter14checkIsNewDataEi
    146            this->velFilter_y.checkIsNewData(t);
   \       0x14   0x6829             LDR      R1,[R5, #+0]
   \       0x16   0xF604 0x002C      ADDW     R0,R4,#+2092
   \       0x1A   0x.... 0x....      BL       _ZN11CJumpFilter14checkIsNewDataEi
    147            velFilter_x.accumulate(IMU_acc_E.x * 0.002);
   \       0x1E   0x....             LDR.N    R5,??DataTable4_9
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0x.... 0x....      BL       _ZN17CoordinateElementcvfEv
   \       0x26   0xED9F 0x....      VLDR.W   D8,??DataTable4_17
   \       0x2A   0xEE10 0x0A10      VMOV     R0,S0
   \       0x2E   0x.... 0x....      BL       __aeabi_f2d
   \       0x32   0xEC53 0x2B18      VMOV     R2,R3,D8
   \       0x36   0x.... 0x....      BL       __aeabi_dmul
   \       0x3A   0x.... 0x....      BL       __aeabi_d2f
   \       0x3E   0xEE00 0x0A10      VMOV     S0,R0
   \       0x42   0xF204 0x70F4      ADDW     R0,R4,#+2036
   \       0x46   0x.... 0x....      BL       _ZN11CJumpFilter10accumulateEf
    148            velFilter_y.accumulate(IMU_acc_E.y * 0.002);
   \       0x4A   0xF115 0x001C      ADDS     R0,R5,#+28
   \       0x4E   0x.... 0x....      BL       _ZN17CoordinateElementcvfEv
   \       0x52   0xEE10 0x0A10      VMOV     R0,S0
   \       0x56   0x.... 0x....      BL       __aeabi_f2d
   \       0x5A   0xEC53 0x2B18      VMOV     R2,R3,D8
   \       0x5E   0x.... 0x....      BL       __aeabi_dmul
   \       0x62   0x.... 0x....      BL       __aeabi_d2f
   \       0x66   0xEE00 0x0A10      VMOV     S0,R0
   \       0x6A   0xF604 0x002C      ADDW     R0,R4,#+2092
   \       0x6E   0x.... 0x....      BL       _ZN11CJumpFilter10accumulateEf
    149          }
   \                     ??PIT_isr_0: (+1)
   \       0x72   0xECBD 0x8B02      VPOP     {D8}
   \       0x76   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    150          
    151          
    152          

   \                                 In section .text, align 4, keep-with-next
    153          void CVideoStation::sendPackage()
    154          {
   \                     _ZN13CVideoStation11sendPackageEv: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0x0004             MOVS     R4,R0
    155            if(!DMA_isOccupying(DMA_CHn_Tx))
   \        0x8   0x7860             LDRB     R0,[R4, #+1]
   \        0xA   0x.... 0x....      BL       DMA_isOccupying
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD142             BNE.N    ??sendPackage_0
    156            {
    157              TX.clear();
   \       0x12   0xF604 0x10F4      ADDW     R0,R4,#+2548
   \       0x16   0x.... 0x....      BL       _ZN13CVideoStation3TX_5clearEv
    158              TX.add(Navigation->angleToScreenValid);
   \       0x1A   0x....             LDR.N    R5,??DataTable4_10
   \       0x1C   0x6828             LDR      R0,[R5, #+0]
   \       0x1E   0xF890 0x109A      LDRB     R1,[R0, #+154]
   \       0x22   0xF604 0x10F4      ADDW     R0,R4,#+2548
   \       0x26   0x.... 0x....      BL       _ZN13CVideoStation3TX_3addEc
    159              int distance = (int)((Navigation->DesiredDistanceToScreen - UltrasoundUART->position.x) * 1000);
   \       0x2A   0x....             LDR.N    R0,??DataTable4_11
   \       0x2C   0x6800             LDR      R0,[R0, #+0]
   \       0x2E   0xF600 0x5024      ADDW     R0,R0,#+3364
   \       0x32   0x.... 0x....      BL       _ZN17CoordinateElementcvfEv
   \       0x36   0x6828             LDR      R0,[R5, #+0]
   \       0x38   0xEDD0 0x0A2A      VLDR     S1,[R0, #+168]
   \       0x3C   0xEE30 0x0AC0      VSUB.F32 S0,S1,S0
   \       0x40   0xEDDF 0x....      VLDR.W   S1,??DataTable4_18  ;; 0x447a0000
   \       0x44   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \       0x48   0xEEBD 0x8AC0      VCVT.S32.F32 S16,S0
    160              TX.add((int16)distance >> 8);
   \       0x4C   0xEE18 0x0A10      VMOV     R0,S16
   \       0x50   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \       0x52   0x1200             ASRS     R0,R0,#+8
   \       0x54   0x0001             MOVS     R1,R0
   \       0x56   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x58   0xF604 0x10F4      ADDW     R0,R4,#+2548
   \       0x5C   0x.... 0x....      BL       _ZN13CVideoStation3TX_3addEc
    161              TX.add((int16)distance);
   \       0x60   0xEE18 0x0A10      VMOV     R0,S16
   \       0x64   0x0001             MOVS     R1,R0
   \       0x66   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x68   0xF604 0x10F4      ADDW     R0,R4,#+2548
   \       0x6C   0x.... 0x....      BL       _ZN13CVideoStation3TX_3addEc
    162              TX.add(myState);
   \       0x70   0xF894 0x19EC      LDRB     R1,[R4, #+2540]
   \       0x74   0xF604 0x10F4      ADDW     R0,R4,#+2548
   \       0x78   0x.... 0x....      BL       _ZN13CVideoStation3TX_3addEc
    163              TX.add('\r');
   \       0x7C   0x210D             MOVS     R1,#+13
   \       0x7E   0xF604 0x10F4      ADDW     R0,R4,#+2548
   \       0x82   0x.... 0x....      BL       _ZN13CVideoStation3TX_3addEc
    164              TX.add('\n');
   \       0x86   0x210A             MOVS     R1,#+10
   \       0x88   0xF604 0x10F4      ADDW     R0,R4,#+2548
   \       0x8C   0x.... 0x....      BL       _ZN13CVideoStation3TX_3addEc
    165              TX.startDMA_Transmit();    
   \       0x90   0xF604 0x10F4      ADDW     R0,R4,#+2548
   \       0x94   0x.... 0x....      BL       _ZN13CVideoStation3TX_17startDMA_TransmitEv
    166            }
    167          }
   \                     ??sendPackage_0: (+1)
   \                     ??sendPackage_1: (+1)
   \       0x98   0xECBD 0x8B02      VPOP     {D8}
   \       0x9C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    168          
    169          

   \                                 In section .text, align 2, keep-with-next
    170          void CVideoStation::TX_::startDMA_Transmit()
    171          { 
    172            //µ÷ÕûÔ´µØÖ·
    173            DMA0->TCD[DMA_CH7].SADDR = DMA_SADDR_SADDR(videoStation->TX.data);
   \                     _ZN13CVideoStation3TX_17startDMA_TransmitEv: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable4_5
   \        0x2   0x680A             LDR      R2,[R1, #+0]
   \        0x4   0xF602 0x12F4      ADDW     R2,R2,#+2548
   \        0x8   0x....             LDR.N    R3,??DataTable4_12  ;; 0x400090e0
   \        0xA   0x601A             STR      R2,[R3, #+0]
    174            
    175            //ÉèÖÃÖ÷Ñ­»·¼ÆÊýÆ÷ current major loop count
    176            DMA0->TCD[DMA_CH7].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(videoStation->TX.index);
   \        0xC   0x680A             LDR      R2,[R1, #+0]
   \        0xE   0xF8D2 0x2B20      LDR      R2,[R2, #+2848]
   \       0x12   0x0452             LSLS     R2,R2,#+17       ;; ZeroExtS R2,R2,#+17,#+17
   \       0x14   0x0C52             LSRS     R2,R2,#+17
   \       0x16   0x....             LDR.N    R3,??DataTable4_13  ;; 0x400090f6
   \       0x18   0x801A             STRH     R2,[R3, #+0]
    177            
    178            //ÆðÊ¼Ñ­»·¼ÆÊýÆ÷£¬µ±Ö÷Ñ­»·¼ÆÊýÆ÷ÎªÁãµÄÊ±ºò£¬½«×°ÔØÆðÊ¼Ñ­»·¼ÆÊýÆ÷µÄÖµ
    179            DMA0->TCD[DMA_CH7].BITER_ELINKNO = DMA_CITER_ELINKNO_CITER(videoStation->TX.index);
   \       0x1A   0x6809             LDR      R1,[R1, #+0]
   \       0x1C   0xF8D1 0x1B20      LDR      R1,[R1, #+2848]
   \       0x20   0x0449             LSLS     R1,R1,#+17       ;; ZeroExtS R1,R1,#+17,#+17
   \       0x22   0x0C49             LSRS     R1,R1,#+17
   \       0x24   0x....             LDR.N    R2,??DataTable4_14  ;; 0x400090fe
   \       0x26   0x8011             STRH     R1,[R2, #+0]
    180              
    181            DMA_EnableReq(DMA_CH7);
   \       0x28   0x....             LDR.N    R1,??DataTable4_19  ;; 0x4000800c
   \       0x2A   0x680A             LDR      R2,[R1, #+0]
   \       0x2C   0xF052 0x0280      ORRS     R2,R2,#0x80
   \       0x30   0x600A             STR      R2,[R1, #+0]
    182          }
   \       0x32   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x42C8'0000        DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x3FC5'1EB8        DC32     0x3fc51eb8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0xC2F0'0000        DC32     0xc2f00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0xC320'0000        DC32     0xc3200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     `VideoStation_Init()::static guard for videoStation_0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x....'....        DC32     `VideoStation_Init()::videoStation_0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     videoStation

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x4370'0000        DC32     0x43700000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x4000'9000        DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0x....'....        DC32     t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \        0x0   0x....'....        DC32     IMU_acc_E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \        0x0   0x....'....        DC32     Navigation

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \        0x0   0x....'....        DC32     UltrasoundUART

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \        0x0   0x4000'90E0        DC32     0x400090e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \        0x0   0x4000'90F6        DC32     0x400090f6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \        0x0   0x4000'90FE        DC32     0x400090fe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \        0x0   0x43A0'0000        DC32     0x43a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \        0x0   0x4340'0000        DC32     0x43400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \        0x0   0xD2F1'A9FC        DC32     0xD2F1A9FC,0x3F60624D
   \              0x3F60'624D  

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \        0x0   0x447A'0000        DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \        0x0   0x4000'800C        DC32     0x4000800c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CJumpFilter::CJumpFilter()
      16   CVideoStation::CVideoStation()
        16   -> CJumpFilter::CJumpFilter()
        16   -> CJumpFilter::setParameter(float, int, float)
        16   -> Coordinate::Coordinate()
      24   CVideoStation::PIT_isr()
        24   -> CJumpFilter::accumulate(float)
        24   -> CJumpFilter::checkIsNewData(int)
        24   -> CoordinateElement::operator float()
        24   -> __aeabi_d2f
        24   -> __aeabi_dmul
        24   -> __aeabi_f2d
       0   CVideoStation::TX_::add(char)
      24   CVideoStation::TX_::clear()
        24   -> __aeabi_memset
       0   CVideoStation::TX_::startDMA_Transmit()
      24   CVideoStation::sendPackage()
        24   -> CVideoStation::TX_::add(char)
        24   -> CVideoStation::TX_::clear()
        24   -> CVideoStation::TX_::startDMA_Transmit()
        24   -> CoordinateElement::operator float()
        24   -> DMA_isOccupying
      64   CVideoStation::updateUart()
        64   -> CJumpFilter::newData3(float, int)
        64   -> __aeabi_memset
       8   Coordinate::Coordinate()
         8   -> CoordinateElement::CoordinateElement()
       0   CoordinateElement::CoordinateElement()
       0   DMA_isOccupying
      16   VideoStation_Init()
        16   -> CJumpFilter::setParameter(float, int)
        16   -> CVideoStation::CVideoStation()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       8  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      20  CJumpFilter::CJumpFilter()
     120  CVideoStation::CVideoStation()
     120  CVideoStation::PIT_isr()
      14  CVideoStation::TX_::add(char)
      30  CVideoStation::TX_::clear()
      52  CVideoStation::TX_::startDMA_Transmit()
     158  CVideoStation::sendPackage()
     700  CVideoStation::updateUart()
      30  Coordinate::Coordinate()
      28  CoordinateElement::CoordinateElement()
      20  DMA_isOccupying
     128  VideoStation_Init()
       4  videoStation
    2856  videoStation_0
      53  -- Other

 
    40 bytes in section .ARM.exidx
    12 bytes in section .ARM.extab
 2 861 bytes in section .bss
 1 508 bytes in section .text
 
 1 246 bytes of CODE  memory (+ 262 bytes shared)
    52 bytes of CONST memory
 2 861 bytes of DATA  memory

Errors: none
Warnings: 1
