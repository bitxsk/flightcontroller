###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         30/Jul/2018  16:04:06
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\RemoteHub.cpp
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW4AC7.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\RemoteHub.cpp
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\inc\c\DLib_Config_Full.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Core\Include\ -I
#        D:\iar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4 --text_out utf8
#        --utf8_text_in)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List\RemoteHub.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj\RemoteHub.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Sensor\RemoteHub.cpp
      1          #include "RemoteHub.h"

   \                                 In section .text, align 4
   \   __interwork __softfp bool DMA_isOccupying(uint8)
   \                     DMA_isOccupying: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0x4803             LDR.N    R0,??DMA_isOccupying_0  ;; 0x4000800c
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x40C8             LSRS     R0,R0,R1
   \        0x8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \        0xC   0x4770             BX       LR               ;; return
   \        0xE   0xBF00             Nop      
   \                     ??DMA_isOccupying_0:
   \       0x10   0x4000'800C        DC32     0x4000800c
      2          

   \                                 In section .bss, align 4
      3          CRemoteHub *RemoteHub;
   \                     RemoteHub:
   \        0x0                      DS8 4
      4          
      5          

   \                                 In section .text, align 2, keep-with-next
      6          void RemoteHub_Init()
      7          {
   \                     _Z14RemoteHub_Initv: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable2
   \        0x2   0x7808             LDRB     R0,[R1, #+0]
   \        0x4   0x2800             CMP      R0,#+0
   \        0x6   0xD101             BNE.N    ??RemoteHub_Init_0
      8            static CRemoteHub RemoteHub_0;
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x7008             STRB     R0,[R1, #+0]
      9            RemoteHub = &RemoteHub_0;
   \                     ??RemoteHub_Init_0: (+1)
   \        0xC   0x....             LDR.N    R0,??DataTable2_1
   \        0xE   0x....             LDR.N    R1,??DataTable2_2
   \       0x10   0x6001             STR      R1,[R0, #+0]
     10            
     11            RemoteHub->DMA_CHn_Rx = DMA_CH3;
   \       0x12   0x2103             MOVS     R1,#+3
   \       0x14   0x6802             LDR      R2,[R0, #+0]
   \       0x16   0x7011             STRB     R1,[R2, #+0]
     12            RemoteHub->DMA_CHn_Tx = DMA_CH0;
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0x6800             LDR      R0,[R0, #+0]
   \       0x1C   0x7041             STRB     R1,[R0, #+1]
     13          }
   \       0x1E   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     `RemoteHub_Init()::RemoteHub_0`:
   \        0x0                      DS8 30356
     14          
     15          

   \                                 In section .text, align 2, keep-with-next
     16          void CRemoteHub::updateUart()
     17          {
   \                     _ZN10CRemoteHub10updateUartEv: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB085             SUB      SP,SP,#+20
   \        0x6   0x0004             MOVS     R4,R0
     18            bool newPackage = false;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF88D 0x0001      STRB     R0,[SP, #+1]
     19            int i = 0, i0 = 0;
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x9001             STR      R0,[SP, #+4]
     20            int address0 = (DMA0->TCD[DMA_CHn_Rx].DADDR) - (uint32)(&uartData[0]);
   \       0x14   0x....             LDR.N    R5,??DataTable2_3  ;; 0x40009000
   \       0x16   0x7820             LDRB     R0,[R4, #+0]
   \       0x18   0x0140             LSLS     R0,R0,#+5
   \       0x1A   0x4428             ADD      R0,R5,R0
   \       0x1C   0x6900             LDR      R0,[R0, #+16]
   \       0x1E   0x1CA6             ADDS     R6,R4,#+2
   \       0x20   0x1B86             SUBS     R6,R0,R6
     21            int moveLength = 0;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0x9004             STR      R0,[SP, #+16]
     22            const int packageLength = 11;
   \       0x26   0x200B             MOVS     R0,#+11
   \       0x28   0x9003             STR      R0,[SP, #+12]
     23            
     24            bool loopFlag = false;
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     25            byteInterval = t - byte_lastTime;
   \       0x30   0xF247 0x5334      MOVW     R3,#+30004
   \       0x34   0x....             LDR.N    R2,??DataTable2_4
   \       0x36   0x6817             LDR      R7,[R2, #+0]
   \       0x38   0xF247 0x5038      MOVW     R0,#+30008
   \       0x3C   0x5820             LDR      R0,[R4, R0]
   \       0x3E   0x1A3F             SUBS     R7,R7,R0
   \       0x40   0x50E7             STR      R7,[R4, R3]
     26            
     27            if(byteInterval > 300)
   \       0x42   0x58E0             LDR      R0,[R4, R3]
   \       0x44   0xF240 0x132D      MOVW     R3,#+301
   \       0x48   0x4298             CMP      R0,R3
   \       0x4A   0xDB03             BLT.N    ??updateUart_0
     28            {
     29              valid = false;
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0xF247 0x5354      MOVW     R3,#+30036
   \       0x52   0x54E0             STRB     R0,[R4, R3]
     30            }
     31            
     32            if(byte_lastAddress != address0)
   \                     ??updateUart_0: (+1)
   \       0x54   0xF247 0x533C      MOVW     R3,#+30012
   \       0x58   0x58E0             LDR      R0,[R4, R3]
   \       0x5A   0x42B0             CMP      R0,R6
   \       0x5C   0xD000             BEQ.N    ??updateUart_1
     33            {
     34              byte_lastAddress = address0;
   \       0x5E   0x50E6             STR      R6,[R4, R3]
     35            }
     36            for(; i < address0; i++)
   \                     ??updateUart_1: (+1)
   \       0x60   0x42B1             CMP      R1,R6
   \       0x62   0xF280 0x8099      BGE.W    ??updateUart_2
     37            {
     38              for(; uartData[i] != 'e'; i++)
   \                     ??updateUart_3: (+1)
   \       0x66   0xEB04 0x0001      ADD      R0,R4,R1
   \       0x6A   0x7880             LDRB     R0,[R0, #+2]
   \       0x6C   0x2865             CMP      R0,#+101
   \       0x6E   0xD007             BEQ.N    ??updateUart_4
     39              {
     40                if(i >= address0)
   \       0x70   0x42B1             CMP      R1,R6
   \       0x72   0xDB03             BLT.N    ??updateUart_5
     41                {
     42                  loopFlag = true;
   \       0x74   0x2001             MOVS     R0,#+1
   \       0x76   0xF88D 0x0000      STRB     R0,[SP, #+0]
     43                  break;
   \       0x7A   0xE001             B.N      ??updateUart_4
     44                }
     45              }
   \                     ??updateUart_5: (+1)
   \       0x7C   0x1C49             ADDS     R1,R1,#+1
   \       0x7E   0xE7F2             B.N      ??updateUart_3
     46                
     47              if(loopFlag)
   \                     ??updateUart_4: (+1)
   \       0x80   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xF040 0x8087      BNE.W    ??updateUart_2
     48              {
     49                break;
     50              }
     51              if(i - i0 < packageLength - 1)
   \                     ??updateUart_6: (+1)
   \       0x8A   0x9801             LDR      R0,[SP, #+4]
   \       0x8C   0x1A08             SUBS     R0,R1,R0
   \       0x8E   0x280A             CMP      R0,#+10
   \       0x90   0xF2C0 0x8080      BLT.W    ??updateUart_7
     52              {
     53                continue;
     54              }
     55              
     56          //    char checkSum = 0; //×¢ÒâÃ¿¸ö°üµÄcheckSum¶¼ÒªÇåÁã
     57          //    for(int k = i - (packageLength - 1); k < i - 1; k++)
     58          //    {
     59          //      checkSum += uartData[k];
     60          //    }
     61          //    if(checkSum != uartData[i-1])
     62          //    {
     63          //      continue;
     64          //    }
     65          //    valid = true;
     66              valid = false;
   \                     ??updateUart_8: (+1)
   \       0x94   0xF247 0x5054      MOVW     R0,#+30036
   \       0x98   0x2700             MOVS     R7,#+0
   \       0x9A   0x5427             STRB     R7,[R4, R0]
     67              byte_lastTime = t;
   \       0x9C   0x6817             LDR      R7,[R2, #+0]
   \       0x9E   0xF247 0x5C38      MOVW     R12,#+30008
   \       0xA2   0xF844 0x700C      STR      R7,[R4, R12]
     68              byte_lastAddress = address0;
   \       0xA6   0x50E6             STR      R6,[R4, R3]
     69              i0 = i;    
   \       0xA8   0x9101             STR      R1,[SP, #+4]
     70              
     71              int packageTop = i - packageLength + 1;
   \       0xAA   0xF1B1 0x0A0A      SUBS     R10,R1,#+10
     72              Remote_Throttle = (int16)(uartData[packageTop] << 8 | uartData[packageTop + 1]);
   \       0xAE   0xF247 0x5740      MOVW     R7,#+30016
   \       0xB2   0xEB04 0x0C0A      ADD      R12,R4,R10
   \       0xB6   0xF89C 0xC002      LDRB     R12,[R12, #+2]
   \       0xBA   0xEB04 0x0E0A      ADD      LR,R4,R10
   \       0xBE   0xF89E 0xE003      LDRB     LR,[LR, #+3]
   \       0xC2   0xEA5E 0x2E0C      ORRS     LR,LR,R12, LSL #+8
   \       0xC6   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \       0xCA   0xF844 0xE007      STR      LR,[R4, R7]
     73              packageTop += 2;
   \       0xCE   0xF11A 0x0A02      ADDS     R10,R10,#+2
     74              Remote_Yaw = (int16)(uartData[packageTop] << 8 | uartData[packageTop + 1]);
   \       0xD2   0xF247 0x5E44      MOVW     LR,#+30020
   \       0xD6   0xEB04 0x0C0A      ADD      R12,R4,R10
   \       0xDA   0xF89C 0xC002      LDRB     R12,[R12, #+2]
   \       0xDE   0xEB04 0x080A      ADD      R8,R4,R10
   \       0xE2   0xF898 0x8003      LDRB     R8,[R8, #+3]
   \       0xE6   0xEA58 0x280C      ORRS     R8,R8,R12, LSL #+8
   \       0xEA   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \       0xEE   0xF844 0x800E      STR      R8,[R4, LR]
     75              packageTop += 2;
   \       0xF2   0xF11A 0x0A02      ADDS     R10,R10,#+2
     76              Remote_Roll = (int16)(uartData[packageTop] << 8 | uartData[packageTop + 1]);
   \       0xF6   0xF247 0x5848      MOVW     R8,#+30024
   \       0xFA   0xEB04 0x0C0A      ADD      R12,R4,R10
   \       0xFE   0xF89C 0xC002      LDRB     R12,[R12, #+2]
   \      0x102   0xEB04 0x090A      ADD      R9,R4,R10
   \      0x106   0xF899 0x9003      LDRB     R9,[R9, #+3]
   \      0x10A   0xEA59 0x290C      ORRS     R9,R9,R12, LSL #+8
   \      0x10E   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \      0x112   0xF844 0x9008      STR      R9,[R4, R8]
     77              packageTop += 2;
   \      0x116   0xF11A 0x0A02      ADDS     R10,R10,#+2
     78              Remote_Pitch = (int16)(uartData[packageTop] << 8 | uartData[packageTop + 1]);
   \      0x11A   0xF247 0x594C      MOVW     R9,#+30028
   \      0x11E   0xEB04 0x0C0A      ADD      R12,R4,R10
   \      0x122   0xF89C 0xC002      LDRB     R12,[R12, #+2]
   \      0x126   0xEB04 0x0B0A      ADD      R11,R4,R10
   \      0x12A   0xF89B 0xB003      LDRB     R11,[R11, #+3]
   \      0x12E   0xEA5B 0x2B0C      ORRS     R11,R11,R12, LSL #+8
   \      0x132   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \      0x136   0xF844 0xB009      STR      R11,[R4, R9]
     79              packageTop += 2;
   \      0x13A   0xF11A 0x0A02      ADDS     R10,R10,#+2
   \      0x13E   0xF8CD 0xA008      STR      R10,[SP, #+8]
     80              Remote_Leftknob = (int16)(uartData[packageTop] << 8 | uartData[packageTop + 1]);
   \      0x142   0xF247 0x5C50      MOVW     R12,#+30032
   \      0x146   0xF8DD 0xA008      LDR      R10,[SP, #+8]
   \      0x14A   0x44A2             ADD      R10,R4,R10
   \      0x14C   0xF89A 0xA002      LDRB     R10,[R10, #+2]
   \      0x150   0xF8DD 0xB008      LDR      R11,[SP, #+8]
   \      0x154   0x44A3             ADD      R11,R4,R11
   \      0x156   0xF89B 0xB003      LDRB     R11,[R11, #+3]
   \      0x15A   0xEA5B 0x2B0A      ORRS     R11,R11,R10, LSL #+8
   \      0x15E   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \      0x162   0xF844 0xB00C      STR      R11,[R4, R12]
     81              
     82              if(valid)
   \      0x166   0x5C20             LDRB     R0,[R4, R0]
   \      0x168   0x2800             CMP      R0,#+0
   \      0x16A   0xD013             BEQ.N    ??updateUart_7
     83              {
     84                EVB.Yaw       = Remote_Yaw; 
   \      0x16C   0x....             LDR.N    R0,??DataTable2_5
   \      0x16E   0xF854 0xE00E      LDR      LR,[R4, LR]
   \      0x172   0xF8C0 0xE6F0      STR      LR,[R0, #+1776]
     85                EVB.Roll      = Remote_Roll;
   \      0x176   0xF854 0xE008      LDR      LR,[R4, R8]
   \      0x17A   0xF8C0 0xE6F4      STR      LR,[R0, #+1780]
     86                EVB.Pitch     = Remote_Pitch;
   \      0x17E   0xF854 0xE009      LDR      LR,[R4, R9]
   \      0x182   0xF8C0 0xE6F8      STR      LR,[R0, #+1784]
     87                EVB.ConstSpd  = Remote_Throttle;
   \      0x186   0x59E7             LDR      R7,[R4, R7]
   \      0x188   0xF8C0 0x76E8      STR      R7,[R0, #+1768]
     88                EVB.LeftKnob  = Remote_Leftknob;
   \      0x18C   0xF854 0x700C      LDR      R7,[R4, R12]
   \      0x190   0xF8C0 0x76FC      STR      R7,[R0, #+1788]
     89              }
     90              
     91            }
   \                     ??updateUart_7: (+1)
   \      0x194   0x1C49             ADDS     R1,R1,#+1
   \      0x196   0xE763             B.N      ??updateUart_1
     92            if(valid && !validLast)
   \                     ??updateUart_2: (+1)
   \      0x198   0xF247 0x5354      MOVW     R3,#+30036
   \      0x19C   0x5CE0             LDRB     R0,[R4, R3]
   \      0x19E   0x2800             CMP      R0,#+0
   \      0x1A0   0xD009             BEQ.N    ??updateUart_9
   \      0x1A2   0xF247 0x5055      MOVW     R0,#+30037
   \      0x1A6   0x5C20             LDRB     R0,[R4, R0]
   \      0x1A8   0x2800             CMP      R0,#+0
   \      0x1AA   0xD104             BNE.N    ??updateUart_9
     93            {
     94              validTime = t;
   \      0x1AC   0x6810             LDR      R0,[R2, #+0]
   \      0x1AE   0xF247 0x525C      MOVW     R2,#+30044
   \      0x1B2   0x50A0             STR      R0,[R4, R2]
   \      0x1B4   0xE00B             B.N      ??updateUart_10
     95            }
     96            else if(!valid && validLast)
   \                     ??updateUart_9: (+1)
   \      0x1B6   0x5CE0             LDRB     R0,[R4, R3]
   \      0x1B8   0x2800             CMP      R0,#+0
   \      0x1BA   0xD108             BNE.N    ??updateUart_10
   \      0x1BC   0xF247 0x5055      MOVW     R0,#+30037
   \      0x1C0   0x5C20             LDRB     R0,[R4, R0]
   \      0x1C2   0x2800             CMP      R0,#+0
   \      0x1C4   0xD003             BEQ.N    ??updateUart_10
     97            {
     98              invalidTime = t;
   \      0x1C6   0x6810             LDR      R0,[R2, #+0]
   \      0x1C8   0xF247 0x5258      MOVW     R2,#+30040
   \      0x1CC   0x50A0             STR      R0,[R4, R2]
     99            }
    100            validLast = valid;
   \                     ??updateUart_10: (+1)
   \      0x1CE   0x5CE0             LDRB     R0,[R4, R3]
   \      0x1D0   0xF247 0x5255      MOVW     R2,#+30037
   \      0x1D4   0x54A0             STRB     R0,[R4, R2]
    101              
    102            moveLength = (DMA0->TCD[DMA_CHn_Rx].DADDR - (uint32)&uartData[0]) - i0;
   \      0x1D6   0x7820             LDRB     R0,[R4, #+0]
   \      0x1D8   0x0140             LSLS     R0,R0,#+5
   \      0x1DA   0x4428             ADD      R0,R5,R0
   \      0x1DC   0x6902             LDR      R2,[R0, #+16]
   \      0x1DE   0x1CA0             ADDS     R0,R4,#+2
   \      0x1E0   0x1A12             SUBS     R2,R2,R0
   \      0x1E2   0x9F01             LDR      R7,[SP, #+4]
   \      0x1E4   0x1BD7             SUBS     R7,R2,R7
    103            if(moveLength < 0) moveLength = 0;
   \      0x1E6   0x2F00             CMP      R7,#+0
   \      0x1E8   0xD501             BPL.N    ??updateUart_11
   \      0x1EA   0x2000             MOVS     R0,#+0
   \      0x1EC   0x0007             MOVS     R7,R0
    104             
    105            DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&uartData[0] + moveLength);
   \                     ??updateUart_11: (+1)
   \      0x1EE   0x7820             LDRB     R0,[R4, #+0]
   \      0x1F0   0x0140             LSLS     R0,R0,#+5
   \      0x1F2   0x4428             ADD      R0,R5,R0
   \      0x1F4   0x1CA2             ADDS     R2,R4,#+2
   \      0x1F6   0x18BA             ADDS     R2,R7,R2
   \      0x1F8   0x6102             STR      R2,[R0, #+16]
    106            for(i = 0; i < moveLength; i++)
   \      0x1FA   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??updateUart_12: (+1)
   \      0x1FE   0x45B8             CMP      R8,R7
   \      0x200   0xDA0A             BGE.N    ??updateUart_13
    107            {
    108              uartData[i] = uartData[i0 + i];
   \      0x202   0x9801             LDR      R0,[SP, #+4]
   \      0x204   0xEB18 0x0000      ADDS     R0,R8,R0
   \      0x208   0x4420             ADD      R0,R4,R0
   \      0x20A   0x7880             LDRB     R0,[R0, #+2]
   \      0x20C   0xEB04 0x0108      ADD      R1,R4,R8
   \      0x210   0x7088             STRB     R0,[R1, #+2]
    109            }
   \      0x212   0xF118 0x0801      ADDS     R8,R8,#+1
   \      0x216   0xE7F2             B.N      ??updateUart_12
    110            memset(uartData + moveLength, 0, 150 * sizeof(char));
   \                     ??updateUart_13: (+1)
   \      0x218   0xF05F 0x0996      MOVS     R9,#+150
   \      0x21C   0xF05F 0x0A00      MOVS     R10,#+0
   \      0x220   0xEB04 0x0007      ADD      R0,R4,R7
   \      0x224   0xF110 0x0B02      ADDS     R11,R0,#+2
   \      0x228   0x4652             MOV      R2,R10
   \      0x22A   0x4649             MOV      R1,R9
   \      0x22C   0x4658             MOV      R0,R11
   \      0x22E   0x.... 0x....      BL       __aeabi_memset
    111            if(address0 > 100)
   \      0x232   0x2E65             CMP      R6,#+101
   \      0x234   0xDB04             BLT.N    ??updateUart_14
    112            {
    113              DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&uartData[0]);
   \      0x236   0x7820             LDRB     R0,[R4, #+0]
   \      0x238   0x0140             LSLS     R0,R0,#+5
   \      0x23A   0x4428             ADD      R0,R5,R0
   \      0x23C   0x1CA1             ADDS     R1,R4,#+2
   \      0x23E   0x6101             STR      R1,[R0, #+16]
    114            }
    115          }
   \                     ??updateUart_14: (+1)
   \      0x240   0xB005             ADD      SP,SP,#+20
   \      0x242   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    116          
    117          
    118          
    119          

   \                                 In section .text, align 2, keep-with-next
    120          void CRemoteHub::sendPackage()
    121          {
   \                     _ZN10CRemoteHub11sendPackageEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    122            if(!DMA_isOccupying(DMA_CHn_Tx))
   \        0x4   0x7860             LDRB     R0,[R4, #+1]
   \        0x6   0x.... 0x....      BL       DMA_isOccupying
    123            {
    124          //    TX.clear();
    125          //    TX.add(Navigation->angleToScreenValid);
    126          //    TX.startDMA_Transmit();    
    127            }
    128          }
   \        0xA   0xBD10             POP      {R4,PC}          ;; return
    129          
    130          

   \                                 In section .text, align 2, keep-with-next
    131          void CRemoteHub::TX_::startDMA_Transmit()
    132          { 
   \                     _ZN10CRemoteHub3TX_17startDMA_TransmitEv: (+1)
   \        0x0   0xB410             PUSH     {R4}
    133            //µ÷ÕûÔ´µØÖ·
    134            DMA0->TCD[DMA_CH7].SADDR = DMA_SADDR_SADDR(RemoteHub->TX.data);
   \        0x2   0x....             LDR.N    R1,??DataTable2_1
   \        0x4   0x680A             LDR      R2,[R1, #+0]
   \        0x6   0xF247 0x5360      MOVW     R3,#+30048
   \        0xA   0x441A             ADD      R2,R2,R3
   \        0xC   0x....             LDR.N    R3,??DataTable2_6  ;; 0x400090e0
   \        0xE   0x601A             STR      R2,[R3, #+0]
    135            
    136            //ÉèÖÃÖ÷Ñ­»·¼ÆÊýÆ÷ current major loop count
    137            DMA0->TCD[DMA_CH7].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(RemoteHub->TX.index);
   \       0x10   0xF247 0x628C      MOVW     R2,#+30348
   \       0x14   0x680B             LDR      R3,[R1, #+0]
   \       0x16   0x589B             LDR      R3,[R3, R2]
   \       0x18   0x045B             LSLS     R3,R3,#+17       ;; ZeroExtS R3,R3,#+17,#+17
   \       0x1A   0x0C5B             LSRS     R3,R3,#+17
   \       0x1C   0x....             LDR.N    R4,??DataTable2_7  ;; 0x400090f6
   \       0x1E   0x8023             STRH     R3,[R4, #+0]
    138            
    139            //ÆðÊ¼Ñ­»·¼ÆÊýÆ÷£¬µ±Ö÷Ñ­»·¼ÆÊýÆ÷ÎªÁãµÄÊ±ºò£¬½«×°ÔØÆðÊ¼Ñ­»·¼ÆÊýÆ÷µÄÖµ
    140            DMA0->TCD[DMA_CH7].BITER_ELINKNO = DMA_CITER_ELINKNO_CITER(RemoteHub->TX.index);
   \       0x20   0x6809             LDR      R1,[R1, #+0]
   \       0x22   0x5889             LDR      R1,[R1, R2]
   \       0x24   0x0449             LSLS     R1,R1,#+17       ;; ZeroExtS R1,R1,#+17,#+17
   \       0x26   0x0C49             LSRS     R1,R1,#+17
   \       0x28   0x....             LDR.N    R2,??DataTable2_8  ;; 0x400090fe
   \       0x2A   0x8011             STRH     R1,[R2, #+0]
    141              
    142            DMA_EnableReq(DMA_CH7);
   \       0x2C   0x....             LDR.N    R1,??DataTable2_9  ;; 0x4000800c
   \       0x2E   0x680A             LDR      R2,[R1, #+0]
   \       0x30   0xF052 0x0280      ORRS     R2,R2,#0x80
   \       0x34   0x600A             STR      R2,[R1, #+0]
    143          }
   \       0x36   0xBC10             POP      {R4}
   \       0x38   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     `RemoteHub_Init()::static guard for RemoteHub_0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     RemoteHub

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x....'....        DC32     `RemoteHub_Init()::RemoteHub_0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x4000'9000        DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x....'....        DC32     t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x....'....        DC32     EVB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x4000'90E0        DC32     0x400090e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x4000'90F6        DC32     0x400090f6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0x4000'90FE        DC32     0x400090fe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0x4000'800C        DC32     0x4000800c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   CRemoteHub::TX_::startDMA_Transmit()
       8   CRemoteHub::sendPackage()
         8   -> DMA_isOccupying
      56   CRemoteHub::updateUart()
        56   -> __aeabi_memset
       0   DMA_isOccupying
       0   RemoteHub_Init()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      58  CRemoteHub::TX_::startDMA_Transmit()
      12  CRemoteHub::sendPackage()
     582  CRemoteHub::updateUart()
      20  DMA_isOccupying
       4  RemoteHub
   30356  RemoteHub_0
      32  RemoteHub_Init()
       1  -- Other

 
 30 361 bytes in section .bss
    744 bytes in section .text
 
    724 bytes of CODE memory (+ 20 bytes shared)
 30 361 bytes of DATA memory

Errors: none
Warnings: 1
