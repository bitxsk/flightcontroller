###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         31/Aug/2018  16:56:58
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\common\queue.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW8278.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\common\queue.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\inc\c\DLib_Config_Full.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Core\Include\ -I
#        D:\iar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List\queue.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj\queue.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\common\queue.c
      1          /**
      2           * @file queue.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief 实现先进先出链表
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include "queue.h"
     25          
     26          /********************************************************************/
     27          /* 
     28           * Initialize the specified queue to an empty state
     29           * 
     30           * Parameters:
     31           *  q   Pointer to queue structure
     32           */

   \                                 In section .text, align 2, keep-with-next
     33          void queue_init(QUEUE *q)
     34          {
     35              q->head = NULL;
   \                     _Z10queue_initP5QUEUE: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6001             STR      R1,[R0, #+0]
     36          }
   \        0x4   0x4770             BX       LR               ;; return
     37          /********************************************************************/
     38          /* 
     39           * Check for an empty queue
     40           *
     41           * Parameters:
     42           *  q       Pointer to queue structure
     43           * 
     44           * Return Value:
     45           *  1 if Queue is empty
     46           *  0 otherwise
     47           */

   \                                 In section .text, align 2, keep-with-next
     48          int32 queue_isempty(QUEUE *q)
     49          {
     50              return (q->head == NULL);
   \                     _Z13queue_isemptyP5QUEUE: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xD101             BNE.N    ??queue_isempty_0
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0xE000             B.N      ??queue_isempty_1
   \                     ??queue_isempty_0: (+1)
   \        0xA   0x2000             MOVS     R0,#+0
   \                     ??queue_isempty_1: (+1)
   \        0xC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0xE   0x4770             BX       LR               ;; return
     51          }
     52          /********************************************************************/
     53          /* 
     54           * Add an item to the end of the queue 
     55           *
     56           * Parameters:
     57           *  q       Pointer to queue structure
     58           *  node    New node to add to the queue
     59           */

   \                                 In section .text, align 2, keep-with-next
     60          void queue_add(QUEUE *q, QNODE *node)
     61          {
   \                     _Z9queue_addP5QUEUEP4NODE: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
     62              if (queue_isempty(q))
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       _Z13queue_isemptyP5QUEUE
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD001             BEQ.N    ??queue_add_0
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0xE000             B.N      ??queue_add_1
   \                     ??queue_add_0: (+1)
   \       0x14   0x2000             MOVS     R0,#+0
   \                     ??queue_add_1: (+1)
   \       0x16   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD003             BEQ.N    ??queue_add_2
     63              {
     64                  q->head = q->tail = node;
   \       0x1C   0x6065             STR      R5,[R4, #+4]
   \       0x1E   0x6860             LDR      R0,[R4, #+4]
   \       0x20   0x6020             STR      R0,[R4, #+0]
   \       0x22   0xE002             B.N      ??queue_add_3
     65              }
     66              else
     67              {
     68                  q->tail->next = node;
   \                     ??queue_add_2: (+1)
   \       0x24   0x6860             LDR      R0,[R4, #+4]
   \       0x26   0x6005             STR      R5,[R0, #+0]
     69                  q->tail = node;
   \       0x28   0x6065             STR      R5,[R4, #+4]
     70              }
     71              
     72              node->next = NULL;
   \                     ??queue_add_3: (+1)
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x6028             STR      R0,[R5, #+0]
     73          }
   \       0x2E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     74          
     75          /********************************************************************/
     76          /* 
     77           * Remove and return first (oldest) entry from the specified queue 
     78           *
     79           * Parameters:
     80           *  q       Pointer to queue structure
     81           *
     82           * Return Value:
     83           *  Node at head of queue - NULL if queue is empty
     84           */

   \                                 In section .text, align 2, keep-with-next
     85          QNODE* queue_remove(QUEUE *q)
     86          {
   \                     _Z12queue_removeP5QUEUE: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
     87              QNODE *oldest;
     88              
     89              if (queue_isempty(q))
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _Z13queue_isemptyP5QUEUE
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD001             BEQ.N    ??queue_remove_0
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xE000             B.N      ??queue_remove_1
   \                     ??queue_remove_0: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \                     ??queue_remove_1: (+1)
   \       0x14   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD001             BEQ.N    ??queue_remove_2
     90                  return NULL;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xE002             B.N      ??queue_remove_3
     91              
     92              oldest = q->head;
   \                     ??queue_remove_2: (+1)
   \       0x1E   0x6820             LDR      R0,[R4, #+0]
     93              q->head = oldest->next;
   \       0x20   0x6801             LDR      R1,[R0, #+0]
   \       0x22   0x6021             STR      R1,[R4, #+0]
     94              return oldest;
   \                     ??queue_remove_3: (+1)
   \       0x24   0xBD10             POP      {R4,PC}          ;; return
     95          }
     96          /********************************************************************/
     97          /* 
     98           * Peek into the queue and return pointer to first (oldest) entry.
     99           * The queue is not modified
    100           *
    101           * Parameters:
    102           *  q       Pointer to queue structure
    103           *
    104           * Return Value:
    105           *  Node at head of queue - NULL if queue is empty
    106           */

   \                                 In section .text, align 2, keep-with-next
    107          QNODE* queue_peek(QUEUE *q)
    108          {
    109              return q->head;
   \                     _Z10queue_peekP5QUEUE: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x4770             BX       LR               ;; return
    110          }
    111          /********************************************************************/
    112          /* 
    113           * Move entire contents of one queue to the other
    114           *
    115           * Parameters:
    116           *  src     Pointer to source queue
    117           *  dst     Pointer to destination queue
    118           */

   \                                 In section .text, align 2, keep-with-next
    119          void queue_move(QUEUE *dst, QUEUE *src)
    120          {
   \                     _Z10queue_moveP5QUEUES0_: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    121              if (queue_isempty(src))
   \        0x6   0x0028             MOVS     R0,R5
   \        0x8   0x.... 0x....      BL       _Z13queue_isemptyP5QUEUE
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD001             BEQ.N    ??queue_move_0
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0xE000             B.N      ??queue_move_1
   \                     ??queue_move_0: (+1)
   \       0x14   0x2000             MOVS     R0,#+0
   \                     ??queue_move_1: (+1)
   \       0x16   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD114             BNE.N    ??queue_move_2
    122                  return;
    123              
    124              if (queue_isempty(dst))
   \                     ??queue_move_3: (+1)
   \       0x1C   0x0020             MOVS     R0,R4
   \       0x1E   0x.... 0x....      BL       _Z13queue_isemptyP5QUEUE
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD001             BEQ.N    ??queue_move_4
   \       0x26   0x2001             MOVS     R0,#+1
   \       0x28   0xE000             B.N      ??queue_move_5
   \                     ??queue_move_4: (+1)
   \       0x2A   0x2000             MOVS     R0,#+0
   \                     ??queue_move_5: (+1)
   \       0x2C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD002             BEQ.N    ??queue_move_6
    125                  dst->head = src->head;
   \       0x32   0x6828             LDR      R0,[R5, #+0]
   \       0x34   0x6020             STR      R0,[R4, #+0]
   \       0x36   0xE002             B.N      ??queue_move_7
    126              else
    127                  dst->tail->next = src->head;
   \                     ??queue_move_6: (+1)
   \       0x38   0x6828             LDR      R0,[R5, #+0]
   \       0x3A   0x6861             LDR      R1,[R4, #+4]
   \       0x3C   0x6008             STR      R0,[R1, #+0]
    128          
    129              dst->tail = src->tail;
   \                     ??queue_move_7: (+1)
   \       0x3E   0x6868             LDR      R0,[R5, #+4]
   \       0x40   0x6060             STR      R0,[R4, #+4]
    130              src->head = NULL;
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0x6028             STR      R0,[R5, #+0]
    131              return;
   \                     ??queue_move_2: (+1)
   \       0x46   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    132          }
    133          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   queue_add(QUEUE *, NODE *)
        16   -> queue_isempty(QUEUE *)
       0   queue_init(QUEUE *)
       0   queue_isempty(QUEUE *)
      16   queue_move(QUEUE *, QUEUE *)
        16   -> queue_isempty(QUEUE *)
       0   queue_peek(QUEUE *)
       8   queue_remove(QUEUE *)
         8   -> queue_isempty(QUEUE *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      48  queue_add(QUEUE *, NODE *)
       6  queue_init(QUEUE *)
      16  queue_isempty(QUEUE *)
      72  queue_move(QUEUE *, QUEUE *)
       4  queue_peek(QUEUE *)
      38  queue_remove(QUEUE *)

 
 184 bytes in section .text
 
 184 bytes of CODE memory

Errors: none
Warnings: none
