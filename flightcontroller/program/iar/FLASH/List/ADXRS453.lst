###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         30/Jul/2018  16:41:10
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\ADXRS453.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW3CF8.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\ADXRS453.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\inc\c\DLib_Config_Full.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Core\Include\ -I
#        D:\iar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4 --text_out utf8
#        --utf8_text_in)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List\ADXRS453.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj\ADXRS453.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\ADXRS453.c
      1          #include "ADXRS453.h"
      2          #include "common.h"
      3          

   \                                 In section .data, align 4
      4          int  ADXRS453_CS_z = 2;
   \                     ADXRS453_CS_z:
   \        0x0   0x0000'0002        DC32 2

   \                                 In section .data, align 4
      5          int  ADXRS453_CS_y = 3;
   \                     ADXRS453_CS_y:
   \        0x0   0x0000'0003        DC32 3

   \                                 In section .data, align 4
      6          int  ADXRS453_CS_x = 4;
   \                     ADXRS453_CS_x:
   \        0x0   0x0000'0004        DC32 4

   \                                 In section .bss, align 4
      7          unsigned int ADXRS453S_Z_raw,ADXRS453S_Y_raw,ADXRS453S_X_raw;
   \                     ADXRS453S_Z_raw:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
   \                     ADXRS453S_Y_raw:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
   \                     ADXRS453S_X_raw:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
      8          float ADXRS453S_Z,ADXRS453S_Y,ADXRS453S_X;
   \                     ADXRS453S_Z:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
   \                     ADXRS453S_Y:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
   \                     ADXRS453S_X:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
      9          unsigned int ADXRS453S_scale[3];
   \                     ADXRS453S_scale:
   \        0x0                      DS8 12

   \                                 In section .bss, align 4
     10          data_output ADXRS453;
   \                     ADXRS453:
   \        0x0                      DS8 12
     11          /*******************************************************************
     12            @brief int ADXRS453Command(unsigned char Address, unsigned int SendValue, unsigned char OperateType)
     13                   send SPI command to ADXRS453
     14            @param
     15                   unsigned char Address:       Register address
     16                   unsigned int SendValue:      Data
     17                   unsigned char OperateType:   The command is read or write
     18            @return   
     19                   unsigned int  ReceiveValue:  SPI response from ADXRS453
     20          *******************************************************************/

   \                                 In section .text, align 2, keep-with-next
     21          int ADXRS453Command(unsigned char Address, unsigned int SendValue, unsigned char OperateType,int direction)
     22          {
   \                     _Z15ADXRS453Commandhjhi: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
     23              unsigned int  SendCommand = 0;
   \        0xC   0x2000             MOVS     R0,#+0
     24              unsigned char SendTemp[4];
     25              unsigned char ReceiveTemp[4];
     26              unsigned int  ReceiveValue;
     27            
     28              SendCommand = Address;
   \        0xE   0x46A0             MOV      R8,R4
   \       0x10   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
     29              SendCommand = SendCommand<<17;
   \       0x14   0xEA5F 0x4848      LSLS     R8,R8,#+17
     30              SendCommand = SendCommand + (SendValue<<1);
   \       0x18   0xEB18 0x0845      ADDS     R8,R8,R5, LSL #+1
     31            
     32              if (OperateType == 0)
   \       0x1C   0x0031             MOVS     R1,R6
   \       0x1E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x20   0x2900             CMP      R1,#+0
   \       0x22   0xD102             BNE.N    ??ADXRS453Command_0
     33              {
     34                  SendCommand = SendCommand|0x40000000;          //write command
   \       0x24   0xF058 0x4880      ORRS     R8,R8,#0x40000000
   \       0x28   0xE001             B.N      ??ADXRS453Command_1
     35              }
     36              else
     37              {
     38                  SendCommand = SendCommand|0x80000000;          //read command
   \                     ??ADXRS453Command_0: (+1)
   \       0x2A   0xF058 0x4800      ORRS     R8,R8,#0x80000000
     39              }
     40              
     41              SendTemp[0] = SendCommand>>24;
   \                     ??ADXRS453Command_1: (+1)
   \       0x2E   0x4640             MOV      R0,R8
   \       0x30   0x0E00             LSRS     R0,R0,#+24
   \       0x32   0xF88D 0x0004      STRB     R0,[SP, #+4]
     42              SendTemp[1] = SendCommand>>16;
   \       0x36   0xA801             ADD      R0,SP,#+4
   \       0x38   0x4641             MOV      R1,R8
   \       0x3A   0x0C09             LSRS     R1,R1,#+16
   \       0x3C   0x7041             STRB     R1,[R0, #+1]
     43              SendTemp[2] = SendCommand>>8;
   \       0x3E   0x4641             MOV      R1,R8
   \       0x40   0x0A09             LSRS     R1,R1,#+8
   \       0x42   0x7081             STRB     R1,[R0, #+2]
     44              SendTemp[3] = SendCommand;
   \       0x44   0xF880 0x8003      STRB     R8,[R0, #+3]
     45              
     46              SpiFunction(SendTemp, ReceiveTemp, 4,direction);           
   \       0x48   0x003B             MOVS     R3,R7
   \       0x4A   0x2204             MOVS     R2,#+4
   \       0x4C   0x4669             MOV      R1,SP
   \       0x4E   0xA801             ADD      R0,SP,#+4
   \       0x50   0x.... 0x....      BL       _Z11SpiFunctionPhS_ji
     47              
     48              ReceiveValue = ReceiveTemp[0];
   \       0x54   0xF89D 0x0000      LDRB     R0,[SP, #+0]
     49              ReceiveValue = (ReceiveValue<<8 )+ ReceiveTemp[1];
   \       0x58   0x4669             MOV      R1,SP
   \       0x5A   0x0200             LSLS     R0,R0,#+8
   \       0x5C   0x784A             LDRB     R2,[R1, #+1]
   \       0x5E   0x1880             ADDS     R0,R0,R2
     50              ReceiveValue = (ReceiveValue<<8 )+ ReceiveTemp[2];
   \       0x60   0x0200             LSLS     R0,R0,#+8
   \       0x62   0x788A             LDRB     R2,[R1, #+2]
   \       0x64   0x1880             ADDS     R0,R0,R2
     51              ReceiveValue = (ReceiveValue<<8 )+ ReceiveTemp[3];
   \       0x66   0x0200             LSLS     R0,R0,#+8
   \       0x68   0x78C9             LDRB     R1,[R1, #+3]
   \       0x6A   0x1840             ADDS     R0,R0,R1
     52              
     53              return(ReceiveValue);
   \                     ??ADXRS453Command_2: (+1)
   \       0x6C   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
     54          }
     55          
     56          
     57          
     58          /*******************************************************************
     59            @brief int  ADXRS453SensorData(void)
     60                   SPI sensor data command 
     61            @param
     62                   none
     63            @return   
     64                   unsigned int  ReceiveValue: sensor data  
     65          *******************************************************************/

   \                                 In section .text, align 4, keep-with-next
     66          data_output ADXRS453SensorData(void)
     67          {
   \                     _Z18ADXRS453SensorDatav: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
     68              unsigned char SendTemp[4];
     69              unsigned char ReceiveTemp[4];
     70              
     71            
     72              SendTemp[0] = 0x20;
   \        0x2   0x2020             MOVS     R0,#+32
   \        0x4   0xF88D 0x0004      STRB     R0,[SP, #+4]
     73              SendTemp[1] = 0x00;  
   \        0x8   0xA801             ADD      R0,SP,#+4
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x7041             STRB     R1,[R0, #+1]
     74              SendTemp[2] = 0x00;
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x7081             STRB     R1,[R0, #+2]
     75              SendTemp[3] = 0x00;
   \       0x12   0x2100             MOVS     R1,#+0
   \       0x14   0x70C1             STRB     R1,[R0, #+3]
     76            
     77              SpiFunction(SendTemp, ReceiveTemp, 4, ADXRS453_CS_z);
   \       0x16   0x....             LDR.N    R0,??DataTable3_1
   \       0x18   0x6803             LDR      R3,[R0, #+0]
   \       0x1A   0x2204             MOVS     R2,#+4
   \       0x1C   0x4669             MOV      R1,SP
   \       0x1E   0xA801             ADD      R0,SP,#+4
   \       0x20   0x.... 0x....      BL       _Z11SpiFunctionPhS_ji
     78              ADXRS453S_Z_raw = ReceiveTemp[0];
   \       0x24   0x....             LDR.N    R0,??DataTable3_2
   \       0x26   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \       0x2A   0x6001             STR      R1,[R0, #+0]
     79              ADXRS453S_Z_raw = (ADXRS453S_Z_raw<<8)+ ReceiveTemp[1];
   \       0x2C   0x466E             MOV      R6,SP
   \       0x2E   0x6801             LDR      R1,[R0, #+0]
   \       0x30   0x0209             LSLS     R1,R1,#+8
   \       0x32   0x7872             LDRB     R2,[R6, #+1]
   \       0x34   0x1889             ADDS     R1,R1,R2
   \       0x36   0x6001             STR      R1,[R0, #+0]
     80              ADXRS453S_Z_raw = (ADXRS453S_Z_raw<<8)+ ReceiveTemp[2];
   \       0x38   0x6801             LDR      R1,[R0, #+0]
   \       0x3A   0x0209             LSLS     R1,R1,#+8
   \       0x3C   0x78B2             LDRB     R2,[R6, #+2]
   \       0x3E   0x1889             ADDS     R1,R1,R2
   \       0x40   0x6001             STR      R1,[R0, #+0]
     81              ADXRS453S_Z_raw = (ADXRS453S_Z_raw<<8)+ ReceiveTemp[3]; 
   \       0x42   0x6801             LDR      R1,[R0, #+0]
   \       0x44   0x0209             LSLS     R1,R1,#+8
   \       0x46   0x78F2             LDRB     R2,[R6, #+3]
   \       0x48   0x1889             ADDS     R1,R1,R2
   \       0x4A   0x6001             STR      R1,[R0, #+0]
     82              ADXRS453S_Z_raw =  (ADXRS453S_Z_raw>>10)&0x0000FFFF;
   \       0x4C   0x6801             LDR      R1,[R0, #+0]
   \       0x4E   0xF3C1 0x218F      UBFX     R1,R1,#+10,#+16
   \       0x52   0x6001             STR      R1,[R0, #+0]
     83              ADXRS453S_Z = (int16)ADXRS453S_Z_raw/80.0f;
   \       0x54   0x....             LDR.N    R4,??DataTable3_3
   \       0x56   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \       0x5A   0xEE00 0x0A10      VMOV     S0,R0
   \       0x5E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \       0x62   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x42a00000
   \       0x66   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \       0x6A   0xED84 0x0A00      VSTR     S0,[R4, #0]
     84              
     85              SpiFunction(SendTemp, ReceiveTemp, 4, ADXRS453_CS_y);
   \       0x6E   0x....             LDR.N    R0,??DataTable3_4
   \       0x70   0x6803             LDR      R3,[R0, #+0]
   \       0x72   0x2204             MOVS     R2,#+4
   \       0x74   0x4669             MOV      R1,SP
   \       0x76   0xA801             ADD      R0,SP,#+4
   \       0x78   0x.... 0x....      BL       _Z11SpiFunctionPhS_ji
     86              ADXRS453S_Y_raw = ReceiveTemp[0];
   \       0x7C   0x....             LDR.N    R0,??DataTable3_5
   \       0x7E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \       0x82   0x6001             STR      R1,[R0, #+0]
     87              ADXRS453S_Y_raw = (ADXRS453S_Y_raw<<8)+ ReceiveTemp[1];
   \       0x84   0x6801             LDR      R1,[R0, #+0]
   \       0x86   0x0209             LSLS     R1,R1,#+8
   \       0x88   0x7872             LDRB     R2,[R6, #+1]
   \       0x8A   0x1889             ADDS     R1,R1,R2
   \       0x8C   0x6001             STR      R1,[R0, #+0]
     88              ADXRS453S_Y_raw = (ADXRS453S_Y_raw<<8)+ ReceiveTemp[2];
   \       0x8E   0x6801             LDR      R1,[R0, #+0]
   \       0x90   0x0209             LSLS     R1,R1,#+8
   \       0x92   0x78B2             LDRB     R2,[R6, #+2]
   \       0x94   0x1889             ADDS     R1,R1,R2
   \       0x96   0x6001             STR      R1,[R0, #+0]
     89              ADXRS453S_Y_raw = (ADXRS453S_Y_raw<<8)+ ReceiveTemp[3]; 
   \       0x98   0x6801             LDR      R1,[R0, #+0]
   \       0x9A   0x0209             LSLS     R1,R1,#+8
   \       0x9C   0x78F2             LDRB     R2,[R6, #+3]
   \       0x9E   0x1889             ADDS     R1,R1,R2
   \       0xA0   0x6001             STR      R1,[R0, #+0]
     90              ADXRS453S_Y_raw =  (ADXRS453S_Y_raw>>10)&0x0000FFFF;
   \       0xA2   0x6801             LDR      R1,[R0, #+0]
   \       0xA4   0xF3C1 0x218F      UBFX     R1,R1,#+10,#+16
   \       0xA8   0x6001             STR      R1,[R0, #+0]
     91              ADXRS453S_Y = (int16)ADXRS453S_Y_raw/80.0f;
   \       0xAA   0x....             LDR.N    R5,??DataTable3_6
   \       0xAC   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \       0xB0   0xEE00 0x0A10      VMOV     S0,R0
   \       0xB4   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \       0xB8   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x42a00000
   \       0xBC   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \       0xC0   0xED85 0x0A00      VSTR     S0,[R5, #0]
     92              
     93              SpiFunction(SendTemp, ReceiveTemp, 4, ADXRS453_CS_x);
   \       0xC4   0x....             LDR.N    R0,??DataTable3_7
   \       0xC6   0x6803             LDR      R3,[R0, #+0]
   \       0xC8   0x2204             MOVS     R2,#+4
   \       0xCA   0x4669             MOV      R1,SP
   \       0xCC   0xA801             ADD      R0,SP,#+4
   \       0xCE   0x.... 0x....      BL       _Z11SpiFunctionPhS_ji
     94              ADXRS453S_X_raw = ReceiveTemp[0];
   \       0xD2   0x....             LDR.N    R0,??DataTable3_8
   \       0xD4   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \       0xD8   0x6001             STR      R1,[R0, #+0]
     95              ADXRS453S_X_raw = (ADXRS453S_X_raw<<8)+ ReceiveTemp[1];
   \       0xDA   0x6801             LDR      R1,[R0, #+0]
   \       0xDC   0x0209             LSLS     R1,R1,#+8
   \       0xDE   0x7872             LDRB     R2,[R6, #+1]
   \       0xE0   0x1889             ADDS     R1,R1,R2
   \       0xE2   0x6001             STR      R1,[R0, #+0]
     96              ADXRS453S_X_raw = (ADXRS453S_X_raw<<8)+ ReceiveTemp[2];
   \       0xE4   0x6801             LDR      R1,[R0, #+0]
   \       0xE6   0x0209             LSLS     R1,R1,#+8
   \       0xE8   0x78B2             LDRB     R2,[R6, #+2]
   \       0xEA   0x1889             ADDS     R1,R1,R2
   \       0xEC   0x6001             STR      R1,[R0, #+0]
     97              ADXRS453S_X_raw = (ADXRS453S_X_raw<<8)+ ReceiveTemp[3]; 
   \       0xEE   0x6801             LDR      R1,[R0, #+0]
   \       0xF0   0x0209             LSLS     R1,R1,#+8
   \       0xF2   0x78F2             LDRB     R2,[R6, #+3]
   \       0xF4   0x1889             ADDS     R1,R1,R2
   \       0xF6   0x6001             STR      R1,[R0, #+0]
     98              ADXRS453S_X_raw =  (ADXRS453S_X_raw>>10)&0x0000FFFF;
   \       0xF8   0x6801             LDR      R1,[R0, #+0]
   \       0xFA   0xF3C1 0x218F      UBFX     R1,R1,#+10,#+16
   \       0xFE   0x6001             STR      R1,[R0, #+0]
     99              ADXRS453S_X = (int16)ADXRS453S_X_raw/80.0f;
   \      0x100   0x....             LDR.N    R1,??DataTable3_9
   \      0x102   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \      0x106   0xEE00 0x0A10      VMOV     S0,R0
   \      0x10A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \      0x10E   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x42a00000
   \      0x112   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \      0x116   0xED81 0x0A00      VSTR     S0,[R1, #0]
    100              ADXRS453.x=ADXRS453S_X+0.3;
   \      0x11A   0x....             LDR.N    R6,??DataTable3_10
   \      0x11C   0x6808             LDR      R0,[R1, #+0]
   \      0x11E   0x.... 0x....      BL       __aeabi_f2d
   \      0x122   0xF05F 0x3233      MOVS     R2,#+858993459
   \      0x126   0x....             LDR.N    R3,??DataTable3_11  ;; 0x3fd33333
   \      0x128   0x.... 0x....      BL       __aeabi_dadd
   \      0x12C   0x.... 0x....      BL       __aeabi_d2f
   \      0x130   0x6030             STR      R0,[R6, #+0]
    101              ADXRS453.y=ADXRS453S_Y;
   \      0x132   0x6828             LDR      R0,[R5, #+0]
   \      0x134   0x6070             STR      R0,[R6, #+4]
    102              ADXRS453.z=ADXRS453S_Z-0.7;
   \      0x136   0x6820             LDR      R0,[R4, #+0]
   \      0x138   0x.... 0x....      BL       __aeabi_f2d
   \      0x13C   0xF05F 0x3266      MOVS     R2,#+1717986918
   \      0x140   0x....             LDR.N    R3,??DataTable3_12  ;; 0xbfe66666
   \      0x142   0x.... 0x....      BL       __aeabi_dadd
   \      0x146   0x.... 0x....      BL       __aeabi_d2f
   \      0x14A   0x60B0             STR      R0,[R6, #+8]
    103              return ADXRS453;
   \      0x14C   0xEC96 0x0A03      VLDM     R6,{S0-S2}
   \                     ??ADXRS453SensorData_0: (+1)
   \      0x150   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    104          }
    105          
    106          
    107          /*******************************************************************
    108            @brief void ADXRS453StartUp(void)
    109                   recommended start-up sequence
    110            @param
    111                   none
    112            @return   
    113                   none
    114          *******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    115          void ADXRS453StartUp(int direction)
    116          {
   \                     _Z15ADXRS453StartUpi: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
    117              unsigned char SendTemp[4];
    118              unsigned char ReceiveTemp[4];
    119              unsigned char i;
    120              unsigned char byteH_x,byteL_x,byteH_y,byteL_y,byteH_z,byteL_z,byteH,byteL;/////////////////////
    121              
    122              SendTemp[0] = 0x20;
   \        0x4   0x2020             MOVS     R0,#+32
   \        0x6   0xF88D 0x0000      STRB     R0,[SP, #+0]
    123              SendTemp[1] = 0x00;  
   \        0xA   0x466D             MOV      R5,SP
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x7068             STRB     R0,[R5, #+1]
    124              SendTemp[2] = 0x00;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x70A8             STRB     R0,[R5, #+2]
    125              SendTemp[3] = 0x03;
   \       0x14   0x2003             MOVS     R0,#+3
   \       0x16   0x70E8             STRB     R0,[R5, #+3]
    126              SpiFunction(SendTemp, ReceiveTemp, 4,direction);       //0x20000003
   \       0x18   0x0023             MOVS     R3,R4
   \       0x1A   0x2204             MOVS     R2,#+4
   \       0x1C   0xA901             ADD      R1,SP,#+4
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x.... 0x....      BL       _Z11SpiFunctionPhS_ji
    127            
    128              SendTemp[0] = 0x20;
   \       0x24   0x2020             MOVS     R0,#+32
   \       0x26   0xF88D 0x0000      STRB     R0,[SP, #+0]
    129              SendTemp[1] = 0x00;  
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x7068             STRB     R0,[R5, #+1]
    130              SendTemp[2] = 0x00;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0x70A8             STRB     R0,[R5, #+2]
    131              SendTemp[3] = 0x00; 
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x70E8             STRB     R0,[R5, #+3]
    132              SpiFunction(SendTemp, ReceiveTemp, 4,direction);   
   \       0x36   0x0023             MOVS     R3,R4
   \       0x38   0x2204             MOVS     R2,#+4
   \       0x3A   0xA901             ADD      R1,SP,#+4
   \       0x3C   0x4668             MOV      R0,SP
   \       0x3E   0x.... 0x....      BL       _Z11SpiFunctionPhS_ji
    133              
    134              byteH=SPI_Master_WriteRead(ADXRS453_SPIx, RATE1, direction, SPI_PCS_ASSERTED);
   \       0x42   0x....             LDR.N    R6,??DataTable3_13  ;; 0x4002d000
   \       0x44   0x2301             MOVS     R3,#+1
   \       0x46   0x0020             MOVS     R0,R4
   \       0x48   0x0002             MOVS     R2,R0
   \       0x4A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x4C   0x2100             MOVS     R1,#+0
   \       0x4E   0x0030             MOVS     R0,R6
   \       0x50   0x.... 0x....      BL       SPI_Master_WriteRead
   \       0x54   0x0005             MOVS     R5,R0
    135              byteL=SPI_Master_WriteRead(ADXRS453_SPIx, RATE0, direction, SPI_PCS_INACTIVE);
   \       0x56   0x2300             MOVS     R3,#+0
   \       0x58   0x0020             MOVS     R0,R4
   \       0x5A   0x0002             MOVS     R2,R0
   \       0x5C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x5E   0x2101             MOVS     R1,#+1
   \       0x60   0x0030             MOVS     R0,R6
   \       0x62   0x.... 0x....      BL       SPI_Master_WriteRead
    136             
    137              ADXRS453S_scale[direction-2] = ((unsigned int)byteH<<8) | (byteL);
   \       0x66   0x0029             MOVS     R1,R5
   \       0x68   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x6A   0x0002             MOVS     R2,R0
   \       0x6C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x6E   0xEA52 0x2201      ORRS     R2,R2,R1, LSL #+8
   \       0x72   0x....             LDR.N    R1,??DataTable3_14
   \       0x74   0xEB01 0x0184      ADD      R1,R1,R4, LSL #+2
   \       0x78   0xF841 0x2C08      STR      R2,[R1, #-8]
    138          }
   \                     ??ADXRS453StartUp_0: (+1)
   \       0x7C   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    139          

   \                                 In section .text, align 2, keep-with-next
    140          void ADXRS453StartUp_XYZ()
    141          {
   \                     _Z19ADXRS453StartUp_XYZv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    142            int j;
    143            for (j=2;j<5;j++)
   \        0x2   0x2402             MOVS     R4,#+2
   \                     ??ADXRS453StartUp_XYZ_0: (+1)
   \        0x4   0x2C05             CMP      R4,#+5
   \        0x6   0xDA04             BGE.N    ??ADXRS453StartUp_XYZ_1
    144            {
    145             ADXRS453StartUp(j); 
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       _Z15ADXRS453StartUpi
    146            }
   \        0xE   0x1C64             ADDS     R4,R4,#+1
   \       0x10   0xE7F8             B.N      ??ADXRS453StartUp_XYZ_0
    147          }
   \                     ??ADXRS453StartUp_XYZ_1: (+1)
   \                     ??ADXRS453StartUp_XYZ_2: (+1)
   \       0x12   0xBD10             POP      {R4,PC}          ;; return
    148          /////////////////////////////////////////Ìí¼ÓÁËÒ»¸ö²ÎÊý

   \                                 In section .text, align 2, keep-with-next
    149          void SpiFunction(unsigned char OutputBuff[],unsigned char InputBuff[], unsigned int NoOfBytes,int direction)
    150          {	
   \                     _Z11SpiFunctionPhS_ji: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x0006             MOVS     R6,R0
   \        0x6   0x000F             MOVS     R7,R1
   \        0x8   0x4690             MOV      R8,R2
   \        0xA   0x4699             MOV      R9,R3
    151             int i;
    152              
    153             for(i=0;i<(NoOfBytes);i++)
   \        0xC   0x2400             MOVS     R4,#+0
   \                     ??SpiFunction_0: (+1)
   \        0xE   0x4544             CMP      R4,R8
   \       0x10   0xD21B             BCS.N    ??SpiFunction_1
    154             {
    155               if(i<(NoOfBytes)-1)
   \       0x12   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \       0x16   0x4284             CMP      R4,R0
   \       0x18   0xD208             BCS.N    ??SpiFunction_2
    156               {
    157                 SPI_Master_WriteRead(ADXRS453_SPIx, OutputBuff[i], direction, SPI_PCS_ASSERTED);  
   \       0x1A   0x2301             MOVS     R3,#+1
   \       0x1C   0x4648             MOV      R0,R9
   \       0x1E   0x0002             MOVS     R2,R0
   \       0x20   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x22   0x5D31             LDRB     R1,[R6, R4]
   \       0x24   0x....             LDR.N    R0,??DataTable3_13  ;; 0x4002d000
   \       0x26   0x.... 0x....      BL       SPI_Master_WriteRead
   \       0x2A   0xE00C             B.N      ??SpiFunction_3
    158               }
    159               else if(i=(NoOfBytes)-1)
   \                     ??SpiFunction_2: (+1)
   \       0x2C   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \       0x30   0x0004             MOVS     R4,R0
   \       0x32   0x2C00             CMP      R4,#+0
   \       0x34   0xD007             BEQ.N    ??SpiFunction_3
    160               {
    161                 SPI_Master_WriteRead(ADXRS453_SPIx, OutputBuff[i], direction, SPI_PCS_INACTIVE); 
   \       0x36   0x2300             MOVS     R3,#+0
   \       0x38   0x4648             MOV      R0,R9
   \       0x3A   0x0002             MOVS     R2,R0
   \       0x3C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x3E   0x5D31             LDRB     R1,[R6, R4]
   \       0x40   0x....             LDR.N    R0,??DataTable3_13  ;; 0x4002d000
   \       0x42   0x.... 0x....      BL       SPI_Master_WriteRead
    162               }
    163             }
   \                     ??SpiFunction_3: (+1)
   \       0x46   0x1C64             ADDS     R4,R4,#+1
   \       0x48   0xE7E1             B.N      ??SpiFunction_0
    164             
    165             for(i=0;i<(NoOfBytes);i++)
   \                     ??SpiFunction_1: (+1)
   \       0x4A   0x2500             MOVS     R5,#+0
   \                     ??SpiFunction_4: (+1)
   \       0x4C   0x4545             CMP      R5,R8
   \       0x4E   0xD21D             BCS.N    ??SpiFunction_5
    166             {
    167              // while((ADXRS453_SPIx->SR & 0x00010000) == 0x00000000){}
    168               if(i<(NoOfBytes)-1)
   \       0x50   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \       0x54   0x4285             CMP      R5,R0
   \       0x56   0xD209             BCS.N    ??SpiFunction_6
    169               {
    170                 InputBuff[i] = SPI_Master_WriteRead(ADXRS453_SPIx, Dummy_Byte3, direction, SPI_PCS_ASSERTED);
   \       0x58   0x2301             MOVS     R3,#+1
   \       0x5A   0x4648             MOV      R0,R9
   \       0x5C   0x0002             MOVS     R2,R0
   \       0x5E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x60   0x21AA             MOVS     R1,#+170
   \       0x62   0x....             LDR.N    R0,??DataTable3_13  ;; 0x4002d000
   \       0x64   0x.... 0x....      BL       SPI_Master_WriteRead
   \       0x68   0x5578             STRB     R0,[R7, R5]
   \       0x6A   0xE00D             B.N      ??SpiFunction_7
    171               }
    172               else if(i=(NoOfBytes)-1)
   \                     ??SpiFunction_6: (+1)
   \       0x6C   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \       0x70   0x0005             MOVS     R5,R0
   \       0x72   0x2D00             CMP      R5,#+0
   \       0x74   0xD008             BEQ.N    ??SpiFunction_7
    173               {
    174                 InputBuff[i] = SPI_Master_WriteRead(ADXRS453_SPIx, Dummy_Byte3, direction, SPI_PCS_INACTIVE); 
   \       0x76   0x2300             MOVS     R3,#+0
   \       0x78   0x4648             MOV      R0,R9
   \       0x7A   0x0002             MOVS     R2,R0
   \       0x7C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x7E   0x21AA             MOVS     R1,#+170
   \       0x80   0x....             LDR.N    R0,??DataTable3_13  ;; 0x4002d000
   \       0x82   0x.... 0x....      BL       SPI_Master_WriteRead
   \       0x86   0x5578             STRB     R0,[R7, R5]
    175               }										
    176             }
   \                     ??SpiFunction_7: (+1)
   \       0x88   0x1C6D             ADDS     R5,R5,#+1
   \       0x8A   0xE7DF             B.N      ??SpiFunction_4
    177             /**/
    178          }
   \                     ??SpiFunction_5: (+1)
   \                     ??SpiFunction_8: (+1)
   \       0x8C   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x42A0'0000        DC32     0x42a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     ADXRS453_CS_z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     ADXRS453S_Z_raw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     ADXRS453S_Z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     ADXRS453_CS_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x....'....        DC32     ADXRS453S_Y_raw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x....'....        DC32     ADXRS453S_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x....'....        DC32     ADXRS453_CS_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x....'....        DC32     ADXRS453S_X_raw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x....'....        DC32     ADXRS453S_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0x....'....        DC32     ADXRS453

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0x3FD3'3333        DC32     0x3fd33333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \        0x0   0xBFE6'6666        DC32     0xbfe66666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \        0x0   0x4002'D000        DC32     0x4002d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \        0x0   0x....'....        DC32     ADXRS453S_scale

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   ADXRS453Command(unsigned char, unsigned int, unsigned char, int)
        32   -> SpiFunction(unsigned char *, unsigned char *, unsigned int, int)
      24   ADXRS453SensorData()
        24   -> SpiFunction(unsigned char *, unsigned char *, unsigned int, int)
        24   -> __aeabi_d2f
        24   -> __aeabi_dadd
        24   -> __aeabi_f2d
      24   ADXRS453StartUp(int)
        24   -> SPI_Master_WriteRead
        24   -> SpiFunction(unsigned char *, unsigned char *, unsigned int, int)
       8   ADXRS453StartUp_XYZ()
         8   -> ADXRS453StartUp(int)
      32   SpiFunction(unsigned char *, unsigned char *, unsigned int, int)
        32   -> SPI_Master_WriteRead


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      12  ADXRS453
     112  ADXRS453Command(unsigned char, unsigned int, unsigned char, int)
       4  ADXRS453S_X
       4  ADXRS453S_X_raw
       4  ADXRS453S_Y
       4  ADXRS453S_Y_raw
       4  ADXRS453S_Z
       4  ADXRS453S_Z_raw
      12  ADXRS453S_scale
     338  ADXRS453SensorData()
     126  ADXRS453StartUp(int)
      20  ADXRS453StartUp_XYZ()
       4  ADXRS453_CS_x
       4  ADXRS453_CS_y
       4  ADXRS453_CS_z
     144  SpiFunction(unsigned char *, unsigned char *, unsigned int, int)
      40  -- Other

 
  40 bytes in section .ARM.exidx
  48 bytes in section .bss
  12 bytes in section .data
 800 bytes in section .text
 
 800 bytes of CODE  memory
  40 bytes of CONST memory
  60 bytes of DATA  memory

Errors: none
Warnings: 7
