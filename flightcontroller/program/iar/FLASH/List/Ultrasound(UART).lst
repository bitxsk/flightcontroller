###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         30/Jul/2018  16:04:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Ultrasound(UART).cpp
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW4E63.tmp
#        ("C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Ultrasound(UART).cpp"
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\inc\c\DLib_Config_Full.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Core\Include\ -I
#        D:\iar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4 --text_out utf8
#        --utf8_text_in)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List\Ultrasound(UART).lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj\Ultrasound(UART).o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\Ultrasound(UART).cpp
      1          #include "Ultrasound(UART).h"

   \                                 In section .text, align 4
   \   __interwork __softfp bool DMA_isOccupying(uint8)
   \                     DMA_isOccupying: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0x4803             LDR.N    R0,??DMA_isOccupying_0  ;; 0x4000800c
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x40C8             LSRS     R0,R0,R1
   \        0x8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \        0xC   0x4770             BX       LR               ;; return
   \        0xE   0xBF00             Nop      
   \                     ??DMA_isOccupying_0:
   \       0x10   0x4000'800C        DC32     0x4000800c

   \                                 In section .text, align 4
   \   __code __interwork __softfp CJumpFilter::CJumpFilter()
   \                     _ZN11CJumpFilterC1Ev: (+1)
   \        0x0   0x4903             LDR.N    R1,??CJumpFilter_0  ;; 0x42c80000
   \        0x2   0x6081             STR      R1,[R0, #+8]
   \        0x4   0x2132             MOVS     R1,#+50
   \        0x6   0x6281             STR      R1,[R0, #+40]
   \        0x8   0xF05F 0x517E      MOVS     R1,#+1065353216
   \        0xC   0x62C1             STR      R1,[R0, #+44]
   \        0xE   0x4770             BX       LR               ;; return
   \                     ??CJumpFilter_0:
   \       0x10   0x42C8'0000        DC32     0x42c80000

   \                                 In section .text, align 4
   \   __code __interwork __softfp CoordinateElement::CoordinateElement()
   \                     _ZN17CoordinateElementC1Ev: (+1)
   \        0x0   0x4903             LDR.N    R1,??CoordinateElement_0  ;; 0x3f4ccccd
   \        0x2   0x6101             STR      R1,[R0, #+16]
   \        0x4   0x4903             LDR.N    R1,??CoordinateElement_0+0x4  ;; 0x461c4000
   \        0x6   0x6141             STR      R1,[R0, #+20]
   \        0x8   0x4903             LDR.N    R1,??CoordinateElement_0+0x8  ;; 0xc61c4000
   \        0xA   0x6181             STR      R1,[R0, #+24]
   \        0xC   0x4770             BX       LR               ;; return
   \        0xE   0xBF00             Nop      
   \                     ??CoordinateElement_0:
   \       0x10   0x3F4C'CCCD        DC32     0x3f4ccccd
   \       0x14   0x461C'4000        DC32     0x461c4000
   \       0x18   0xC61C'4000        DC32     0xc61c4000

   \                                 In section .text, align 2
   \   __code __interwork __softfp Coordinate::Coordinate()
   \                     _ZN10CoordinateC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \        0xA   0xF114 0x001C      ADDS     R0,R4,#+28
   \        0xE   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x12   0xF114 0x0038      ADDS     R0,R4,#+56
   \       0x16   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void CUltrasoundUART::TX_::add(char)
   \                     _ZN15CUltrasoundUART3TX_3addEc: (+1)
   \        0x0   0x68C2             LDR      R2,[R0, #+12]
   \        0x2   0x1C53             ADDS     R3,R2,#+1
   \        0x4   0x60C3             STR      R3,[R0, #+12]
   \        0x6   0x5481             STRB     R1,[R0, R2]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void CUltrasoundUART::TX_::clear()
   \                     _ZN15CUltrasoundUART3TX_5clearEv: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x60C1             STR      R1,[R0, #+12]
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __code __interwork __softfp CUltrasoundUART::CUltrasoundUART()
   \                     _ZN15CUltrasoundUARTC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0xF604 0x30C8      ADDW     R0,R4,#+3016
   \        0x8   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \        0xC   0xF604 0x30E4      ADDW     R0,R4,#+3044
   \       0x10   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x14   0xF514 0x6040      ADDS     R0,R4,#+3072
   \       0x18   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x1C   0xF604 0x401C      ADDW     R0,R4,#+3100
   \       0x20   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x24   0xF604 0x4038      ADDW     R0,R4,#+3128
   \       0x28   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x2C   0xF604 0x4054      ADDW     R0,R4,#+3156
   \       0x30   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x34   0xF514 0x6047      ADDS     R0,R4,#+3184
   \       0x38   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x3C   0xF604 0x40A8      ADDW     R0,R4,#+3240
   \       0x40   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x44   0xF514 0x604E      ADDS     R0,R4,#+3296
   \       0x48   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x4C   0xF604 0x5024      ADDW     R0,R4,#+3364
   \       0x50   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \       0x54   0xF604 0x5078      ADDW     R0,R4,#+3448
   \       0x58   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \       0x5C   0x2000             MOVS     R0,#+0
   \       0x5E   0xF884 0x0DCC      STRB     R0,[R4, #+3532]
   \       0x62   0xEEF3 0x0A04      VMOV.F32 S1,#20.0
   \       0x66   0x2164             MOVS     R1,#+100
   \       0x68   0xED9F 0x0A03      VLDR.W   S0,??CUltrasoundUART_0  ;; 0x3e19999a
   \       0x6C   0xF514 0x6047      ADDS     R0,R4,#+3184
   \       0x70   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfif
   \       0x74   0x0020             MOVS     R0,R4
   \                     ??CUltrasoundUART_1: (+1)
   \       0x76   0xBD10             POP      {R4,PC}          ;; return
   \                     ??CUltrasoundUART_0:
   \       0x78   0x3E19'999A        DC32     0x3e19999a
      2          

   \                                 In section .bss, align 4
      3          CUltrasoundUART *UltrasoundUART;
   \                     UltrasoundUART:
   \        0x0                      DS8 4
      4          

   \                                 In section .text, align 4, keep-with-next
      5          void UltrasoundUART_Init()
      6          {
   \                     _Z19UltrasoundUART_Initv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0x....             LDR.N    R4,??DataTable2_4
   \        0x8   0x7820             LDRB     R0,[R4, #+0]
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD104             BNE.N    ??UltrasoundUART_Init_0
      7            static CUltrasoundUART UltrasoundUART_static;
   \        0xE   0x....             LDR.N    R0,??DataTable2_5
   \       0x10   0x.... 0x....      BL       _ZN15CUltrasoundUARTC1Ev
   \       0x14   0x2001             MOVS     R0,#+1
   \       0x16   0x7020             STRB     R0,[R4, #+0]
      8            UltrasoundUART = &UltrasoundUART_static;
   \                     ??UltrasoundUART_Init_0: (+1)
   \       0x18   0x....             LDR.N    R4,??DataTable2_6
   \       0x1A   0x....             LDR.N    R0,??DataTable2_5
   \       0x1C   0x6020             STR      R0,[R4, #+0]
      9            UltrasoundUART->DMA_CHn_Rx = DMA_CH0;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0x6821             LDR      R1,[R4, #+0]
   \       0x22   0x7008             STRB     R0,[R1, #+0]
     10            UltrasoundUART->DMA_CHn_Tx = DMA_CH3;
   \       0x24   0x2003             MOVS     R0,#+3
   \       0x26   0x6821             LDR      R1,[R4, #+0]
   \       0x28   0x7048             STRB     R0,[R1, #+1]
     11            
     12            UltrasoundUART->distanceFilter1.setParameter(0.15, 100);
   \       0x2A   0xED9F 0x....      VLDR.W   S16,??DataTable2  ;; 0x3e19999a
   \       0x2E   0x2164             MOVS     R1,#+100
   \       0x30   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x34   0x6820             LDR      R0,[R4, #+0]
   \       0x36   0xF510 0x6047      ADDS     R0,R0,#+3184
   \       0x3A   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     13            UltrasoundUART->distanceFilter1.setParameter(0.15, 100);
   \       0x3E   0x2164             MOVS     R1,#+100
   \       0x40   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x44   0x6820             LDR      R0,[R4, #+0]
   \       0x46   0xF510 0x6047      ADDS     R0,R0,#+3184
   \       0x4A   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     14            UltrasoundUART->distanceFilter1.maxValue = 4;
   \       0x4E   0xEEB1 0x8A00      VMOV.F32 S16,#4.0
   \       0x52   0x6820             LDR      R0,[R4, #+0]
   \       0x54   0xF600 0x407C      ADDW     R0,R0,#+3196
   \       0x58   0xED80 0x8A00      VSTR     S16,[R0, #0]
     15          
     16            UltrasoundUART->distanceFilter2.setParameter(0.1, 100);
   \       0x5C   0xEDDF 0x....      VLDR.W   S17,??DataTable2_1  ;; 0x3dcccccd
   \       0x60   0x2164             MOVS     R1,#+100
   \       0x62   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \       0x66   0x6820             LDR      R0,[R4, #+0]
   \       0x68   0xF600 0x40A8      ADDW     R0,R0,#+3240
   \       0x6C   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     17            UltrasoundUART->distanceFilter2.setParameter(0.1, 100);
   \       0x70   0x2164             MOVS     R1,#+100
   \       0x72   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \       0x76   0x6820             LDR      R0,[R4, #+0]
   \       0x78   0xF600 0x40A8      ADDW     R0,R0,#+3240
   \       0x7C   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     18            UltrasoundUART->distanceFilter2.maxValue = 4;
   \       0x80   0x6820             LDR      R0,[R4, #+0]
   \       0x82   0xF600 0x40B4      ADDW     R0,R0,#+3252
   \       0x86   0xED80 0x8A00      VSTR     S16,[R0, #0]
     19            
     20            UltrasoundUART->distanceFilter3.setParameter(0.1, 100);
   \       0x8A   0x2164             MOVS     R1,#+100
   \       0x8C   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \       0x90   0x6820             LDR      R0,[R4, #+0]
   \       0x92   0xF510 0x604E      ADDS     R0,R0,#+3296
   \       0x96   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     21            UltrasoundUART->distanceFilter3.setParameter(0.1, 100);
   \       0x9A   0x2164             MOVS     R1,#+100
   \       0x9C   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \       0xA0   0x6820             LDR      R0,[R4, #+0]
   \       0xA2   0xF510 0x604E      ADDS     R0,R0,#+3296
   \       0xA6   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     22            UltrasoundUART->distanceFilter3.maxValue = 4;
   \       0xAA   0x6820             LDR      R0,[R4, #+0]
   \       0xAC   0xF600 0x40EC      ADDW     R0,R0,#+3308
   \       0xB0   0xED80 0x8A00      VSTR     S16,[R0, #0]
     23            
     24            UltrasoundUART->sendMeasureRequest();
   \       0xB4   0x6820             LDR      R0,[R4, #+0]
   \       0xB6   0x.... 0x....      BL       _ZN15CUltrasoundUART18sendMeasureRequestEv
     25          }
   \                     ??UltrasoundUART_Init_1: (+1)
   \       0xBA   0xECBD 0x8B02      VPOP     {D8}
   \       0xBE   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 4
   \                     `UltrasoundUART_Init()::UltrasoundUART_static`:
   \        0x0                      DS8 3560
     26          
     27          

   \                                 In section .bss, align 1
     28          bool stopFlag;
   \                     stopFlag:
   \        0x0                      DS8 1

   \                                 In section .text, align 4, keep-with-next
     29          void CUltrasoundUART::update()
     30          {
   \                     _ZN15CUltrasoundUART6updateEv: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xED2D 0x8B02      VPUSH    {D8}
   \        0x8   0xB084             SUB      SP,SP,#+16
   \        0xA   0x0004             MOVS     R4,R0
     31            distanceFilter1.checkIsNewData(t);
   \        0xC   0x.... 0x....      LDR.W    R8,??DataTable2_7
   \       0x10   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \       0x14   0xF514 0x6047      ADDS     R0,R4,#+3184
   \       0x18   0x.... 0x....      BL       _ZN11CJumpFilter14checkIsNewDataEi
     32            distanceFilter2.checkIsNewData(t);
   \       0x1C   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \       0x20   0xF604 0x40A8      ADDW     R0,R4,#+3240
   \       0x24   0x.... 0x....      BL       _ZN11CJumpFilter14checkIsNewDataEi
     33            distanceFilter3.checkIsNewData(t);
   \       0x28   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \       0x2C   0xF514 0x604E      ADDS     R0,R4,#+3296
   \       0x30   0x.... 0x....      BL       _ZN11CJumpFilter14checkIsNewDataEi
     34            //distanceFilter.accumulate(IMU_acc_E.x * 0.002);
     35            bool newPackage = false;
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0xF88D 0x0001      STRB     R0,[SP, #+1]
     36            int i = 0, i0 = 0;
   \       0x3A   0x2500             MOVS     R5,#+0
   \       0x3C   0xF05F 0x0A00      MOVS     R10,#+0
     37            int address0 = (DMA0->TCD[DMA_CHn_Rx].DADDR) - (uint32)(&uartData[0]);
   \       0x40   0x....             LDR.N    R6,??DataTable2_8  ;; 0x40009000
   \       0x42   0x7820             LDRB     R0,[R4, #+0]
   \       0x44   0x0140             LSLS     R0,R0,#+5
   \       0x46   0x4430             ADD      R0,R6,R0
   \       0x48   0x6900             LDR      R0,[R0, #+16]
   \       0x4A   0xF114 0x0902      ADDS     R9,R4,#+2
   \       0x4E   0xEBB0 0x0909      SUBS     R9,R0,R9
     38            int moveLength = 0;
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0x9001             STR      R0,[SP, #+4]
     39            const int packageLength = 2;
   \       0x56   0x2002             MOVS     R0,#+2
   \       0x58   0x9002             STR      R0,[SP, #+8]
     40            bool loopFlag = false;
   \       0x5A   0x2000             MOVS     R0,#+0
   \       0x5C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     41            
     42            //byteInterval = t - byte_lastTime;
     43          
     44          //  if(byte_lastAddress != address0)
     45          //  {
     46          //    byte_lastTime = t;
     47          //    byte_lastAddress = address0;
     48          //  }
     49          //  if(byteInterval > 800)
     50          //  {
     51          //    DMA_EnableReq(DMA_CHn_Rx);
     52          //  }
     53            for(; i < address0; i++)
   \                     ??update_0: (+1)
   \       0x60   0x454D             CMP      R5,R9
   \       0x62   0xF280 0x808B      BGE.W    ??update_1
     54            {
     55          //    for(; uartData[i] != 'e'; i++)
     56          //    {
     57                if(i >= address0)
   \       0x66   0x454D             CMP      R5,R9
   \       0x68   0xDB03             BLT.N    ??update_2
     58                {
     59                  loopFlag = true;
   \       0x6A   0x2001             MOVS     R0,#+1
   \       0x6C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     60                  break;
   \       0x70   0xE084             B.N      ??update_1
     61                }
     62          //    }
     63          //      
     64              if(loopFlag)
   \                     ??update_2: (+1)
   \       0x72   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x76   0x2800             CMP      R0,#+0
   \       0x78   0xF040 0x8080      BNE.W    ??update_1
     65              {
     66                break;
     67              }
     68              if(i - i0 < packageLength - 2)
   \                     ??update_3: (+1)
   \       0x7C   0xEBB5 0x000A      SUBS     R0,R5,R10
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD479             BMI.N    ??update_4
     69              {
     70                continue;
     71              }
     72           //   byte_lastTime = t;
     73          //    char checkSum = 0; //×¢ÒâÃ¿¸ö°üµÄcheckSum¶¼ÒªÇåÁã
     74          //    for(int k = i - (packageLength - 1); k < i - 1; k++)
     75          //    {
     76          //      checkSum += uartData[k];
     77          //    }
     78          //    if(checkSum != uartData[i-1])
     79          //    {
     80          //      continue;
     81          //    }
     82              i0 = i + 1;    
   \                     ??update_5: (+1)
   \       0x84   0x1C68             ADDS     R0,R5,#+1
   \       0x86   0x4682             MOV      R10,R0
     83              int packageTop = i - packageLength + 2;
   \       0x88   0x0028             MOVS     R0,R5
     84              packageTop = -1;
   \       0x8A   0xF05F 0x37FF      MOVS     R7,#-1
     85              if(address0 == 2)
   \       0x8E   0xF1B9 0x0F02      CMP      R9,#+2
   \       0x92   0xD171             BNE.N    ??update_4
     86              {
     87                distanceRaw1 = (uartData[packageTop + 1] * 256 + uartData[packageTop + 2]) / 1000.0f;
   \       0x94   0xEB04 0x0007      ADD      R0,R4,R7
   \       0x98   0x78C1             LDRB     R1,[R0, #+3]
   \       0x9A   0xF44F 0x7280      MOV      R2,#+256
   \       0x9E   0xEB04 0x0007      ADD      R0,R4,R7
   \       0xA2   0x7900             LDRB     R0,[R0, #+4]
   \       0xA4   0xFB02 0x0101      MLA      R1,R2,R1,R0
   \       0xA8   0xEE00 0x1A10      VMOV     S0,R1
   \       0xAC   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \       0xB0   0xEDDF 0x....      VLDR.W   S1,??DataTable2_2  ;; 0x447a0000
   \       0xB4   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \       0xB8   0xF604 0x30C8      ADDW     R0,R4,#+3016
   \       0xBC   0x.... 0x....      BL       _ZN17CoordinateElementaSEf
     88                
     89                float epsilon = (t - distanceFilter1.invalidTime) / 1000 * 0.5 + 0.1; //Ã¿ÃëÎó²îÀÛ¼Æ 0.5Ã×£¨500mm£©
   \       0xC0   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \       0xC4   0xF8D4 0x0C84      LDR      R0,[R4, #+3204]
   \       0xC8   0x1A09             SUBS     R1,R1,R0
   \       0xCA   0xF44F 0x707A      MOV      R0,#+1000
   \       0xCE   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \       0xD2   0x.... 0x....      BL       __aeabi_i2d
   \       0xD6   0x2200             MOVS     R2,#+0
   \       0xD8   0x....             LDR.N    R3,??DataTable2_9  ;; 0x3fe00000
   \       0xDA   0x.... 0x....      BL       __aeabi_dmul
   \       0xDE   0x....             LDR.N    R2,??DataTable2_10  ;; 0x9999999a
   \       0xE0   0x....             LDR.N    R3,??DataTable2_11  ;; 0x3fb99999
   \       0xE2   0x.... 0x....      BL       __aeabi_dadd
   \       0xE6   0x.... 0x....      BL       __aeabi_d2f
   \       0xEA   0xEE08 0x0A10      VMOV     S16,R0
     90                distanceFilter1.maxValue = EKF_AHRS->fusion.position.z + epsilon;
   \       0xEE   0x.... 0x....      LDR.W    R11,??DataTable2_12
   \       0xF2   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \       0xF6   0x30DC             ADDS     R0,R0,#+220
   \       0xF8   0x.... 0x....      BL       _ZN17CoordinateElementcvfEv
   \       0xFC   0xEE30 0x0A08      VADD.F32 S0,S0,S16
   \      0x100   0xF604 0x407C      ADDW     R0,R4,#+3196
   \      0x104   0xED80 0x0A00      VSTR     S0,[R0, #0]
     91                distanceFilter1.minValue = EKF_AHRS->fusion.position.z - epsilon;
   \      0x108   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x10C   0x30DC             ADDS     R0,R0,#+220
   \      0x10E   0x.... 0x....      BL       _ZN17CoordinateElementcvfEv
   \      0x112   0xEE30 0x0A48      VSUB.F32 S0,S0,S16
   \      0x116   0xF604 0x4080      ADDW     R0,R4,#+3200
   \      0x11A   0xED80 0x0A00      VSTR     S0,[R0, #0]
     92                if(distanceFilter1.maxValue > 4)
   \      0x11E   0xF8D4 0x0C7C      LDR      R0,[R4, #+3196]
   \      0x122   0xEE00 0x0A10      VMOV     S0,R0
   \      0x126   0xEDDF 0x....      VLDR.W   S1,??DataTable2_3  ;; 0x40800001
   \      0x12A   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \      0x12E   0xEEF1 0xFA10      FMSTAT   
   \      0x132   0xDB03             BLT.N    ??update_6
     93                {
     94                  distanceFilter1.maxValue = 4;
   \      0x134   0xF05F 0x4081      MOVS     R0,#+1082130432
   \      0x138   0xF8C4 0x0C7C      STR      R0,[R4, #+3196]
     95                }
     96                if(distanceFilter1.minValue < 0)
   \                     ??update_6: (+1)
   \      0x13C   0xF8D4 0x0C80      LDR      R0,[R4, #+3200]
   \      0x140   0xEE00 0x0A10      VMOV     S0,R0
   \      0x144   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \      0x148   0xEEF1 0xFA10      FMSTAT   
   \      0x14C   0xD502             BPL.N    ??update_7
     97                {
     98                  distanceFilter1.minValue = 0;
   \      0x14E   0x2000             MOVS     R0,#+0
   \      0x150   0xF8C4 0x0C80      STR      R0,[R4, #+3200]
     99                }
    100                distance1 = distanceFilter1.newData3(distanceRaw1, t);
   \                     ??update_7: (+1)
   \      0x154   0xF604 0x30C8      ADDW     R0,R4,#+3016
   \      0x158   0x.... 0x....      BL       _ZN17CoordinateElementcvfEv
   \      0x15C   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \      0x160   0xF514 0x6047      ADDS     R0,R4,#+3184
   \      0x164   0x.... 0x....      BL       _ZN11CJumpFilter8newData3Efi
   \      0x168   0xF604 0x401C      ADDW     R0,R4,#+3100
   \      0x16C   0x.... 0x....      BL       _ZN17CoordinateElementaSEf
    101                lastValidTime1 = t;
   \      0x170   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \      0x174   0xF8C4 0x0D18      STR      R0,[R4, #+3352]
    102              }
    103          //    else if(uartData[packageTop] == 1)
    104          //    {
    105          //      distanceRaw2 = (uartData[packageTop + 1] * 256 + uartData[packageTop + 2]) / 1000.0f;
    106          //      
    107          //      float epsilon = (t - distanceFilter2.invalidTime) / 1000 * 0.5 + 0.2; //Ã¿ÃëÎó²îÀÛ¼Æ 0.5Ã×
    108          //      distanceFilter2.maxValue = Navigation->DesiredDistanceToScreen - UltrasoundUART->position.x + epsilon;
    109          //      distanceFilter2.minValue = Navigation->DesiredDistanceToScreen - UltrasoundUART->position.x - epsilon;
    110          //      
    111          //      if(distanceFilter2.maxValue > 4)
    112          //      {
    113          //        distanceFilter2.maxValue = 4;
    114          //      }
    115          //      if(distanceFilter2.minValue < 0)
    116          //      {
    117          //        distanceFilter2.minValue = 0;
    118          //      }
    119          //      
    120          //      distance2 = distanceFilter2.newData3(distanceRaw2, t);
    121          //      lastValidTime2 = t;
    122          //    }
    123          //    else if(uartData[packageTop] == 2)
    124          //    {
    125          //      distanceRaw3 = (uartData[packageTop + 1] * 256 + uartData[packageTop + 2]) / 1000.0f;
    126          //      
    127          //      float epsilon = (t - distanceFilter3.invalidTime) / 1000 * 0.5 + 0.2; //Ã¿ÃëÎó²îÀÛ¼Æ 0.5Ã×
    128          //      distanceFilter3.maxValue = Navigation->DesiredDistanceToScreen - UltrasoundUART->position.x + epsilon;
    129          //      distanceFilter3.minValue = Navigation->DesiredDistanceToScreen - UltrasoundUART->position.x - epsilon;
    130          //      
    131          //      if(distanceFilter3.maxValue > 4)
    132          //      {
    133          //        distanceFilter3.maxValue = 4;
    134          //      }
    135          //      if(distanceFilter3.minValue < 0)
    136          //      {
    137          //        distanceFilter3.minValue = 0;
    138          //      }
    139          //      
    140          //      distance3 = distanceFilter3.newData3(distanceRaw3, t);
    141          //      lastValidTime3 = t;
    142          //    }
    143            }
   \                     ??update_4: (+1)
   \      0x178   0x1C6D             ADDS     R5,R5,#+1
   \      0x17A   0xE771             B.N      ??update_0
    144            
    145            moveLength = (DMA0->TCD[DMA_CHn_Rx].DADDR - (uint32)&uartData[0]) - i0;
   \                     ??update_1: (+1)
   \      0x17C   0x7820             LDRB     R0,[R4, #+0]
   \      0x17E   0x0140             LSLS     R0,R0,#+5
   \      0x180   0x4430             ADD      R0,R6,R0
   \      0x182   0x6900             LDR      R0,[R0, #+16]
   \      0x184   0x1CA7             ADDS     R7,R4,#+2
   \      0x186   0x1BC7             SUBS     R7,R0,R7
   \      0x188   0xEBB7 0x070A      SUBS     R7,R7,R10
    146            if(moveLength < 0) moveLength = 0;
   \      0x18C   0x2F00             CMP      R7,#+0
   \      0x18E   0xD501             BPL.N    ??update_8
   \      0x190   0x2000             MOVS     R0,#+0
   \      0x192   0x0007             MOVS     R7,R0
    147             
    148            DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&uartData[0] + moveLength);
   \                     ??update_8: (+1)
   \      0x194   0x7820             LDRB     R0,[R4, #+0]
   \      0x196   0x0140             LSLS     R0,R0,#+5
   \      0x198   0x4430             ADD      R0,R6,R0
   \      0x19A   0x1CA1             ADDS     R1,R4,#+2
   \      0x19C   0x1879             ADDS     R1,R7,R1
   \      0x19E   0x6101             STR      R1,[R0, #+16]
    149            for(i = 0; i < moveLength; i++)
   \      0x1A0   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??update_9: (+1)
   \      0x1A4   0x45B8             CMP      R8,R7
   \      0x1A6   0xDA09             BGE.N    ??update_10
    150            {
    151              uartData[i] = uartData[i0 + i];
   \      0x1A8   0xEB18 0x000A      ADDS     R0,R8,R10
   \      0x1AC   0x4420             ADD      R0,R4,R0
   \      0x1AE   0x7880             LDRB     R0,[R0, #+2]
   \      0x1B0   0xEB04 0x0108      ADD      R1,R4,R8
   \      0x1B4   0x7088             STRB     R0,[R1, #+2]
    152            }
   \      0x1B6   0xF118 0x0801      ADDS     R8,R8,#+1
   \      0x1BA   0xE7F3             B.N      ??update_9
    153            memset(uartData + moveLength, 0, 150 * sizeof(char));
   \                     ??update_10: (+1)
   \      0x1BC   0x2096             MOVS     R0,#+150
   \      0x1BE   0x9001             STR      R0,[SP, #+4]
   \      0x1C0   0x2500             MOVS     R5,#+0
   \      0x1C2   0xEB04 0x0007      ADD      R0,R4,R7
   \      0x1C6   0xF110 0x0B02      ADDS     R11,R0,#+2
   \      0x1CA   0x002A             MOVS     R2,R5
   \      0x1CC   0x9901             LDR      R1,[SP, #+4]
   \      0x1CE   0x4658             MOV      R0,R11
   \      0x1D0   0x.... 0x....      BL       __aeabi_memset
    154            if(address0 > 100)
   \      0x1D4   0xF1B9 0x0F65      CMP      R9,#+101
   \      0x1D8   0xDB04             BLT.N    ??update_11
    155            {
    156              DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&uartData[0]);
   \      0x1DA   0x7820             LDRB     R0,[R4, #+0]
   \      0x1DC   0x0140             LSLS     R0,R0,#+5
   \      0x1DE   0x4430             ADD      R0,R6,R0
   \      0x1E0   0x1CA1             ADDS     R1,R4,#+2
   \      0x1E2   0x6101             STR      R1,[R0, #+16]
    157            }
    158            
    159          }
   \                     ??update_11: (+1)
   \                     ??update_12: (+1)
   \      0x1E4   0xB004             ADD      SP,SP,#+16
   \      0x1E6   0xECBD 0x8B02      VPOP     {D8}
   \      0x1EA   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    160          

   \                                 In section .text, align 2, keep-with-next
    161          void CUltrasoundUART::sendMeasureRequest()
    162          {
   \                     _ZN15CUltrasoundUART18sendMeasureRequestEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    163            if(!DMA_isOccupying(DMA_CH3))
   \        0x4   0x2003             MOVS     R0,#+3
   \        0x6   0x.... 0x....      BL       DMA_isOccupying
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD10D             BNE.N    ??sendMeasureRequest_0
    164            {
    165              TX.clear();
   \        0xE   0xF604 0x50D4      ADDW     R0,R4,#+3540
   \       0x12   0x.... 0x....      BL       _ZN15CUltrasoundUART3TX_5clearEv
    166              TX.add(0x55);
   \       0x16   0x2155             MOVS     R1,#+85
   \       0x18   0xF604 0x50D4      ADDW     R0,R4,#+3540
   \       0x1C   0x.... 0x....      BL       _ZN15CUltrasoundUART3TX_3addEc
    167              TX.startDMA_Transmit(this);    
   \       0x20   0x0021             MOVS     R1,R4
   \       0x22   0xF604 0x50D4      ADDW     R0,R4,#+3540
   \       0x26   0x.... 0x....      BL       _ZN15CUltrasoundUART3TX_17startDMA_TransmitEPS_
    168            }
    169          }
   \                     ??sendMeasureRequest_0: (+1)
   \       0x2A   0xBD10             POP      {R4,PC}          ;; return
    170          
    171          

   \                                 In section .text, align 2, keep-with-next
    172          void CUltrasoundUART::setNewPackageFlag(bool flag)
    173          {
    174            newPackageFlag = flag;
   \                     _ZN15CUltrasoundUART17setNewPackageFlagEb: (+1)
   \        0x0   0xF880 0x1DCC      STRB     R1,[R0, #+3532]
    175          }
   \        0x4   0x4770             BX       LR               ;; return
    176          

   \                                 In section .text, align 2, keep-with-next
    177          void CUltrasoundUART::TX_::startDMA_Transmit(CUltrasoundUART *tmp)
    178          {
   \                     _ZN15CUltrasoundUART3TX_17startDMA_TransmitEPS_: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    179            //DMA_changeLength(tmp->DMA_CHn_Tx, tmp->TX.index);    
    180            DMA0->TCD[tmp->DMA_CHn_Tx].SADDR = DMA_SADDR_SADDR(tmp->TX.data);
   \        0x2   0x....             LDR.N    R2,??DataTable2_8  ;; 0x40009000
   \        0x4   0xF601 0x53D4      ADDW     R3,R1,#+3540
   \        0x8   0x784C             LDRB     R4,[R1, #+1]
   \        0xA   0x0164             LSLS     R4,R4,#+5
   \        0xC   0x5113             STR      R3,[R2, R4]
    181             //ÉèÖÃÖ÷Ñ­»·¼ÆÊýÆ÷ current major loop count
    182            DMA0->TCD[tmp->DMA_CHn_Tx].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(tmp->TX.index);
   \        0xE   0x784B             LDRB     R3,[R1, #+1]
   \       0x10   0x015B             LSLS     R3,R3,#+5
   \       0x12   0x4413             ADD      R3,R2,R3
   \       0x14   0xF8D1 0x4DE0      LDR      R4,[R1, #+3552]
   \       0x18   0x0464             LSLS     R4,R4,#+17       ;; ZeroExtS R4,R4,#+17,#+17
   \       0x1A   0x0C64             LSRS     R4,R4,#+17
   \       0x1C   0x82DC             STRH     R4,[R3, #+22]
    183            //ÆðÊ¼Ñ­»·¼ÆÊýÆ÷£¬µ±Ö÷Ñ­»·¼ÆÊýÆ÷ÎªÁãµÄÊ±ºò£¬½«×°ÔØÆðÊ¼Ñ­»·¼ÆÊýÆ÷µÄÖµ
    184            DMA0->TCD[tmp->DMA_CHn_Tx].BITER_ELINKNO = DMA_CITER_ELINKNO_CITER(tmp->TX.index);
   \       0x1E   0x784B             LDRB     R3,[R1, #+1]
   \       0x20   0x015B             LSLS     R3,R3,#+5
   \       0x22   0x441A             ADD      R2,R2,R3
   \       0x24   0xF8D1 0x3DE0      LDR      R3,[R1, #+3552]
   \       0x28   0x045B             LSLS     R3,R3,#+17       ;; ZeroExtS R3,R3,#+17,#+17
   \       0x2A   0x0C5B             LSRS     R3,R3,#+17
   \       0x2C   0x83D3             STRH     R3,[R2, #+30]
    185            
    186            DMA_EnableReq(tmp->DMA_CHn_Tx);
   \       0x2E   0x....             LDR.N    R3,??DataTable2_13  ;; 0x4000800c
   \       0x30   0x681C             LDR      R4,[R3, #+0]
   \       0x32   0x2501             MOVS     R5,#+1
   \       0x34   0xF991 0x2001      LDRSB    R2,[R1, #+1]
   \       0x38   0x4095             LSLS     R5,R5,R2
   \       0x3A   0x432C             ORRS     R4,R5,R4
   \       0x3C   0x601C             STR      R4,[R3, #+0]
    187          }
   \       0x3E   0xBC30             POP      {R4,R5}
   \       0x40   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x3E19'999A        DC32     0x3e19999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x3DCC'CCCD        DC32     0x3dcccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x447A'0000        DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x4080'0001        DC32     0x40800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x....'....        DC32     `UltrasoundUART_Init()::static guard for UltrasoundUART_static`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x....'....        DC32     `UltrasoundUART_Init()::UltrasoundUART_static`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x....'....        DC32     UltrasoundUART

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x....'....        DC32     t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0x4000'9000        DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0x3FE0'0000        DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \        0x0   0x9999'999A        DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \        0x0   0x3FB9'9999        DC32     0x3fb99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \        0x0   0x....'....        DC32     EKF_AHRS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \        0x0   0x4000'800C        DC32     0x4000800c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CJumpFilter::CJumpFilter()
       8   CUltrasoundUART::CUltrasoundUART()
         8   -> CJumpFilter::CJumpFilter()
         8   -> CJumpFilter::setParameter(float, int, float)
         8   -> Coordinate::Coordinate()
         8   -> CoordinateElement::CoordinateElement()
       0   CUltrasoundUART::TX_::add(char)
       0   CUltrasoundUART::TX_::clear()
       8   CUltrasoundUART::TX_::startDMA_Transmit(CUltrasoundUART *)
       8   CUltrasoundUART::sendMeasureRequest()
         8   -> CUltrasoundUART::TX_::add(char)
         8   -> CUltrasoundUART::TX_::clear()
         8   -> CUltrasoundUART::TX_::startDMA_Transmit(CUltrasoundUART *)
         8   -> DMA_isOccupying
       0   CUltrasoundUART::setNewPackageFlag(bool)
      64   CUltrasoundUART::update()
        64   -> CJumpFilter::checkIsNewData(int)
        64   -> CJumpFilter::newData3(float, int)
        64   -> CoordinateElement::operator float()
        64   -> CoordinateElement::operator=(float)
        64   -> __aeabi_d2f
        64   -> __aeabi_dadd
        64   -> __aeabi_dmul
        64   -> __aeabi_i2d
        64   -> __aeabi_memset
       8   Coordinate::Coordinate()
         8   -> CoordinateElement::CoordinateElement()
       0   CoordinateElement::CoordinateElement()
       0   DMA_isOccupying
      16   UltrasoundUART_Init()
        16   -> CJumpFilter::setParameter(float, int)
        16   -> CUltrasoundUART::CUltrasoundUART()
        16   -> CUltrasoundUART::sendMeasureRequest()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      20  CJumpFilter::CJumpFilter()
     124  CUltrasoundUART::CUltrasoundUART()
      10  CUltrasoundUART::TX_::add(char)
       6  CUltrasoundUART::TX_::clear()
      66  CUltrasoundUART::TX_::startDMA_Transmit(CUltrasoundUART *)
      44  CUltrasoundUART::sendMeasureRequest()
       6  CUltrasoundUART::setNewPackageFlag(bool)
     494  CUltrasoundUART::update()
      30  Coordinate::Coordinate()
      28  CoordinateElement::CoordinateElement()
      20  DMA_isOccupying
       4  UltrasoundUART
     192  UltrasoundUART_Init()
    3560  UltrasoundUART_static
       1  stopFlag
      37  -- Other

 
    24 bytes in section .ARM.exidx
    12 bytes in section .ARM.extab
 3 566 bytes in section .bss
 1 096 bytes in section .text
 
   858 bytes of CODE  memory (+ 238 bytes shared)
    36 bytes of CONST memory
 3 566 bytes of DATA  memory

Errors: none
Warnings: 1
