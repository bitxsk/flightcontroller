###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         31/Aug/2018  16:56:49
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FTM.c
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW5D09.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FTM.c
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\inc\c\DLib_Config_Full.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Core\Include\ -I
#        D:\iar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List\FTM.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj\FTM.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\lib\LPLD\HW\FTM.c
      1          /**
      2           * @file FTM.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FTM底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn)
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init16__NVIC_EnableIRQE4IRQn: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40A             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable9  ;; 0xe000e100
   \       0x14   0x0003             MOVS     R3,R0
   \       0x16   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \       0x18   0x095B             LSRS     R3,R3,#+5
   \       0x1A   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn)
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init17__NVIC_DisableIRQE4IRQn: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40E             BMI.N    ??__NVIC_DisableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable9_1  ;; 0xe000e180
   \       0x14   0x0003             MOVS     R3,R0
   \       0x16   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \       0x18   0x095B             LSRS     R3,R3,#+5
   \       0x1A   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \       0x1E   0xF3BF 0x8F4F      DSB      SY
   \       0x22   0xF3BF 0x8F6F      ISB      SY
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \       0x26   0x4770             BX       LR               ;; return
     23          #include "FTM.h"
     24          extern "C"{
     25          //用户自定义中断服务函数数组
     26          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
     27          FTM_ISR_CALLBACK FTM_ISR[3];
     28          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)

   \                                 In section .bss, align 4
     29          FTM_ISR_CALLBACK FTM_ISR[4];
   \                     FTM_ISR:
   \        0x0                      DS8 16
     30          #endif
     31          
     32          static uint8 FTM_PWM_Init(FTM_InitTypeDef);
     33          static uint8 FTM_IC_Init(FTM_InitTypeDef);
     34          static uint8 FTM_QD_Init(FTM_InitTypeDef);
     35          static uint8 FTM_DEC_Init(FTM_InitTypeDef);
     36          static uint8 FTM_PinInit(FTM_Type *, FtmChnEnum_Type, PortPinsEnum_Type);
     37          static uint8 FTM_PinDeinit(FTM_Type *, FtmChnEnum_Type);
     38          
     39          
     40          /*
     41           * FTM_Init
     42           * FTM模块通用初始化，可初始化为PWM、输入捕获、正交解码、双边捕获模式
     43           *
     44           * 参数:
     45           *    ftm_init_structure--FTM初始化结构体，
     46           *                        具体定义见FTM_InitTypeDef
     47           *
     48           * 输出:
     49           *    0--配置错误
     50           *    1--配置成功
     51           */

   \                                 In section .text, align 2, keep-with-next
     52          uint8 FTM_Init(FTM_InitTypeDef ftm_init_structure)
     53          {
   \                     FTM_Init: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB53E             PUSH     {R1-R5,LR}
     54            uint8 result, i;
     55            //参数检查
     56            ASSERT( ftm_init_structure.FTM_Mode & 
     57                   (FTM_MODE_PWM|FTM_MODE_IC|FTM_MODE_QD|FTM_MODE_DEC));  //判断模式选择
   \        0x4   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \        0x8   0xF010 0x0F0F      TST      R0,#0xF
   \        0xC   0xD104             BNE.N    ??FTM_Init_0
   \        0xE   0x2139             MOVS     R1,#+57
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable9_2
   \       0x14   0x.... 0x....      BL       assert_failed
     58            
     59            // 使能FTM时钟模块
     60            if(ftm_init_structure.FTM_Ftmx == FTM0)
   \                     ??FTM_Init_0: (+1)
   \       0x18   0x9806             LDR      R0,[SP, #+24]
   \       0x1A   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x40038000
   \       0x1E   0x4288             CMP      R0,R1
   \       0x20   0xD107             BNE.N    ??FTM_Init_1
     61            {
     62              i=0; 
   \       0x22   0x2500             MOVS     R5,#+0
     63              SIM->SCGC6 |= SIM_SCGC6_FTM0_MASK;
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x4004803c
   \       0x28   0x6801             LDR      R1,[R0, #+0]
   \       0x2A   0xF051 0x7180      ORRS     R1,R1,#0x1000000
   \       0x2E   0x6001             STR      R1,[R0, #+0]
   \       0x30   0xE028             B.N      ??FTM_Init_2
     64            }
     65            else if(ftm_init_structure.FTM_Ftmx == FTM1)
   \                     ??FTM_Init_1: (+1)
   \       0x32   0x9806             LDR      R0,[SP, #+24]
   \       0x34   0x.... 0x....      LDR.W    R1,??DataTable9_5  ;; 0x40039000
   \       0x38   0x4288             CMP      R0,R1
   \       0x3A   0xD107             BNE.N    ??FTM_Init_3
     66            {
     67              i=1;
   \       0x3C   0x2501             MOVS     R5,#+1
     68              SIM->SCGC6 |= SIM_SCGC6_FTM1_MASK;
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x4004803c
   \       0x42   0x6801             LDR      R1,[R0, #+0]
   \       0x44   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \       0x48   0x6001             STR      R1,[R0, #+0]
   \       0x4A   0xE01B             B.N      ??FTM_Init_2
     69            }
     70            else if(ftm_init_structure.FTM_Ftmx == FTM2)
   \                     ??FTM_Init_3: (+1)
   \       0x4C   0x9806             LDR      R0,[SP, #+24]
   \       0x4E   0x.... 0x....      LDR.W    R1,??DataTable9_6  ;; 0x400b8000
   \       0x52   0x4288             CMP      R0,R1
   \       0x54   0xD107             BNE.N    ??FTM_Init_4
     71            {
     72              i=2;
   \       0x56   0x2502             MOVS     R5,#+2
     73              SIM->SCGC3 |= SIM_SCGC3_FTM2_MASK;
   \       0x58   0x.... 0x....      LDR.W    R0,??DataTable9_7  ;; 0x40048030
   \       0x5C   0x6801             LDR      R1,[R0, #+0]
   \       0x5E   0xF051 0x7180      ORRS     R1,R1,#0x1000000
   \       0x62   0x6001             STR      R1,[R0, #+0]
   \       0x64   0xE00E             B.N      ??FTM_Init_2
     74            }
     75          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
     76            else if(ftm_init_structure.FTM_Ftmx == FTM3)
   \                     ??FTM_Init_4: (+1)
   \       0x66   0x9806             LDR      R0,[SP, #+24]
   \       0x68   0x.... 0x....      LDR.W    R1,??DataTable9_8  ;; 0x400b9000
   \       0x6C   0x4288             CMP      R0,R1
   \       0x6E   0xD107             BNE.N    ??FTM_Init_5
     77            {
     78              i=3;
   \       0x70   0x2503             MOVS     R5,#+3
     79              SIM->SCGC3 |= SIM_SCGC3_FTM3_MASK;
   \       0x72   0x.... 0x....      LDR.W    R0,??DataTable9_7  ;; 0x40048030
   \       0x76   0x6801             LDR      R1,[R0, #+0]
   \       0x78   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \       0x7C   0x6001             STR      R1,[R0, #+0]
   \       0x7E   0xE001             B.N      ??FTM_Init_2
     80            }
     81          #endif
     82            else
     83            {
     84              return 0;
   \                     ??FTM_Init_5: (+1)
   \       0x80   0x2000             MOVS     R0,#+0
   \       0x82   0xE054             B.N      ??FTM_Init_6
     85            }
     86            
     87            if(ftm_init_structure.FTM_Mode & FTM_MODE_PWM)
   \                     ??FTM_Init_2: (+1)
   \       0x84   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \       0x88   0x07C0             LSLS     R0,R0,#+31
   \       0x8A   0xD50A             BPL.N    ??FTM_Init_7
     88            {
     89              result = FTM_PWM_Init(ftm_init_structure);
   \       0x8C   0xA906             ADD      R1,SP,#+24
   \       0x8E   0xB084             SUB      SP,SP,#+16
   \       0x90   0x4668             MOV      R0,SP
   \       0x92   0x221C             MOVS     R2,#+28
   \       0x94   0x.... 0x....      BL       __aeabi_memcpy4
   \       0x98   0xBC0F             POP      {R0-R3}
   \       0x9A   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init12FTM_PWM_InitE15FTM_InitTypeDef
   \       0x9E   0x0004             MOVS     R4,R0
   \       0xA0   0xE02B             B.N      ??FTM_Init_8
     90            }
     91            else if(ftm_init_structure.FTM_Mode & FTM_MODE_IC)
   \                     ??FTM_Init_7: (+1)
   \       0xA2   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \       0xA6   0x0780             LSLS     R0,R0,#+30
   \       0xA8   0xD50A             BPL.N    ??FTM_Init_9
     92            {
     93              result = FTM_IC_Init(ftm_init_structure);
   \       0xAA   0xA906             ADD      R1,SP,#+24
   \       0xAC   0xB084             SUB      SP,SP,#+16
   \       0xAE   0x4668             MOV      R0,SP
   \       0xB0   0x221C             MOVS     R2,#+28
   \       0xB2   0x.... 0x....      BL       __aeabi_memcpy4
   \       0xB6   0xBC0F             POP      {R0-R3}
   \       0xB8   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_IC_InitE15FTM_InitTypeDef
   \       0xBC   0x0004             MOVS     R4,R0
   \       0xBE   0xE01C             B.N      ??FTM_Init_8
     94            }
     95            else if(ftm_init_structure.FTM_Mode & FTM_MODE_QD)
   \                     ??FTM_Init_9: (+1)
   \       0xC0   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \       0xC4   0x0740             LSLS     R0,R0,#+29
   \       0xC6   0xD50A             BPL.N    ??FTM_Init_10
     96            {
     97              result = FTM_QD_Init(ftm_init_structure);
   \       0xC8   0xA906             ADD      R1,SP,#+24
   \       0xCA   0xB084             SUB      SP,SP,#+16
   \       0xCC   0x4668             MOV      R0,SP
   \       0xCE   0x221C             MOVS     R2,#+28
   \       0xD0   0x.... 0x....      BL       __aeabi_memcpy4
   \       0xD4   0xBC0F             POP      {R0-R3}
   \       0xD6   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_QD_InitE15FTM_InitTypeDef
   \       0xDA   0x0004             MOVS     R4,R0
   \       0xDC   0xE00D             B.N      ??FTM_Init_8
     98            }
     99            else if(ftm_init_structure.FTM_Mode & FTM_MODE_DEC)
   \                     ??FTM_Init_10: (+1)
   \       0xDE   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \       0xE2   0x0700             LSLS     R0,R0,#+28
   \       0xE4   0xD509             BPL.N    ??FTM_Init_8
    100            {
    101              result = FTM_DEC_Init(ftm_init_structure);
   \       0xE6   0xA906             ADD      R1,SP,#+24
   \       0xE8   0xB084             SUB      SP,SP,#+16
   \       0xEA   0x4668             MOV      R0,SP
   \       0xEC   0x221C             MOVS     R2,#+28
   \       0xEE   0x.... 0x....      BL       __aeabi_memcpy4
   \       0xF2   0xBC0F             POP      {R0-R3}
   \       0xF4   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init12FTM_DEC_InitE15FTM_InitTypeDef
   \       0xF8   0x0004             MOVS     R4,R0
    102            }
    103            
    104            if(result == 1)
   \                     ??FTM_Init_8: (+1)
   \       0xFA   0x0020             MOVS     R0,R4
   \       0xFC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xFE   0x2801             CMP      R0,#+1
   \      0x100   0xD113             BNE.N    ??FTM_Init_11
    105            {    
    106              //判断是否开启溢出中断
    107              if(ftm_init_structure.FTM_Isr!=NULL)
   \      0x102   0x980C             LDR      R0,[SP, #+48]
   \      0x104   0x2800             CMP      R0,#+0
   \      0x106   0xD010             BEQ.N    ??FTM_Init_11
    108              {      
    109                FTM_ISR[i] = ftm_init_structure.FTM_Isr;
   \      0x108   0x980C             LDR      R0,[SP, #+48]
   \      0x10A   0x.... 0x....      LDR.W    R1,??DataTable9_9
   \      0x10E   0x002A             MOVS     R2,R5
   \      0x110   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x112   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    110                if(ftm_init_structure.FTM_ToiEnable == TRUE)
   \      0x116   0xF89D 0x002C      LDRB     R0,[SP, #+44]
   \      0x11A   0x2801             CMP      R0,#+1
   \      0x11C   0xD105             BNE.N    ??FTM_Init_11
    111                {
    112                  ftm_init_structure.FTM_Ftmx->SC |= FTM_SC_TOIE_MASK;
   \      0x11E   0x9806             LDR      R0,[SP, #+24]
   \      0x120   0x6800             LDR      R0,[R0, #+0]
   \      0x122   0xF050 0x0040      ORRS     R0,R0,#0x40
   \      0x126   0x9906             LDR      R1,[SP, #+24]
   \      0x128   0x6008             STR      R0,[R1, #+0]
    113                }
    114              }
    115            }
    116            
    117            return result;
   \                     ??FTM_Init_11: (+1)
   \      0x12A   0x0020             MOVS     R0,R4
   \      0x12C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??FTM_Init_6: (+1)
   \      0x12E   0xBC3E             POP      {R1-R5}
   \      0x130   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    118          }
    119          
    120          /*
    121           * FTM_Deinit
    122           * FTM模块通用反初始化
    123           *
    124           * 参数:
    125           *    ftm_init_structure--FTM初始化结构体，
    126           *                        具体定义见FTM_InitTypeDef
    127           *
    128           * 输出:
    129           *    0--配置错误
    130           *    1--配置成功
    131           */

   \                                 In section .text, align 2, keep-with-next
    132          uint8 FTM_Deinit(FTM_InitTypeDef ftm_init_structure)
    133          {
   \                     FTM_Deinit: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB5E0             PUSH     {R5-R7,LR}
    134            if(ftm_init_structure.FTM_Ftmx == FTM0)
   \        0x4   0x9804             LDR      R0,[SP, #+16]
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x40038000
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD106             BNE.N    ??FTM_Deinit_0
    135            {
    136              SIM->SCGC6 &= ~SIM_SCGC6_FTM0_MASK;
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x4004803c
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0xF031 0x7180      BICS     R1,R1,#0x1000000
   \       0x18   0x6001             STR      R1,[R0, #+0]
   \       0x1A   0xE025             B.N      ??FTM_Deinit_1
    137            }
    138            else if(ftm_init_structure.FTM_Ftmx == FTM1)
   \                     ??FTM_Deinit_0: (+1)
   \       0x1C   0x9804             LDR      R0,[SP, #+16]
   \       0x1E   0x.... 0x....      LDR.W    R1,??DataTable9_5  ;; 0x40039000
   \       0x22   0x4288             CMP      R0,R1
   \       0x24   0xD106             BNE.N    ??FTM_Deinit_2
    139            {
    140              SIM->SCGC6 &= ~SIM_SCGC6_FTM1_MASK;
   \       0x26   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x4004803c
   \       0x2A   0x6801             LDR      R1,[R0, #+0]
   \       0x2C   0xF031 0x7100      BICS     R1,R1,#0x2000000
   \       0x30   0x6001             STR      R1,[R0, #+0]
   \       0x32   0xE019             B.N      ??FTM_Deinit_1
    141            }
    142            else if(ftm_init_structure.FTM_Ftmx == FTM2)
   \                     ??FTM_Deinit_2: (+1)
   \       0x34   0x9804             LDR      R0,[SP, #+16]
   \       0x36   0x.... 0x....      LDR.W    R1,??DataTable9_6  ;; 0x400b8000
   \       0x3A   0x4288             CMP      R0,R1
   \       0x3C   0xD106             BNE.N    ??FTM_Deinit_3
    143            {
    144              SIM->SCGC3 &= ~SIM_SCGC3_FTM2_MASK;
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable9_7  ;; 0x40048030
   \       0x42   0x6801             LDR      R1,[R0, #+0]
   \       0x44   0xF031 0x7180      BICS     R1,R1,#0x1000000
   \       0x48   0x6001             STR      R1,[R0, #+0]
   \       0x4A   0xE00D             B.N      ??FTM_Deinit_1
    145            }
    146          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    147            else if(ftm_init_structure.FTM_Ftmx == FTM3)
   \                     ??FTM_Deinit_3: (+1)
   \       0x4C   0x9804             LDR      R0,[SP, #+16]
   \       0x4E   0x.... 0x....      LDR.W    R1,??DataTable9_8  ;; 0x400b9000
   \       0x52   0x4288             CMP      R0,R1
   \       0x54   0xD106             BNE.N    ??FTM_Deinit_4
    148            {
    149              SIM->SCGC3 &= ~SIM_SCGC3_FTM3_MASK;
   \       0x56   0x.... 0x....      LDR.W    R0,??DataTable9_7  ;; 0x40048030
   \       0x5A   0x6801             LDR      R1,[R0, #+0]
   \       0x5C   0xF031 0x7100      BICS     R1,R1,#0x2000000
   \       0x60   0x6001             STR      R1,[R0, #+0]
   \       0x62   0xE001             B.N      ??FTM_Deinit_1
    150            }
    151          #endif
    152            else
    153            {
    154              return 0;
   \                     ??FTM_Deinit_4: (+1)
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0xE008             B.N      ??FTM_Deinit_5
    155            }
    156            
    157            return FTM_DisableIrq(ftm_init_structure);
   \                     ??FTM_Deinit_1: (+1)
   \       0x68   0xA904             ADD      R1,SP,#+16
   \       0x6A   0xB084             SUB      SP,SP,#+16
   \       0x6C   0x4668             MOV      R0,SP
   \       0x6E   0x221C             MOVS     R2,#+28
   \       0x70   0x.... 0x....      BL       __aeabi_memcpy4
   \       0x74   0xBC0F             POP      {R0-R3}
   \       0x76   0x.... 0x....      BL       FTM_DisableIrq
   \                     ??FTM_Deinit_5: (+1)
   \       0x7A   0xBC0E             POP      {R1-R3}
   \       0x7C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    158          }
    159          
    160          /*
    161           * FTM_PWM_Enable
    162           * FTM模块PWM模式输出使能，配置输出通道、占空比、指定对应的引脚、对齐方式
    163           * 
    164           * 参数:
    165           *    ftmx--FTMx模块号
    166           *      |__FTM0          --FTM0
    167           *      |__FTM1          --FTM1
    168           *      |__FTM2          --FTM2
    169           *      <注:只有MK60F系列含有FTM3>
    170           *      |__FTM3          --FTM3
    171           *    chn--PWM输出通道
    172           *      <注:只有MK60F系列含有FTM3>
    173           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    174           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    175           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    176           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    177           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    178           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    179           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    180           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    181           *    duty--PWM输出占空比
    182           *      |__0~10000--占空比0.00%~100.00%
    183           *    pin--FTMx通道对应的引脚
    184           *      FTM0
    185           *       FTM_Ch0-PTA3\PTC1
    186           *       FTM_Ch1-PTA4\PTC2
    187           *       FTM_Ch2-PTA5\PTC3
    188           *       FTM_Ch3-PTA6\PTC4
    189           *       FTM_Ch4-PTA7\PTD4
    190           *       FTM_Ch5-PTA0\PTD5
    191           *       FTM_Ch6-PTA1\PTD6
    192           *       FTM_Ch7-PTA2\PTD7
    193           *      FTM1
    194           *       FTM_Ch0-PTA8\PTA12\PTB0
    195           *       FTM_Ch1-PTA9\PTA13\PTB1
    196           *      FTM2
    197           *       FTM_Ch0-PTA10\PTB18
    198           *       FTM_Ch1-PTA11\PTB19
    199           *      <注:只有MK60F系列含有FTM3>
    200           *      FTM3
    201           *       FTM_Ch0-PTE5\PTD0
    202           *       FTM_Ch1-PTE6\PTD1
    203           *       FTM_Ch2-PTE7\PTD2
    204           *       FTM_Ch3-PTE8\PTD3
    205           *       FTM_Ch4-PTE9\PTC8
    206           *       FTM_Ch5-PTE10\PTC9
    207           *       FTM_Ch6-PTE11\PTC10
    208           *       FTM_Ch7-PTE12\PTC11
    209           *    align--脉冲对齐方式
    210           *      |__ALIGN_LEFT    --左对齐
    211           *      |__ALIGN_RIGHT   --右对齐
    212           *
    213           * 输出:
    214           *    0--配置错误
    215           *    1--配置成功
    216           */

   \                                 In section .text, align 2, keep-with-next
    217          uint8 FTM_PWM_Enable(FTM_Type *ftmx, FtmChnEnum_Type chn, uint32 duty, PortPinsEnum_Type pin, uint8 align)
    218          {
   \                     FTM_PWM_Enable: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0x9C08             LDR      R4,[SP, #+32]
    219            uint32 cv;
    220            vuint32 mod;
    221            
    222            //参数检查
    223            ASSERT( duty <= 10000 );                  //判断占空比
   \        0xE   0xF242 0x7011      MOVW     R0,#+10001
   \       0x12   0x4287             CMP      R7,R0
   \       0x14   0xD304             BCC.N    ??FTM_PWM_Enable_0
   \       0x16   0x21DF             MOVS     R1,#+223
   \       0x18   0x.... 0x....      LDR.W    R0,??DataTable9_2
   \       0x1C   0x.... 0x....      BL       assert_failed
    224            
    225            if(!FTM_PinInit(ftmx, chn, pin))
   \                     ??FTM_PWM_Enable_0: (+1)
   \       0x20   0x4642             MOV      R2,R8
   \       0x22   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x24   0x0031             MOVS     R1,R6
   \       0x26   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x28   0x0028             MOVS     R0,R5
   \       0x2A   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_PinInitEP8FTM_Type10FtmChnEnum12PortPinsEnum
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD101             BNE.N    ??FTM_PWM_Enable_1
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0xE000             B.N      ??FTM_PWM_Enable_2
   \                     ??FTM_PWM_Enable_1: (+1)
   \       0x36   0x2000             MOVS     R0,#+0
   \                     ??FTM_PWM_Enable_2: (+1)
   \       0x38   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD001             BEQ.N    ??FTM_PWM_Enable_3
    226              return 0;
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0xE01D             B.N      ??FTM_PWM_Enable_4
    227            
    228            //如果是右对齐，100%-占空比
    229            if(align == ALIGN_RIGHT)
   \                     ??FTM_PWM_Enable_3: (+1)
   \       0x42   0x0020             MOVS     R0,R4
   \       0x44   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x46   0x2824             CMP      R0,#+36
   \       0x48   0xD102             BNE.N    ??FTM_PWM_Enable_5
    230            {
    231              duty = 10000 - duty;
   \       0x4A   0xF242 0x7010      MOVW     R0,#+10000
   \       0x4E   0x1BC7             SUBS     R7,R0,R7
    232            }
    233            
    234            //占空比 = (CnV-CNTIN)/(MOD-CNTIN+1)
    235            mod = ftmx->MOD;
   \                     ??FTM_PWM_Enable_5: (+1)
   \       0x50   0x68A8             LDR      R0,[R5, #+8]
   \       0x52   0x9000             STR      R0,[SP, #+0]
    236            cv = (duty*(mod-0+1)+0)/10000;
   \       0x54   0x9800             LDR      R0,[SP, #+0]
   \       0x56   0x1C40             ADDS     R0,R0,#+1
   \       0x58   0xFB00 0xF007      MUL      R0,R0,R7
   \       0x5C   0xF242 0x7110      MOVW     R1,#+10000
   \       0x60   0xFBB0 0xF1F1      UDIV     R1,R0,R1
    237            
    238            // 配置FTM通道控制寄存器 
    239            // 通道模式 MSB:MSA-1X, 通道边缘选择 左对齐 ELSB:ELSA-10
    240            // 通道模式 MSB:MSA-1X, 通道边缘选择 右对齐 ELSB:ELSA-X1
    241            ftmx->CONTROLS[chn].CnSC = align;
   \       0x64   0x0020             MOVS     R0,R4
   \       0x66   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x68   0x0032             MOVS     R2,R6
   \       0x6A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x6C   0xEB05 0x02C2      ADD      R2,R5,R2, LSL #+3
   \       0x70   0x60D0             STR      R0,[R2, #+12]
    242            // 配置FTM通道值
    243            ftmx->CONTROLS[chn].CnV  = cv;
   \       0x72   0x0030             MOVS     R0,R6
   \       0x74   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x76   0xEB05 0x00C0      ADD      R0,R5,R0, LSL #+3
   \       0x7A   0x6101             STR      R1,[R0, #+16]
    244            
    245            return 1;
   \       0x7C   0x2001             MOVS     R0,#+1
   \                     ??FTM_PWM_Enable_4: (+1)
   \       0x7E   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    246          }
    247          
    248          /*
    249           * FTM_PWM_ChangeDuty
    250           * 变更FTM模块PWM模式指定通道的输出占空比
    251           *
    252           * 参数:
    253           *    ftmx--FTMx模块号
    254           *      |__FTM0          --FTM0
    255           *      |__FTM1          --FTM1
    256           *      |__FTM2          --FTM2
    257           *      <注:只有MK60F系列含有FTM3>
    258           *      |__FTM3          --FTM3
    259           *    chn--PWM输出通道
    260           *      <注:只有MK60F系列含有FTM3>
    261           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    262           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    263           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    264           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    265           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    266           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    267           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    268           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    269           *    duty--PWM输出占空比
    270           *      |__0~10000--占空比0.00%~100.00%
    271           *
    272           * 输出:
    273           *    0--配置错误
    274           *    1--配置成功
    275           */

   \                                 In section .text, align 2, keep-with-next
    276          uint8 FTM_PWM_ChangeDuty(FTM_Type *ftmx, FtmChnEnum_Type chn, uint32 duty)
    277          {
   \                     FTM_PWM_ChangeDuty: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    278            uint32 cv;
    279            vuint32 mod;
    280            
    281            //参数检查
    282            ASSERT( duty <= 10000 );                  //判断占空比
   \        0x8   0xF242 0x7011      MOVW     R0,#+10001
   \        0xC   0x4286             CMP      R6,R0
   \        0xE   0xD305             BCC.N    ??FTM_PWM_ChangeDuty_0
   \       0x10   0xF44F 0x718D      MOV      R1,#+282
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable9_2
   \       0x18   0x.... 0x....      BL       assert_failed
    283            //if(duty < 0) duty = 0;      //Warning[Pe186]: pointless comparison of unsigned integer with zero.
    284            
    285            //如果是右对齐，100%-占空比
    286            if(ftmx->CONTROLS[chn].CnSC & FTM_CnSC_ELSA_MASK)
   \                     ??FTM_PWM_ChangeDuty_0: (+1)
   \       0x1C   0x0028             MOVS     R0,R5
   \       0x1E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x20   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0x24   0x68C0             LDR      R0,[R0, #+12]
   \       0x26   0x0740             LSLS     R0,R0,#+29
   \       0x28   0xD502             BPL.N    ??FTM_PWM_ChangeDuty_1
    287            {
    288              duty = 10000 - duty;
   \       0x2A   0xF242 0x7010      MOVW     R0,#+10000
   \       0x2E   0x1B86             SUBS     R6,R0,R6
    289            }
    290            
    291            //占空比 = (CnV-CNTIN)/(MOD-CNTIN+1)
    292            mod = ftmx->MOD;
   \                     ??FTM_PWM_ChangeDuty_1: (+1)
   \       0x30   0x68A0             LDR      R0,[R4, #+8]
   \       0x32   0x9000             STR      R0,[SP, #+0]
    293            cv = (duty*(mod-0+1)+0)/10000;
   \       0x34   0x9800             LDR      R0,[SP, #+0]
   \       0x36   0x1C40             ADDS     R0,R0,#+1
   \       0x38   0xFB00 0xF006      MUL      R0,R0,R6
   \       0x3C   0xF242 0x7110      MOVW     R1,#+10000
   \       0x40   0xFBB0 0xF1F1      UDIV     R1,R0,R1
    294           
    295            // 配置FTM通道值
    296            ftmx->CONTROLS[chn].CnV = cv;
   \       0x44   0x0028             MOVS     R0,R5
   \       0x46   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x48   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0x4C   0x6101             STR      R1,[R0, #+16]
    297            
    298            return 1;
   \       0x4E   0x2001             MOVS     R0,#+1
   \                     ??FTM_PWM_ChangeDuty_2: (+1)
   \       0x50   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    299          }
    300          
    301          /*
    302           * FTM_DisableChn
    303           * 禁用FTM模块指定通道的输出、输入
    304           *
    305           * 参数:
    306           *    ftmx--FTMx模块号
    307           *      |__FTM0          --FTM0
    308           *      |__FTM1          --FTM1
    309           *      |__FTM2          --FTM2
    310           *      <注:只有MK60F系列含有FTM3>
    311           *      |__FTM3          --FTM3
    312           *    chn--PWM输出通道
    313           *      <注:只有MK60F系列含有FTM3>
    314           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    315           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    316           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    317           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    318           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    319           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    320           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    321           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    322           *
    323           * 输出:
    324           *    0--配置错误
    325           *    1--配置成功
    326           */

   \                                 In section .text, align 2, keep-with-next
    327          uint8 FTM_DisableChn(FTM_Type *ftmx, FtmChnEnum_Type chn)
    328          {
   \                     FTM_DisableChn: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    329            FTM_PinDeinit(ftmx, chn);
   \        0x6   0x0029             MOVS     R1,R5
   \        0x8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init13FTM_PinDeinitEP8FTM_Type10FtmChnEnum
    330            ftmx->CONTROLS[chn].CnSC = 0;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x0029             MOVS     R1,R5
   \       0x14   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x16   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \       0x1A   0x60C8             STR      R0,[R1, #+12]
    331            ftmx->CONTROLS[chn].CnV  = 0;
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x0029             MOVS     R1,R5
   \       0x20   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x22   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \       0x26   0x6108             STR      R0,[R1, #+16]
    332            
    333            return 1;
   \       0x28   0x2001             MOVS     R0,#+1
   \       0x2A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    334          }
    335          
    336          
    337          
    338          /*
    339           * FTM_IC_Enable
    340           * FTM模块输入捕获模式输出使能，配置输入通道、指定对应的引脚、捕获边缘
    341           *
    342           * 参数:
    343           *    ftmx--FTMx模块号
    344           *      |__FTM0          --FTM0
    345           *      |__FTM1          --FTM1
    346           *      |__FTM2          --FTM2
    347           *      <注:只有MK60F系列含有FTM3>
    348           *      |__FTM3          --FTM3
    349           *    chn--PWM输出通道
    350           *      <注:只有MK60F系列含有FTM3>
    351           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    352           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    353           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    354           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    355           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    356           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    357           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    358           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    359           *    duty--PWM输出占空比
    360           *      |__0~10000--占空比0.00%~100.00%
    361           *    pin--FTMx通道对应的引脚
    362           *      FTM0
    363           *       FTM_Ch0-PTA3\PTC1
    364           *       FTM_Ch1-PTA4\PTC2
    365           *       FTM_Ch2-PTA5\PTC3
    366           *       FTM_Ch3-PTA6\PTC4
    367           *       FTM_Ch4-PTA7\PTD4
    368           *       FTM_Ch5-PTA0\PTD5
    369           *       FTM_Ch6-PTA1\PTD6
    370           *       FTM_Ch7-PTA2\PTD7
    371           *      FTM1
    372           *       FTM_Ch0-PTA8\PTA12\PTB0
    373           *       FTM_Ch1-PTA9\PTA13\PTB1
    374           *      FTM2
    375           *       FTM_Ch0-PTA10\PTB18
    376           *       FTM_Ch1-PTA11\PTB19
    377           *      <注:只有MK60F系列含有FTM3>
    378           *      FTM3
    379           *       FTM_Ch0-PTE5\PTD0
    380           *       FTM_Ch1-PTE6\PTD1
    381           *       FTM_Ch2-PTE7\PTD2
    382           *       FTM_Ch3-PTE8\PTD3
    383           *       FTM_Ch4-PTE9\PTC8
    384           *       FTM_Ch5-PTE10\PTC9
    385           *       FTM_Ch6-PTE11\PTC10
    386           *       FTM_Ch7-PTE12\PTC11
    387           *    capture_edge--捕获边缘设置
    388           *      |__CAPTURE_RI    --上升沿捕获
    389           *      |__CAPTURE_FA    --下降沿捕获
    390           *      |__CAPTURE_RIFA  --上升下降沿捕获
    391           *
    392           * 输出:
    393           *    0--配置错误
    394           *    1--配置成功
    395           */

   \                                 In section .text, align 2, keep-with-next
    396          uint8 FTM_IC_Enable(FTM_Type *ftmx, FtmChnEnum_Type chn, PortPinsEnum_Type pin, uint8 capture_edge)
    397          {
   \                     FTM_IC_Enable: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0x001F             MOVS     R7,R3
    398            if(!FTM_PinInit(ftmx, chn, pin))
   \        0xA   0x0032             MOVS     R2,R6
   \        0xC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \        0xE   0x0029             MOVS     R1,R5
   \       0x10   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_PinInitEP8FTM_Type10FtmChnEnum12PortPinsEnum
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD101             BNE.N    ??FTM_IC_Enable_0
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0xE000             B.N      ??FTM_IC_Enable_1
   \                     ??FTM_IC_Enable_0: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \                     ??FTM_IC_Enable_1: (+1)
   \       0x22   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD001             BEQ.N    ??FTM_IC_Enable_2
    399              return 0;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xE04F             B.N      ??FTM_IC_Enable_3
    400            
    401            ftmx->CONTROLS[chn].CnSC = 0x00;
   \                     ??FTM_IC_Enable_2: (+1)
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0x0029             MOVS     R1,R5
   \       0x30   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x32   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \       0x36   0x60C8             STR      R0,[R1, #+12]
    402            
    403            ftmx->CONTROLS[chn].CnSC |= capture_edge;        
   \       0x38   0x0028             MOVS     R0,R5
   \       0x3A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x3C   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0x40   0x68C1             LDR      R1,[R0, #+12]
   \       0x42   0x0038             MOVS     R0,R7
   \       0x44   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x46   0x4301             ORRS     R1,R0,R1
   \       0x48   0x0028             MOVS     R0,R5
   \       0x4A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x4C   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0x50   0x60C1             STR      R1,[R0, #+12]
    404            
    405            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_CHF_MASK);
   \       0x52   0x0028             MOVS     R0,R5
   \       0x54   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x56   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0x5A   0x68C0             LDR      R0,[R0, #+12]
   \       0x5C   0xF030 0x0080      BICS     R0,R0,#0x80
   \       0x60   0x0029             MOVS     R1,R5
   \       0x62   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x64   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \       0x68   0x60C8             STR      R0,[R1, #+12]
    406            ftmx->CONTROLS[chn].CnSC |= FTM_CnSC_CHIE_MASK;         //使能通道捕获输入中断
   \       0x6A   0x0028             MOVS     R0,R5
   \       0x6C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x6E   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0x72   0x68C0             LDR      R0,[R0, #+12]
   \       0x74   0xF050 0x0040      ORRS     R0,R0,#0x40
   \       0x78   0x0029             MOVS     R1,R5
   \       0x7A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x7C   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \       0x80   0x60C8             STR      R0,[R1, #+12]
    407            
    408            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_MSB_MASK);
   \       0x82   0x0028             MOVS     R0,R5
   \       0x84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x86   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0x8A   0x68C0             LDR      R0,[R0, #+12]
   \       0x8C   0xF030 0x0020      BICS     R0,R0,#0x20
   \       0x90   0x0029             MOVS     R1,R5
   \       0x92   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x94   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \       0x98   0x60C8             STR      R0,[R1, #+12]
    409            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_MSA_MASK);       //配置成Input capture模式
   \       0x9A   0x0028             MOVS     R0,R5
   \       0x9C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x9E   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0xA2   0x68C0             LDR      R0,[R0, #+12]
   \       0xA4   0xF030 0x0010      BICS     R0,R0,#0x10
   \       0xA8   0x0029             MOVS     R1,R5
   \       0xAA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xAC   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \       0xB0   0x60C8             STR      R0,[R1, #+12]
    410            
    411            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_DMA_MASK);       //关闭DMA
   \       0xB2   0x0028             MOVS     R0,R5
   \       0xB4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xB6   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \       0xBA   0x68C0             LDR      R0,[R0, #+12]
   \       0xBC   0x0840             LSRS     R0,R0,#+1
   \       0xBE   0x0040             LSLS     R0,R0,#+1
   \       0xC0   0x0029             MOVS     R1,R5
   \       0xC2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0xC4   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \       0xC8   0x60C8             STR      R0,[R1, #+12]
    412            
    413            return 1;
   \       0xCA   0x2001             MOVS     R0,#+1
   \                     ??FTM_IC_Enable_3: (+1)
   \       0xCC   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    414          }
    415          
    416          /*
    417           * FTM_IsTOF
    418           * 判断FTMx是否产生计数溢出中断标志
    419           * 
    420           * 参数:
    421           *    ftmx--FTMx模块号
    422           *      |__FTM0          --FTM0
    423           *      |__FTM1          --FTM1
    424           *      |__FTM2          --FTM2
    425           *      <注:只有MK60F系列含有FTM3>
    426           *      |__FTM3          --FTM3
    427           *
    428           * 输出:
    429           *    TRUE、FALSE
    430           *
    431           */
    432          __INLINE boolean FTM_IsTOF(FTM_Type *ftmx)
    433          {
    434            return (boolean)((ftmx->SC & FTM_SC_TOF_MASK)>>FTM_SC_TOF_SHIFT);
    435          }
    436          
    437          /*
    438           * FTM_ClearTOF
    439           * 清除FTMx计数器溢出中断标志
    440           * 
    441           * 参数:
    442           *    ftmx--FTMx模块号
    443           *      |__FTM0          --FTM0
    444           *      |__FTM1          --FTM1
    445           *      |__FTM2          --FTM2
    446           *      <注:只有MK60F系列含有FTM3>
    447           *      |__FTM3          --FTM3
    448           *
    449           * 输出:
    450           *    无
    451           *
    452           */
    453          __INLINE void FTM_ClearTOF(FTM_Type *ftmx)
    454          {
    455            ftmx->SC = ftmx->SC & ~FTM_SC_TOF_MASK;
    456          }
    457          
    458          /*
    459           * FTM_IsCHnF
    460           * 判断通道n是否产生中断标志
    461           * 
    462           * 参数:
    463           *    ftmx--FTMx模块号
    464           *      |__FTM0          --FTM0
    465           *      |__FTM1          --FTM1
    466           *      |__FTM2          --FTM2
    467           *      <注:只有MK60F系列含有FTM3>
    468           *      |__FTM3          --FTM3
    469           *    chn--PWM输出通道
    470           *      <注:只有MK60F系列含有FTM3>
    471           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    472           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    473           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    474           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    475           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    476           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    477           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    478           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    479           *
    480           * 输出:
    481           *    TRUE、FALSE
    482           *
    483           */
    484          
    485          
    486          /*
    487           * FTM_ClearCHnF
    488           * 清除通道n中断标志
    489           * 
    490           * 参数:
    491           *    ftmx--FTMx模块号
    492           *      |__FTM0          --FTM0
    493           *      |__FTM1          --FTM1
    494           *      |__FTM2          --FTM2
    495           *      <注:只有MK60F系列含有FTM3>
    496           *      |__FTM3          --FTM3
    497           *    chn--PWM输出通道
    498           *      <注:只有MK60F系列含有FTM3>
    499           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    500           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    501           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    502           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    503           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    504           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    505           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    506           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    507           *
    508           * 输出:
    509           *    无
    510           *
    511           */
    512          
    513          
    514          /*
    515           * FTM_GetChVal
    516           * 获取FTMx通道n捕获的FTMx计数值
    517           * 
    518           * 参数:
    519           *    ftmx--FTMx模块号
    520           *      |__FTM0          --FTM0
    521           *      |__FTM1          --FTM1
    522           *      |__FTM2          --FTM2
    523           *      <注:只有MK60F系列含有FTM3>
    524           *      |__FTM3          --FTM3
    525           *    chn--PWM输出通道
    526           *      <注:只有MK60F系列含有FTM3>
    527           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    528           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    529           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    530           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    531           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    532           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    533           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    534           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    535           *
    536           * 输出:
    537           *    0x1~0xFFFF
    538           *
    539           */
    540          
    541          
    542          /*
    543           * FTM_GetClkDiv
    544           * 获取FTMx时钟分频系数
    545           * 
    546           * 参数:
    547           *    ftmx--FTMx模块号
    548           *      |__FTM0          --FTM0
    549           *      |__FTM1          --FTM1
    550           *      |__FTM2          --FTM2
    551           *      <注:只有MK60F系列含有FTM3>
    552           *      |__FTM3          --FTM3
    553           *
    554           * 输出:
    555           *    1、2、4、8、16、32、64、128
    556           *
    557           */
    558          __INLINE uint8 FTM_GetClkDiv(FTM_Type *ftmx)
    559          {
    560            return 1u<<((ftmx->SC & FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT);    //获得时钟分频系数
    561          }
    562          
    563          /*
    564           * FTM_GetCounter
    565           * 获取FTMx计数器值
    566           * 
    567           * 参数:
    568           *    ftmx--FTMx模块号
    569           *      |__FTM0          --FTM0
    570           *      |__FTM1          --FTM1
    571           *      |__FTM2          --FTM2
    572           *      <注:只有MK60F系列含有FTM3>
    573           *      |__FTM3          --FTM3
    574           *
    575           * 输出:
    576           *    16位整形计数值
    577           *
    578           */
    579          __INLINE uint16 FTM_GetCounter(FTM_Type *ftmx)
    580          {
    581            return ftmx->CNT;        //获取FTMx计数器值
    582          }
    583          
    584          /*
    585           * FTM_ClearCounter
    586           * 清空FTMx计数器
    587           * 
    588           * 参数:
    589           *    ftmx--FTMx模块号
    590           *      |__FTM0          --FTM0
    591           *      |__FTM1          --FTM1
    592           *      |__FTM2          --FTM2
    593           *      <注:只有MK60F系列含有FTM3>
    594           *      |__FTM3          --FTM3
    595           *
    596           * 输出:
    597           *    无
    598           *
    599           */
    600          
    601          
    602          /*
    603           * FTM_EnableIrq
    604           * 使能FTMx中断
    605           * 
    606           * 参数:
    607           *    ftm_init_structure--FTM初始化结构体，
    608           *                        具体定义见FTM_InitTypeDef
    609           *
    610           * 输出:
    611           *    0--配置错误
    612           *    1--配置成功
    613           *
    614           */

   \                                 In section .text, align 2, keep-with-next
    615          uint8 FTM_EnableIrq(FTM_InitTypeDef ftm_init_structure)
    616          {
   \                     FTM_EnableIrq: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB538             PUSH     {R3-R5,LR}
    617            uint8 i;
    618            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \        0x4   0x9D04             LDR      R5,[SP, #+16]
    619            
    620            if(ftmx == FTM0)
   \        0x6   0x....             LDR.N    R0,??DataTable9_3  ;; 0x40038000
   \        0x8   0x4285             CMP      R5,R0
   \        0xA   0xD101             BNE.N    ??FTM_EnableIrq_0
    621              i=0;
   \        0xC   0x2400             MOVS     R4,#+0
   \        0xE   0xE010             B.N      ??FTM_EnableIrq_1
    622            else if(ftmx == FTM1)
   \                     ??FTM_EnableIrq_0: (+1)
   \       0x10   0x....             LDR.N    R0,??DataTable9_5  ;; 0x40039000
   \       0x12   0x4285             CMP      R5,R0
   \       0x14   0xD101             BNE.N    ??FTM_EnableIrq_2
    623              i=1;
   \       0x16   0x2401             MOVS     R4,#+1
   \       0x18   0xE00B             B.N      ??FTM_EnableIrq_1
    624            else if(ftmx == FTM2)
   \                     ??FTM_EnableIrq_2: (+1)
   \       0x1A   0x....             LDR.N    R0,??DataTable9_6  ;; 0x400b8000
   \       0x1C   0x4285             CMP      R5,R0
   \       0x1E   0xD101             BNE.N    ??FTM_EnableIrq_3
    625              i=2;
   \       0x20   0x2402             MOVS     R4,#+2
   \       0x22   0xE006             B.N      ??FTM_EnableIrq_1
    626          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    627            else if(ftmx == FTM3)
   \                     ??FTM_EnableIrq_3: (+1)
   \       0x24   0x....             LDR.N    R0,??DataTable9_8  ;; 0x400b9000
   \       0x26   0x4285             CMP      R5,R0
   \       0x28   0xD101             BNE.N    ??FTM_EnableIrq_4
    628              i=3;
   \       0x2A   0x2403             MOVS     R4,#+3
   \       0x2C   0xE001             B.N      ??FTM_EnableIrq_1
    629          #endif
    630            else
    631              return 0;
   \                     ??FTM_EnableIrq_4: (+1)
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xE005             B.N      ??FTM_EnableIrq_5
    632          
    633            enable_irq((IRQn_Type)(FTM0_IRQn + i));
   \                     ??FTM_EnableIrq_1: (+1)
   \       0x32   0xF114 0x003E      ADDS     R0,R4,#+62
   \       0x36   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x38   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init16__NVIC_EnableIRQE4IRQn
    634            
    635            return 1;
   \       0x3C   0x2001             MOVS     R0,#+1
   \                     ??FTM_EnableIrq_5: (+1)
   \       0x3E   0xBC32             POP      {R1,R4,R5}
   \       0x40   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    636          }
    637          
    638          /*
    639           * FTM_DisableIrq
    640           * 禁用FTMx中断
    641           * 
    642           * 参数:
    643           *    ftm_init_structure--FTM初始化结构体，
    644           *                        具体定义见FTM_InitTypeDef
    645           *
    646           * 输出:
    647           *    0--配置错误
    648           *    1--配置成功
    649           *
    650           */

   \                                 In section .text, align 2, keep-with-next
    651          uint8 FTM_DisableIrq(FTM_InitTypeDef ftm_init_structure)
    652          {
   \                     FTM_DisableIrq: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB538             PUSH     {R3-R5,LR}
    653            uint8 i;
    654            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \        0x4   0x9D04             LDR      R5,[SP, #+16]
    655            
    656            if(ftmx == FTM0)
   \        0x6   0x....             LDR.N    R0,??DataTable9_3  ;; 0x40038000
   \        0x8   0x4285             CMP      R5,R0
   \        0xA   0xD101             BNE.N    ??FTM_DisableIrq_0
    657              i=0;
   \        0xC   0x2400             MOVS     R4,#+0
   \        0xE   0xE010             B.N      ??FTM_DisableIrq_1
    658            else if(ftmx == FTM1)
   \                     ??FTM_DisableIrq_0: (+1)
   \       0x10   0x....             LDR.N    R0,??DataTable9_5  ;; 0x40039000
   \       0x12   0x4285             CMP      R5,R0
   \       0x14   0xD101             BNE.N    ??FTM_DisableIrq_2
    659              i=1;
   \       0x16   0x2401             MOVS     R4,#+1
   \       0x18   0xE00B             B.N      ??FTM_DisableIrq_1
    660            else if(ftmx == FTM2)
   \                     ??FTM_DisableIrq_2: (+1)
   \       0x1A   0x....             LDR.N    R0,??DataTable9_6  ;; 0x400b8000
   \       0x1C   0x4285             CMP      R5,R0
   \       0x1E   0xD101             BNE.N    ??FTM_DisableIrq_3
    661              i=2;
   \       0x20   0x2402             MOVS     R4,#+2
   \       0x22   0xE006             B.N      ??FTM_DisableIrq_1
    662          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    663            else if(ftmx == FTM3)
   \                     ??FTM_DisableIrq_3: (+1)
   \       0x24   0x....             LDR.N    R0,??DataTable9_8  ;; 0x400b9000
   \       0x26   0x4285             CMP      R5,R0
   \       0x28   0xD101             BNE.N    ??FTM_DisableIrq_4
    664              i=3;
   \       0x2A   0x2403             MOVS     R4,#+3
   \       0x2C   0xE001             B.N      ??FTM_DisableIrq_1
    665          #endif
    666            else
    667              return 0;
   \                     ??FTM_DisableIrq_4: (+1)
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xE005             B.N      ??FTM_DisableIrq_5
    668          
    669            disable_irq((IRQn_Type)(FTM0_IRQn + i));
   \                     ??FTM_DisableIrq_1: (+1)
   \       0x32   0xF114 0x003E      ADDS     R0,R4,#+62
   \       0x36   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x38   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init17__NVIC_DisableIRQE4IRQn
    670            
    671            return 1;
   \       0x3C   0x2001             MOVS     R0,#+1
   \                     ??FTM_DisableIrq_5: (+1)
   \       0x3E   0xBC32             POP      {R1,R4,R5}
   \       0x40   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    672          }
    673          
    674          /*
    675           * FTM_QD_Enable
    676           * FTM模块正交解码模式输入使能，配置输入通道PHA和PHB
    677           *
    678           * 参数:
    679           *    ftmx--FTMx模块号
    680           *      |__FTM1          --FTM1
    681           *      |__FTM2          --FTM2
    682           *    pha--PHA输入通道引脚
    683           *      FTM1
    684           *        PTA8\PTA12\PTB0
    685           *      FTM2
    686           *        PTA10\PTB18
    687           *    phb--PHB输入通道引脚
    688           *      FTM1
    689           *        PTA9\PTA13\PTB1
    690           *      FTM2
    691           *        PTA11\PTB19
    692           *
    693           * 输出:
    694           *    0--配置错误
    695           *    1--配置成功
    696           */

   \                                 In section .text, align 2, keep-with-next
    697          uint8 FTM_QD_Enable(FTM_Type *ftmx, PortPinsEnum_Type pha, PortPinsEnum_Type phb)
    698          {
   \                     FTM_QD_Enable: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    699            if(!FTM_PinInit(ftmx, FTM_PhA, pha))
   \        0x8   0x002A             MOVS     R2,R5
   \        0xA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \        0xC   0x2108             MOVS     R1,#+8
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_PinInitEP8FTM_Type10FtmChnEnum12PortPinsEnum
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD101             BNE.N    ??FTM_QD_Enable_0
   \       0x18   0x2001             MOVS     R0,#+1
   \       0x1A   0xE000             B.N      ??FTM_QD_Enable_1
   \                     ??FTM_QD_Enable_0: (+1)
   \       0x1C   0x2000             MOVS     R0,#+0
   \                     ??FTM_QD_Enable_1: (+1)
   \       0x1E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD001             BEQ.N    ??FTM_QD_Enable_2
    700              return 0;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xE010             B.N      ??FTM_QD_Enable_3
    701            if(!FTM_PinInit(ftmx, FTM_PhB, phb))
   \                     ??FTM_QD_Enable_2: (+1)
   \       0x28   0x0032             MOVS     R2,R6
   \       0x2A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x2C   0x2109             MOVS     R1,#+9
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_PinInitEP8FTM_Type10FtmChnEnum12PortPinsEnum
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD101             BNE.N    ??FTM_QD_Enable_4
   \       0x38   0x2001             MOVS     R0,#+1
   \       0x3A   0xE000             B.N      ??FTM_QD_Enable_5
   \                     ??FTM_QD_Enable_4: (+1)
   \       0x3C   0x2000             MOVS     R0,#+0
   \                     ??FTM_QD_Enable_5: (+1)
   \       0x3E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD001             BEQ.N    ??FTM_QD_Enable_6
    702              return 0;
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0xE000             B.N      ??FTM_QD_Enable_3
    703            
    704            return 1;
   \                     ??FTM_QD_Enable_6: (+1)
   \       0x48   0x2001             MOVS     R0,#+1
   \                     ??FTM_QD_Enable_3: (+1)
   \       0x4A   0xBD70             POP      {R4-R6,PC}       ;; return
    705          }
    706          
    707          /*
    708           * FTM_QD_Disable
    709           * FTM模块正交解码模式输入禁用
    710           *
    711           * 参数:
    712           *    ftmx--FTMx模块号
    713           *      |__FTM1          --FTM1
    714           *      |__FTM2          --FTM2
    715           *
    716           * 输出:
    717           *    0--配置错误
    718           *    1--配置成功
    719           */

   \                                 In section .text, align 2, keep-with-next
    720          uint8 FTM_QD_Disable(FTM_Type *ftmx)
    721          {
   \                     FTM_QD_Disable: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    722            if(!FTM_PinDeinit(ftmx, FTM_PhA))
   \        0x4   0x2108             MOVS     R1,#+8
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init13FTM_PinDeinitEP8FTM_Type10FtmChnEnum
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD101             BNE.N    ??FTM_QD_Disable_0
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0xE000             B.N      ??FTM_QD_Disable_1
   \                     ??FTM_QD_Disable_0: (+1)
   \       0x14   0x2000             MOVS     R0,#+0
   \                     ??FTM_QD_Disable_1: (+1)
   \       0x16   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD001             BEQ.N    ??FTM_QD_Disable_2
    723              return 0;
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0xE00E             B.N      ??FTM_QD_Disable_3
    724            if(!FTM_PinDeinit(ftmx, FTM_PhB))
   \                     ??FTM_QD_Disable_2: (+1)
   \       0x20   0x2109             MOVS     R1,#+9
   \       0x22   0x0020             MOVS     R0,R4
   \       0x24   0x.... 0x....      BL       _ZN26_INTERNAL_5_FTM_c_FTM_Init13FTM_PinDeinitEP8FTM_Type10FtmChnEnum
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD101             BNE.N    ??FTM_QD_Disable_4
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0xE000             B.N      ??FTM_QD_Disable_5
   \                     ??FTM_QD_Disable_4: (+1)
   \       0x30   0x2000             MOVS     R0,#+0
   \                     ??FTM_QD_Disable_5: (+1)
   \       0x32   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD001             BEQ.N    ??FTM_QD_Disable_6
    725              return 0;
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0xE000             B.N      ??FTM_QD_Disable_3
    726            
    727            return 1;
   \                     ??FTM_QD_Disable_6: (+1)
   \       0x3C   0x2001             MOVS     R0,#+1
   \                     ??FTM_QD_Disable_3: (+1)
   \       0x3E   0xBD10             POP      {R4,PC}          ;; return
    728          }
    729          
    730          /*
    731           * FTM_PWM_Init
    732           * FTM模块PWM模式初始化，内部调用
    733           */

   \                                 In section .text, align 2, keep-with-next
    734          static uint8 FTM_PWM_Init(FTM_InitTypeDef ftm_init_structure)
    735          {
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init12FTM_PWM_InitE15FTM_InitTypeDef: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    736            uint32 bus_clk_hz;
    737            uint32 mod, mod2;
    738            uint8 ps;
    739            uint32 freq = ftm_init_structure.FTM_PwmFreq;
   \        0x6   0x9C08             LDR      R4,[SP, #+32]
    740            uint32 dt_en = ftm_init_structure.FTM_PwmDeadtimeCfg;
   \        0x8   0x9D09             LDR      R5,[SP, #+36]
    741            uint8 dt_div = ftm_init_structure.FTM_PwmDeadtimeDiv;
   \        0xA   0xF89D 0x6028      LDRB     R6,[SP, #+40]
    742            uint8 dt_val = ftm_init_structure.FTM_PwmDeadtimeVal;
   \        0xE   0xF89D 0x7029      LDRB     R7,[SP, #+41]
    743            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \       0x12   0xF8DD 0x8018      LDR      R8,[SP, #+24]
    744            
    745            //参数检查
    746            ASSERT( freq );                  //判断频率
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0xD104             BNE.N    ??FTM_PWM_Init_0
   \       0x1A   0xF240 0x21EA      MOVW     R1,#+746
   \       0x1E   0x....             LDR.N    R0,??DataTable9_2
   \       0x20   0x.... 0x....      BL       assert_failed
    747            ASSERT( dt_val<=63 );            //判断死区插入值
   \                     ??FTM_PWM_Init_0: (+1)
   \       0x24   0x0038             MOVS     R0,R7
   \       0x26   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x28   0x2840             CMP      R0,#+64
   \       0x2A   0xDB04             BLT.N    ??FTM_PWM_Init_1
   \       0x2C   0xF240 0x21EB      MOVW     R1,#+747
   \       0x30   0x....             LDR.N    R0,??DataTable9_2
   \       0x32   0x.... 0x....      BL       assert_failed
    748            
    749            bus_clk_hz = g_bus_clock;
   \                     ??FTM_PWM_Init_1: (+1)
   \       0x36   0x.... 0x....      LDR.W    R0,??DataTable10
   \       0x3A   0x6801             LDR      R1,[R0, #+0]
    750            
    751            if(freq>bus_clk_hz) return 0;
   \       0x3C   0x42A1             CMP      R1,R4
   \       0x3E   0xD201             BCS.N    ??FTM_PWM_Init_2
   \       0x40   0x2000             MOVS     R0,#+0
   \       0x42   0xE07B             B.N      ??FTM_PWM_Init_3
    752            
    753            if((mod=bus_clk_hz/(freq*128)) < 0xFFFFu)
   \                     ??FTM_PWM_Init_2: (+1)
   \       0x44   0x2080             MOVS     R0,#+128
   \       0x46   0xFB00 0xF004      MUL      R0,R0,R4
   \       0x4A   0xFBB1 0xFEF0      UDIV     LR,R1,R0
   \       0x4E   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x52   0x4586             CMP      LR,R0
   \       0x54   0xD271             BCS.N    ??FTM_PWM_Init_4
    754            {
    755              ps = 7;
   \       0x56   0x2207             MOVS     R2,#+7
    756              mod2=mod;
   \       0x58   0x4673             MOV      R3,LR
    757              if((mod=bus_clk_hz/(freq*64)) < 0xFFFFu)
   \       0x5A   0xF05F 0x0C40      MOVS     R12,#+64
   \       0x5E   0xFB0C 0xFC04      MUL      R12,R12,R4
   \       0x62   0xFBB1 0xFCFC      UDIV     R12,R1,R12
   \       0x66   0x4584             CMP      R12,R0
   \       0x68   0xD242             BCS.N    ??FTM_PWM_Init_5
    758              {
    759                ps = 6;  
   \       0x6A   0xF05F 0x0E06      MOVS     LR,#+6
   \       0x6E   0x4672             MOV      R2,LR
    760                mod2=mod;  
   \       0x70   0x4663             MOV      R3,R12
    761                if((mod=bus_clk_hz/(freq*32)) < 0xFFFFu)
   \       0x72   0xEA5F 0x1E44      LSLS     LR,R4,#+5
   \       0x76   0xFBB1 0xFEFE      UDIV     LR,R1,LR
   \       0x7A   0x46F4             MOV      R12,LR
   \       0x7C   0x4584             CMP      R12,R0
   \       0x7E   0xD237             BCS.N    ??FTM_PWM_Init_5
    762                {
    763                  ps = 5;  
   \       0x80   0xF05F 0x0E05      MOVS     LR,#+5
   \       0x84   0x4672             MOV      R2,LR
    764                  mod2=mod;
   \       0x86   0x4663             MOV      R3,R12
    765                  if((mod=bus_clk_hz/(freq*16)) < 0xFFFFu)
   \       0x88   0xEA5F 0x1E04      LSLS     LR,R4,#+4
   \       0x8C   0xFBB1 0xFEFE      UDIV     LR,R1,LR
   \       0x90   0x46F4             MOV      R12,LR
   \       0x92   0x4584             CMP      R12,R0
   \       0x94   0xD22C             BCS.N    ??FTM_PWM_Init_5
    766                  {
    767                    ps = 4;  
   \       0x96   0xF05F 0x0E04      MOVS     LR,#+4
   \       0x9A   0x4672             MOV      R2,LR
    768                    mod2=mod;   
   \       0x9C   0x4663             MOV      R3,R12
    769                    if((mod=bus_clk_hz/(freq*8)) < 0xFFFFu)
   \       0x9E   0xEA5F 0x0EC4      LSLS     LR,R4,#+3
   \       0xA2   0xFBB1 0xFEFE      UDIV     LR,R1,LR
   \       0xA6   0x46F4             MOV      R12,LR
   \       0xA8   0x4584             CMP      R12,R0
   \       0xAA   0xD221             BCS.N    ??FTM_PWM_Init_5
    770                    {
    771                      ps = 3;
   \       0xAC   0xF05F 0x0E03      MOVS     LR,#+3
   \       0xB0   0x4672             MOV      R2,LR
    772                      mod2=mod;
   \       0xB2   0x4663             MOV      R3,R12
    773                      if((mod=bus_clk_hz/(freq*4)) < 0xFFFFu)
   \       0xB4   0xEA5F 0x0E84      LSLS     LR,R4,#+2
   \       0xB8   0xFBB1 0xFEFE      UDIV     LR,R1,LR
   \       0xBC   0x46F4             MOV      R12,LR
   \       0xBE   0x4584             CMP      R12,R0
   \       0xC0   0xD216             BCS.N    ??FTM_PWM_Init_5
    774                      {
    775                        ps = 2;
   \       0xC2   0xF05F 0x0E02      MOVS     LR,#+2
   \       0xC6   0x4672             MOV      R2,LR
    776                        mod2=mod;
   \       0xC8   0x4663             MOV      R3,R12
    777                        if((mod=bus_clk_hz/(freq*2)) < 0xFFFFu)
   \       0xCA   0xEA5F 0x0E44      LSLS     LR,R4,#+1
   \       0xCE   0xFBB1 0xFEFE      UDIV     LR,R1,LR
   \       0xD2   0x46F4             MOV      R12,LR
   \       0xD4   0x4584             CMP      R12,R0
   \       0xD6   0xD20B             BCS.N    ??FTM_PWM_Init_5
    778                        {
    779                          ps = 1;
   \       0xD8   0xF05F 0x0E01      MOVS     LR,#+1
   \       0xDC   0x4672             MOV      R2,LR
    780                          mod2=mod;
   \       0xDE   0x4663             MOV      R3,R12
    781                          if((mod=bus_clk_hz/(freq*1)) < 0xFFFFu)
   \       0xE0   0xFBB1 0xFEF4      UDIV     LR,R1,R4
   \       0xE4   0x46F4             MOV      R12,LR
   \       0xE6   0x4584             CMP      R12,R0
   \       0xE8   0xD202             BCS.N    ??FTM_PWM_Init_5
    782                          {
    783                            ps = 0;
   \       0xEA   0x2000             MOVS     R0,#+0
   \       0xEC   0x0002             MOVS     R2,R0
    784                            mod2=mod;
   \       0xEE   0x4663             MOV      R3,R12
    785                          }
    786                        }
    787                      }
    788                    }
    789                  }  
    790                }
    791              }
    792            }
    793            else
    794            {
    795              return 0;
    796            }
    797            
    798            ftmx->SC = 0;
   \                     ??FTM_PWM_Init_5: (+1)
   \       0xF0   0x2000             MOVS     R0,#+0
   \       0xF2   0xF8C8 0x0000      STR      R0,[R8, #+0]
    799            
    800            // 设置PWM周期及占空比
    801            //    PWM周期 = (MOD-CNTIN+1)*FTM时钟周期 :
    802            // 配置FTM计数初始值
    803            ftmx->CNT = 0;
   \       0xF6   0x2000             MOVS     R0,#+0
   \       0xF8   0xF8C8 0x0004      STR      R0,[R8, #+4]
    804            ftmx->CNTIN = 0;
   \       0xFC   0x2000             MOVS     R0,#+0
   \       0xFE   0xF8C8 0x004C      STR      R0,[R8, #+76]
    805            // 配置FTM计数MOD值
    806            ftmx->MOD = mod2;
   \      0x102   0xF8C8 0x3008      STR      R3,[R8, #+8]
    807            
    808            ftmx->DEADTIME = FTM_DEADTIME_DTPS(dt_div) | FTM_DEADTIME_DTVAL(dt_val);
   \      0x106   0x0030             MOVS     R0,R6
   \      0x108   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x10A   0x0180             LSLS     R0,R0,#+6
   \      0x10C   0xF010 0x00C0      ANDS     R0,R0,#0xC0
   \      0x110   0x46BE             MOV      LR,R7
   \      0x112   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \      0x116   0xF01E 0x0E3F      ANDS     LR,LR,#0x3F
   \      0x11A   0xEA5E 0x0000      ORRS     R0,LR,R0
   \      0x11E   0xF8C8 0x0068      STR      R0,[R8, #+104]
    809            ftmx->COMBINE = dt_en;        //使能死区
   \      0x122   0xF8C8 0x5064      STR      R5,[R8, #+100]
    810            
    811            // 配置FTM控制寄存器
    812            // 禁用中断, 加计数模式, 时钟源:System clock（Bus Clk）, 分频系数:8
    813            // 假设SysClk = 50MHz, SC_PS=3, FTM Clk = 50MHz/2^3 = 6.25MHz
    814            ftmx->SC = FTM_SC_CLKS(1)|FTM_SC_PS(ps);
   \      0x126   0x0010             MOVS     R0,R2
   \      0x128   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x12A   0xF010 0x0007      ANDS     R0,R0,#0x7
   \      0x12E   0xF050 0x0008      ORRS     R0,R0,#0x8
   \      0x132   0xF8C8 0x0000      STR      R0,[R8, #+0]
    815            
    816            return 1;
   \      0x136   0x2001             MOVS     R0,#+1
   \      0x138   0xE000             B.N      ??FTM_PWM_Init_3
   \                     ??FTM_PWM_Init_4: (+1)
   \      0x13A   0x2000             MOVS     R0,#+0
   \                     ??FTM_PWM_Init_3: (+1)
   \      0x13C   0xE8BD 0x01F0      POP      {R4-R8}
   \      0x140   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    817          }
    818          
    819          /*
    820           * FTM_IC_Init
    821           * FTM模块输入捕获模式初始化，内部调用
    822           */

   \                                 In section .text, align 2, keep-with-next
    823          static uint8 FTM_IC_Init(FTM_InitTypeDef ftm_init_structure)
    824          {
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_IC_InitE15FTM_InitTypeDef: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB5F8             PUSH     {R3-R7,LR}
    825            uint8 i;
    826            uint8 ps = ftm_init_structure.FTM_ClkDiv;
   \        0x4   0xF89D 0x502B      LDRB     R5,[SP, #+43]
    827            FTM_ISR_CALLBACK isr_func = ftm_init_structure.FTM_Isr;
   \        0x8   0x9E0C             LDR      R6,[SP, #+48]
    828            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \        0xA   0x9F06             LDR      R7,[SP, #+24]
    829            
    830            //参数检查
    831            ASSERT( ps <= 7);             //时钟分频系数
   \        0xC   0x0028             MOVS     R0,R5
   \        0xE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x10   0x2808             CMP      R0,#+8
   \       0x12   0xDB04             BLT.N    ??FTM_IC_Init_0
   \       0x14   0xF240 0x313F      MOVW     R1,#+831
   \       0x18   0x....             LDR.N    R0,??DataTable9_2
   \       0x1A   0x.... 0x....      BL       assert_failed
    832            
    833            ftmx->CONF=FTM_CONF_BDMMODE(0x3);
   \                     ??FTM_IC_Init_0: (+1)
   \       0x1E   0x20C0             MOVS     R0,#+192
   \       0x20   0xF8C7 0x0084      STR      R0,[R7, #+132]
    834            
    835            ftmx->SC = 0;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x6038             STR      R0,[R7, #+0]
    836            
    837            ftmx->CNT = 0;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x6078             STR      R0,[R7, #+4]
    838            ftmx->CNTIN = 0;
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0x64F8             STR      R0,[R7, #+76]
    839            ftmx->MOD = 0;                           
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x60B8             STR      R0,[R7, #+8]
    840            ftmx->QDCTRL = (~FTM_QDCTRL_QUADEN_MASK); //关闭正交解码
   \       0x34   0xF07F 0x0001      MVNS     R0,#+1
   \       0x38   0xF8C7 0x0080      STR      R0,[R7, #+128]
    841            ftmx->FILTER = 0x00;                      //关过虑器
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0x67B8             STR      R0,[R7, #+120]
    842            
    843            // 配置FTM控制寄存器
    844            // 将FTM Counter配置成Free Counter
    845            // 禁用中断, 加计数模式, 时钟源:System clock（Bus Clk）, 分频系数:PS
    846            // 假设SysClk = 50MHz, SC_PS=3, FTM Clk = 50MHz/2^3 = 6.25MHz
    847            ftmx->SC |= FTM_SC_CLKS(1)|FTM_SC_PS(ps);
   \       0x40   0x6838             LDR      R0,[R7, #+0]
   \       0x42   0x0029             MOVS     R1,R5
   \       0x44   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x46   0xF011 0x0107      ANDS     R1,R1,#0x7
   \       0x4A   0xF051 0x0108      ORRS     R1,R1,#0x8
   \       0x4E   0x4308             ORRS     R0,R1,R0
   \       0x50   0x6038             STR      R0,[R7, #+0]
    848            //ftmx->SC |= FTM_SC_TOIE_MASK;             //使能计数溢出中断
    849            ftmx->SC &= (~FTM_SC_CPWMS_MASK);         //FTM加计数
   \       0x52   0x6838             LDR      R0,[R7, #+0]
   \       0x54   0xF030 0x0020      BICS     R0,R0,#0x20
   \       0x58   0x6038             STR      R0,[R7, #+0]
    850          
    851            //设置中断函数入口地址并开启中断
    852            if(isr_func!=NULL)
   \       0x5A   0x0030             MOVS     R0,R6
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD01E             BEQ.N    ??FTM_IC_Init_1
    853            {
    854              if(ftmx == FTM0)
   \       0x60   0x....             LDR.N    R0,??DataTable9_3  ;; 0x40038000
   \       0x62   0x4287             CMP      R7,R0
   \       0x64   0xD102             BNE.N    ??FTM_IC_Init_2
    855                i=0;
   \       0x66   0x2000             MOVS     R0,#+0
   \       0x68   0x0004             MOVS     R4,R0
   \       0x6A   0xE013             B.N      ??FTM_IC_Init_3
    856              else if(ftmx == FTM1)
   \                     ??FTM_IC_Init_2: (+1)
   \       0x6C   0x....             LDR.N    R0,??DataTable9_5  ;; 0x40039000
   \       0x6E   0x4287             CMP      R7,R0
   \       0x70   0xD102             BNE.N    ??FTM_IC_Init_4
    857                i=1;
   \       0x72   0x2001             MOVS     R0,#+1
   \       0x74   0x0004             MOVS     R4,R0
   \       0x76   0xE00D             B.N      ??FTM_IC_Init_3
    858              else if(ftmx == FTM2)
   \                     ??FTM_IC_Init_4: (+1)
   \       0x78   0x....             LDR.N    R0,??DataTable9_6  ;; 0x400b8000
   \       0x7A   0x4287             CMP      R7,R0
   \       0x7C   0xD102             BNE.N    ??FTM_IC_Init_5
    859                i=2;
   \       0x7E   0x2002             MOVS     R0,#+2
   \       0x80   0x0004             MOVS     R4,R0
   \       0x82   0xE007             B.N      ??FTM_IC_Init_3
    860          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    861              else if(ftmx == FTM3)
   \                     ??FTM_IC_Init_5: (+1)
   \       0x84   0x....             LDR.N    R0,??DataTable9_8  ;; 0x400b9000
   \       0x86   0x4287             CMP      R7,R0
   \       0x88   0xD102             BNE.N    ??FTM_IC_Init_6
    862                i=3;
   \       0x8A   0x2003             MOVS     R0,#+3
   \       0x8C   0x0004             MOVS     R4,R0
   \       0x8E   0xE001             B.N      ??FTM_IC_Init_3
    863          #endif   
    864              else
    865                return 0;
   \                     ??FTM_IC_Init_6: (+1)
   \       0x90   0x2000             MOVS     R0,#+0
   \       0x92   0xE005             B.N      ??FTM_IC_Init_7
    866              FTM_ISR[i] = isr_func;
   \                     ??FTM_IC_Init_3: (+1)
   \       0x94   0x....             LDR.N    R0,??DataTable9_9
   \       0x96   0x0021             MOVS     R1,R4
   \       0x98   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x9A   0xF840 0x6021      STR      R6,[R0, R1, LSL #+2]
    867            }
    868          
    869            return 1;
   \                     ??FTM_IC_Init_1: (+1)
   \       0x9E   0x2001             MOVS     R0,#+1
   \                     ??FTM_IC_Init_7: (+1)
   \       0xA0   0xBCF2             POP      {R1,R4-R7}
   \       0xA2   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    870          }
    871          
    872          /*
    873           * FTM_PinInit
    874           * 初始化通道n指定引脚的FTM复用功能，内部调用
    875           */

   \                                 In section .text, align 2, keep-with-next
    876          static uint8 FTM_PinInit(FTM_Type *ftmx, FtmChnEnum_Type chn, PortPinsEnum_Type pin)
    877          { 
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_PinInitEP8FTM_Type10FtmChnEnum12PortPinsEnum: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0003             MOVS     R3,R0
    878            //根据ftmx使能相应pin的ftm功能
    879            if(ftmx == FTM0)
   \        0x4   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x40038000
   \        0x8   0x4283             CMP      R3,R0
   \        0xA   0xF040 0x80FD      BNE.W    ??FTM_PinInit_0
    880            {
    881              switch(chn)
   \        0xE   0x0008             MOVS     R0,R1
   \       0x10   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD00E             BEQ.N    ??FTM_PinInit_1
   \       0x16   0x2802             CMP      R0,#+2
   \       0x18   0xD046             BEQ.N    ??FTM_PinInit_2
   \       0x1A   0xD328             BCC.N    ??FTM_PinInit_3
   \       0x1C   0x2804             CMP      R0,#+4
   \       0x1E   0xD07D             BEQ.N    ??FTM_PinInit_4
   \       0x20   0xD35F             BCC.N    ??FTM_PinInit_5
   \       0x22   0x2806             CMP      R0,#+6
   \       0x24   0xF000 0x80B4      BEQ.W    ??FTM_PinInit_6
   \       0x28   0xF0C0 0x8095      BCC.W    ??FTM_PinInit_7
   \       0x2C   0x2807             CMP      R0,#+7
   \       0x2E   0xF000 0x80CC      BEQ.W    ??FTM_PinInit_8
   \       0x32   0xE0E7             B.N      ??FTM_PinInit_9
    882              {
    883              case FTM_Ch0:
    884                if(pin == PTA3)
   \                     ??FTM_PinInit_1: (+1)
   \       0x34   0x0010             MOVS     R0,R2
   \       0x36   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x38   0x2803             CMP      R0,#+3
   \       0x3A   0xD108             BNE.N    ??FTM_PinInit_10
    885                  PORTA->PCR[3] = PORTA->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \       0x3C   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x4004900c
   \       0x40   0x6804             LDR      R4,[R0, #+0]
   \       0x42   0xF434 0x64E0      BICS     R4,R4,#0x700
   \       0x46   0xF454 0x7440      ORRS     R4,R4,#0x300
   \       0x4A   0x6004             STR      R4,[R0, #+0]
   \       0x4C   0xE00E             B.N      ??FTM_PinInit_11
    886                else if(pin == PTC1)
   \                     ??FTM_PinInit_10: (+1)
   \       0x4E   0x0010             MOVS     R0,R2
   \       0x50   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x52   0x283D             CMP      R0,#+61
   \       0x54   0xD108             BNE.N    ??FTM_PinInit_12
    887                  PORTC->PCR[1] = PORTC->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \       0x56   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x4004b004
   \       0x5A   0x6804             LDR      R4,[R0, #+0]
   \       0x5C   0xF434 0x64E0      BICS     R4,R4,#0x700
   \       0x60   0xF454 0x6480      ORRS     R4,R4,#0x400
   \       0x64   0x6004             STR      R4,[R0, #+0]
   \       0x66   0xE001             B.N      ??FTM_PinInit_11
    888                else
    889                  return 0;
   \                     ??FTM_PinInit_12: (+1)
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xE30D             B.N      ??FTM_PinInit_13
    890                break;
   \                     ??FTM_PinInit_11: (+1)
   \       0x6C   0xE30B             B.N      ??FTM_PinInit_14
    891              case FTM_Ch1:
    892                if(pin == PTA4)
   \                     ??FTM_PinInit_3: (+1)
   \       0x6E   0x0010             MOVS     R0,R2
   \       0x70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x72   0x2804             CMP      R0,#+4
   \       0x74   0xD108             BNE.N    ??FTM_PinInit_15
    893                  PORTA->PCR[4] = PORTA->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \       0x76   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40049010
   \       0x7A   0x6804             LDR      R4,[R0, #+0]
   \       0x7C   0xF434 0x64E0      BICS     R4,R4,#0x700
   \       0x80   0xF454 0x7440      ORRS     R4,R4,#0x300
   \       0x84   0x6004             STR      R4,[R0, #+0]
   \       0x86   0xE00E             B.N      ??FTM_PinInit_16
    894                else if(pin == PTC2)
   \                     ??FTM_PinInit_15: (+1)
   \       0x88   0x0010             MOVS     R0,R2
   \       0x8A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x8C   0x283E             CMP      R0,#+62
   \       0x8E   0xD108             BNE.N    ??FTM_PinInit_17
    895                  PORTC->PCR[2] = PORTC->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \       0x90   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x4004b008
   \       0x94   0x6804             LDR      R4,[R0, #+0]
   \       0x96   0xF434 0x64E0      BICS     R4,R4,#0x700
   \       0x9A   0xF454 0x6480      ORRS     R4,R4,#0x400
   \       0x9E   0x6004             STR      R4,[R0, #+0]
   \       0xA0   0xE001             B.N      ??FTM_PinInit_16
    896                else
    897                  return 0;
   \                     ??FTM_PinInit_17: (+1)
   \       0xA2   0x2000             MOVS     R0,#+0
   \       0xA4   0xE2F0             B.N      ??FTM_PinInit_13
    898                break;
   \                     ??FTM_PinInit_16: (+1)
   \       0xA6   0xE2EE             B.N      ??FTM_PinInit_14
    899              case FTM_Ch2:
    900                if(pin == PTA5)
   \                     ??FTM_PinInit_2: (+1)
   \       0xA8   0x0010             MOVS     R0,R2
   \       0xAA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xAC   0x2805             CMP      R0,#+5
   \       0xAE   0xD108             BNE.N    ??FTM_PinInit_18
    901                  PORTA->PCR[5] = PORTA->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \       0xB0   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40049014
   \       0xB4   0x6804             LDR      R4,[R0, #+0]
   \       0xB6   0xF434 0x64E0      BICS     R4,R4,#0x700
   \       0xBA   0xF454 0x7440      ORRS     R4,R4,#0x300
   \       0xBE   0x6004             STR      R4,[R0, #+0]
   \       0xC0   0xE00E             B.N      ??FTM_PinInit_19
    902                else if(pin == PTC3)
   \                     ??FTM_PinInit_18: (+1)
   \       0xC2   0x0010             MOVS     R0,R2
   \       0xC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xC6   0x283F             CMP      R0,#+63
   \       0xC8   0xD108             BNE.N    ??FTM_PinInit_20
    903                  PORTC->PCR[3] = PORTC->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \       0xCA   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x4004b00c
   \       0xCE   0x6804             LDR      R4,[R0, #+0]
   \       0xD0   0xF434 0x64E0      BICS     R4,R4,#0x700
   \       0xD4   0xF454 0x6480      ORRS     R4,R4,#0x400
   \       0xD8   0x6004             STR      R4,[R0, #+0]
   \       0xDA   0xE001             B.N      ??FTM_PinInit_19
    904                else
    905                  return 0;
   \                     ??FTM_PinInit_20: (+1)
   \       0xDC   0x2000             MOVS     R0,#+0
   \       0xDE   0xE2D3             B.N      ??FTM_PinInit_13
    906                break;
   \                     ??FTM_PinInit_19: (+1)
   \       0xE0   0xE2D1             B.N      ??FTM_PinInit_14
    907              case FTM_Ch3:
    908                if(pin == PTA6)
   \                     ??FTM_PinInit_5: (+1)
   \       0xE2   0x0010             MOVS     R0,R2
   \       0xE4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xE6   0x2806             CMP      R0,#+6
   \       0xE8   0xD108             BNE.N    ??FTM_PinInit_21
    909                  PORTA->PCR[6] = PORTA->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \       0xEA   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0x40049018
   \       0xEE   0x6804             LDR      R4,[R0, #+0]
   \       0xF0   0xF434 0x64E0      BICS     R4,R4,#0x700
   \       0xF4   0xF454 0x7440      ORRS     R4,R4,#0x300
   \       0xF8   0x6004             STR      R4,[R0, #+0]
   \       0xFA   0xE00E             B.N      ??FTM_PinInit_22
    910                else if(pin == PTC4)
   \                     ??FTM_PinInit_21: (+1)
   \       0xFC   0x0010             MOVS     R0,R2
   \       0xFE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x100   0x2840             CMP      R0,#+64
   \      0x102   0xD108             BNE.N    ??FTM_PinInit_23
    911                  PORTC->PCR[4] = PORTC->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \      0x104   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x4004b010
   \      0x108   0x6804             LDR      R4,[R0, #+0]
   \      0x10A   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x10E   0xF454 0x6480      ORRS     R4,R4,#0x400
   \      0x112   0x6004             STR      R4,[R0, #+0]
   \      0x114   0xE001             B.N      ??FTM_PinInit_22
    912                else
    913                  return 0;
   \                     ??FTM_PinInit_23: (+1)
   \      0x116   0x2000             MOVS     R0,#+0
   \      0x118   0xE2B6             B.N      ??FTM_PinInit_13
    914                break;
   \                     ??FTM_PinInit_22: (+1)
   \      0x11A   0xE2B4             B.N      ??FTM_PinInit_14
    915              case FTM_Ch4:
    916                if(pin == PTA7)
   \                     ??FTM_PinInit_4: (+1)
   \      0x11C   0x0010             MOVS     R0,R2
   \      0x11E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x120   0x2807             CMP      R0,#+7
   \      0x122   0xD108             BNE.N    ??FTM_PinInit_24
    917                  PORTA->PCR[7] = PORTA->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \      0x124   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x4004901c
   \      0x128   0x6804             LDR      R4,[R0, #+0]
   \      0x12A   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x12E   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x132   0x6004             STR      R4,[R0, #+0]
   \      0x134   0xE00E             B.N      ??FTM_PinInit_25
    918                else if(pin == PTD4)
   \                     ??FTM_PinInit_24: (+1)
   \      0x136   0x0010             MOVS     R0,R2
   \      0x138   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x13A   0x2860             CMP      R0,#+96
   \      0x13C   0xD108             BNE.N    ??FTM_PinInit_26
    919                  PORTD->PCR[4] = PORTD->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \      0x13E   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x4004c010
   \      0x142   0x6804             LDR      R4,[R0, #+0]
   \      0x144   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x148   0xF454 0x6480      ORRS     R4,R4,#0x400
   \      0x14C   0x6004             STR      R4,[R0, #+0]
   \      0x14E   0xE001             B.N      ??FTM_PinInit_25
    920                else
    921                  return 0;
   \                     ??FTM_PinInit_26: (+1)
   \      0x150   0x2000             MOVS     R0,#+0
   \      0x152   0xE299             B.N      ??FTM_PinInit_13
    922                break;
   \                     ??FTM_PinInit_25: (+1)
   \      0x154   0xE297             B.N      ??FTM_PinInit_14
    923              case FTM_Ch5:
    924                if(pin == PTA0)
   \                     ??FTM_PinInit_7: (+1)
   \      0x156   0x0010             MOVS     R0,R2
   \      0x158   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x15A   0x2800             CMP      R0,#+0
   \      0x15C   0xD108             BNE.N    ??FTM_PinInit_27
    925                  PORTA->PCR[0] = PORTA->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \      0x15E   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x40049000
   \      0x162   0x6804             LDR      R4,[R0, #+0]
   \      0x164   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x168   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x16C   0x6004             STR      R4,[R0, #+0]
   \      0x16E   0xE00E             B.N      ??FTM_PinInit_28
    926                else if(pin == PTD5)
   \                     ??FTM_PinInit_27: (+1)
   \      0x170   0x0010             MOVS     R0,R2
   \      0x172   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x174   0x2861             CMP      R0,#+97
   \      0x176   0xD108             BNE.N    ??FTM_PinInit_29
    927                  PORTD->PCR[5] = PORTD->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \      0x178   0x.... 0x....      LDR.W    R0,??DataTable11_1  ;; 0x4004c014
   \      0x17C   0x6804             LDR      R4,[R0, #+0]
   \      0x17E   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x182   0xF454 0x6480      ORRS     R4,R4,#0x400
   \      0x186   0x6004             STR      R4,[R0, #+0]
   \      0x188   0xE001             B.N      ??FTM_PinInit_28
    928                else
    929                  return 0;
   \                     ??FTM_PinInit_29: (+1)
   \      0x18A   0x2000             MOVS     R0,#+0
   \      0x18C   0xE27C             B.N      ??FTM_PinInit_13
    930                break;
   \                     ??FTM_PinInit_28: (+1)
   \      0x18E   0xE27A             B.N      ??FTM_PinInit_14
    931              case FTM_Ch6:
    932                if(pin == PTA1)
   \                     ??FTM_PinInit_6: (+1)
   \      0x190   0x0010             MOVS     R0,R2
   \      0x192   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x194   0x2801             CMP      R0,#+1
   \      0x196   0xD108             BNE.N    ??FTM_PinInit_30
    933                  PORTA->PCR[1] = PORTA->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \      0x198   0x.... 0x....      LDR.W    R0,??DataTable11_2  ;; 0x40049004
   \      0x19C   0x6804             LDR      R4,[R0, #+0]
   \      0x19E   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x1A2   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x1A6   0x6004             STR      R4,[R0, #+0]
   \      0x1A8   0xE00E             B.N      ??FTM_PinInit_31
    934                else if(pin == PTD6)
   \                     ??FTM_PinInit_30: (+1)
   \      0x1AA   0x0010             MOVS     R0,R2
   \      0x1AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x1AE   0x2862             CMP      R0,#+98
   \      0x1B0   0xD108             BNE.N    ??FTM_PinInit_32
    935                  PORTD->PCR[6] = PORTD->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \      0x1B2   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x4004c018
   \      0x1B6   0x6804             LDR      R4,[R0, #+0]
   \      0x1B8   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x1BC   0xF454 0x6480      ORRS     R4,R4,#0x400
   \      0x1C0   0x6004             STR      R4,[R0, #+0]
   \      0x1C2   0xE001             B.N      ??FTM_PinInit_31
    936                else
    937                  return 0;
   \                     ??FTM_PinInit_32: (+1)
   \      0x1C4   0x2000             MOVS     R0,#+0
   \      0x1C6   0xE25F             B.N      ??FTM_PinInit_13
    938                break;
   \                     ??FTM_PinInit_31: (+1)
   \      0x1C8   0xE25D             B.N      ??FTM_PinInit_14
    939              case FTM_Ch7:
    940                if(pin == PTA2)
   \                     ??FTM_PinInit_8: (+1)
   \      0x1CA   0x0010             MOVS     R0,R2
   \      0x1CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x1CE   0x2802             CMP      R0,#+2
   \      0x1D0   0xD108             BNE.N    ??FTM_PinInit_33
    941                  PORTA->PCR[2] = PORTA->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \      0x1D2   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40049008
   \      0x1D6   0x6804             LDR      R4,[R0, #+0]
   \      0x1D8   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x1DC   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x1E0   0x6004             STR      R4,[R0, #+0]
   \      0x1E2   0xE00E             B.N      ??FTM_PinInit_34
    942                else if(pin == PTD7)
   \                     ??FTM_PinInit_33: (+1)
   \      0x1E4   0x0010             MOVS     R0,R2
   \      0x1E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x1E8   0x2863             CMP      R0,#+99
   \      0x1EA   0xD108             BNE.N    ??FTM_PinInit_35
    943                  PORTD->PCR[7] = PORTD->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \      0x1EC   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x4004c01c
   \      0x1F0   0x6804             LDR      R4,[R0, #+0]
   \      0x1F2   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x1F6   0xF454 0x6480      ORRS     R4,R4,#0x400
   \      0x1FA   0x6004             STR      R4,[R0, #+0]
   \      0x1FC   0xE001             B.N      ??FTM_PinInit_34
    944                else
    945                  return 0;
   \                     ??FTM_PinInit_35: (+1)
   \      0x1FE   0x2000             MOVS     R0,#+0
   \      0x200   0xE242             B.N      ??FTM_PinInit_13
    946                break;
   \                     ??FTM_PinInit_34: (+1)
   \      0x202   0xE240             B.N      ??FTM_PinInit_14
    947              default:
    948                return 0;     
   \                     ??FTM_PinInit_9: (+1)
   \      0x204   0x2000             MOVS     R0,#+0
   \      0x206   0xE23F             B.N      ??FTM_PinInit_13
    949              }
    950            }
    951            else if(ftmx == FTM1)
   \                     ??FTM_PinInit_0: (+1)
   \      0x208   0x.... 0x....      LDR.W    R0,??DataTable10_12  ;; 0x40039000
   \      0x20C   0x4283             CMP      R3,R0
   \      0x20E   0xF040 0x80B0      BNE.W    ??FTM_PinInit_36
    952            {
    953              switch(chn)
   \      0x212   0x0008             MOVS     R0,R1
   \      0x214   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x216   0x2800             CMP      R0,#+0
   \      0x218   0xD006             BEQ.N    ??FTM_PinInit_37
   \      0x21A   0x2801             CMP      R0,#+1
   \      0x21C   0xD02E             BEQ.N    ??FTM_PinInit_38
   \      0x21E   0x2808             CMP      R0,#+8
   \      0x220   0xD056             BEQ.N    ??FTM_PinInit_39
   \      0x222   0x2809             CMP      R0,#+9
   \      0x224   0xD07C             BEQ.N    ??FTM_PinInit_40
   \      0x226   0xE0A2             B.N      ??FTM_PinInit_41
    954              {
    955              case FTM_Ch0:
    956                if(pin == PTA8)
   \                     ??FTM_PinInit_37: (+1)
   \      0x228   0x0010             MOVS     R0,R2
   \      0x22A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x22C   0x2808             CMP      R0,#+8
   \      0x22E   0xD108             BNE.N    ??FTM_PinInit_42
    957                  PORTA->PCR[8] = PORTA->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \      0x230   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40049020
   \      0x234   0x6804             LDR      R4,[R0, #+0]
   \      0x236   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x23A   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x23E   0x6004             STR      R4,[R0, #+0]
   \      0x240   0xE01B             B.N      ??FTM_PinInit_43
    958                else if(pin == PTA12)
   \                     ??FTM_PinInit_42: (+1)
   \      0x242   0x0010             MOVS     R0,R2
   \      0x244   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x246   0x280C             CMP      R0,#+12
   \      0x248   0xD108             BNE.N    ??FTM_PinInit_44
    959                  PORTA->PCR[12] = PORTA->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \      0x24A   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x40049030
   \      0x24E   0x6804             LDR      R4,[R0, #+0]
   \      0x250   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x254   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x258   0x6004             STR      R4,[R0, #+0]
   \      0x25A   0xE00E             B.N      ??FTM_PinInit_43
    960                else if(pin == PTB0)
   \                     ??FTM_PinInit_44: (+1)
   \      0x25C   0x0010             MOVS     R0,R2
   \      0x25E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x260   0x2820             CMP      R0,#+32
   \      0x262   0xD108             BNE.N    ??FTM_PinInit_45
    961                  PORTB->PCR[0] = PORTB->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \      0x264   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4004a000
   \      0x268   0x6804             LDR      R4,[R0, #+0]
   \      0x26A   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x26E   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x272   0x6004             STR      R4,[R0, #+0]
   \      0x274   0xE001             B.N      ??FTM_PinInit_43
    962                else
    963                  return 0;
   \                     ??FTM_PinInit_45: (+1)
   \      0x276   0x2000             MOVS     R0,#+0
   \      0x278   0xE206             B.N      ??FTM_PinInit_13
    964                break;
   \                     ??FTM_PinInit_43: (+1)
   \      0x27A   0xE204             B.N      ??FTM_PinInit_14
    965              case FTM_Ch1:
    966                if(pin == PTA9)
   \                     ??FTM_PinInit_38: (+1)
   \      0x27C   0x0010             MOVS     R0,R2
   \      0x27E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x280   0x2809             CMP      R0,#+9
   \      0x282   0xD108             BNE.N    ??FTM_PinInit_46
    967                  PORTA->PCR[9] = PORTA->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \      0x284   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x40049024
   \      0x288   0x6804             LDR      R4,[R0, #+0]
   \      0x28A   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x28E   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x292   0x6004             STR      R4,[R0, #+0]
   \      0x294   0xE01B             B.N      ??FTM_PinInit_47
    968                else if(pin == PTA13)
   \                     ??FTM_PinInit_46: (+1)
   \      0x296   0x0010             MOVS     R0,R2
   \      0x298   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x29A   0x280D             CMP      R0,#+13
   \      0x29C   0xD108             BNE.N    ??FTM_PinInit_48
    969                  PORTA->PCR[13] = PORTA->PCR[13] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \      0x29E   0x.... 0x....      LDR.W    R0,??DataTable15_6  ;; 0x40049034
   \      0x2A2   0x6804             LDR      R4,[R0, #+0]
   \      0x2A4   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x2A8   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x2AC   0x6004             STR      R4,[R0, #+0]
   \      0x2AE   0xE00E             B.N      ??FTM_PinInit_47
    970                else if(pin == PTB1)
   \                     ??FTM_PinInit_48: (+1)
   \      0x2B0   0x0010             MOVS     R0,R2
   \      0x2B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x2B4   0x2821             CMP      R0,#+33
   \      0x2B6   0xD108             BNE.N    ??FTM_PinInit_49
    971                  PORTB->PCR[1] = PORTB->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \      0x2B8   0x.... 0x....      LDR.W    R0,??DataTable15_7  ;; 0x4004a004
   \      0x2BC   0x6804             LDR      R4,[R0, #+0]
   \      0x2BE   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x2C2   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x2C6   0x6004             STR      R4,[R0, #+0]
   \      0x2C8   0xE001             B.N      ??FTM_PinInit_47
    972                else
    973                  return 0;
   \                     ??FTM_PinInit_49: (+1)
   \      0x2CA   0x2000             MOVS     R0,#+0
   \      0x2CC   0xE1DC             B.N      ??FTM_PinInit_13
    974                break;
   \                     ??FTM_PinInit_47: (+1)
   \      0x2CE   0xE1DA             B.N      ??FTM_PinInit_14
    975              case FTM_PhA:
    976                if(pin == PTA8)
   \                     ??FTM_PinInit_39: (+1)
   \      0x2D0   0x0010             MOVS     R0,R2
   \      0x2D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x2D4   0x2808             CMP      R0,#+8
   \      0x2D6   0xD108             BNE.N    ??FTM_PinInit_50
    977                  PORTA->PCR[8] = PORTA->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x2D8   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40049020
   \      0x2DC   0x6804             LDR      R4,[R0, #+0]
   \      0x2DE   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x2E2   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x2E6   0x6004             STR      R4,[R0, #+0]
   \      0x2E8   0xE019             B.N      ??FTM_PinInit_51
    978                else if(pin == PTA12)
   \                     ??FTM_PinInit_50: (+1)
   \      0x2EA   0x0010             MOVS     R0,R2
   \      0x2EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x2EE   0x280C             CMP      R0,#+12
   \      0x2F0   0xD106             BNE.N    ??FTM_PinInit_52
    979                  PORTA->PCR[12] = PORTA->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(7);
   \      0x2F2   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x40049030
   \      0x2F6   0x6804             LDR      R4,[R0, #+0]
   \      0x2F8   0xF454 0x64E0      ORRS     R4,R4,#0x700
   \      0x2FC   0x6004             STR      R4,[R0, #+0]
   \      0x2FE   0xE00E             B.N      ??FTM_PinInit_51
    980                else if(pin == PTB0)
   \                     ??FTM_PinInit_52: (+1)
   \      0x300   0x0010             MOVS     R0,R2
   \      0x302   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x304   0x2820             CMP      R0,#+32
   \      0x306   0xD108             BNE.N    ??FTM_PinInit_53
    981                  PORTB->PCR[0] = PORTB->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   \      0x308   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4004a000
   \      0x30C   0x6804             LDR      R4,[R0, #+0]
   \      0x30E   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x312   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x316   0x6004             STR      R4,[R0, #+0]
   \      0x318   0xE001             B.N      ??FTM_PinInit_51
    982                else
    983                  return 0;
   \                     ??FTM_PinInit_53: (+1)
   \      0x31A   0x2000             MOVS     R0,#+0
   \      0x31C   0xE1B4             B.N      ??FTM_PinInit_13
    984                break;
   \                     ??FTM_PinInit_51: (+1)
   \      0x31E   0xE1B2             B.N      ??FTM_PinInit_14
    985              case FTM_PhB:
    986                if(pin == PTA9)
   \                     ??FTM_PinInit_40: (+1)
   \      0x320   0x0010             MOVS     R0,R2
   \      0x322   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x324   0x2809             CMP      R0,#+9
   \      0x326   0xD108             BNE.N    ??FTM_PinInit_54
    987                  PORTA->PCR[9] = PORTA->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x328   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x40049024
   \      0x32C   0x6804             LDR      R4,[R0, #+0]
   \      0x32E   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x332   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x336   0x6004             STR      R4,[R0, #+0]
   \      0x338   0xE019             B.N      ??FTM_PinInit_41
    988                else if(pin == PTA13)
   \                     ??FTM_PinInit_54: (+1)
   \      0x33A   0x0010             MOVS     R0,R2
   \      0x33C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x33E   0x280D             CMP      R0,#+13
   \      0x340   0xD106             BNE.N    ??FTM_PinInit_55
    989                  PORTA->PCR[13] = PORTA->PCR[13] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(7);
   \      0x342   0x.... 0x....      LDR.W    R0,??DataTable15_6  ;; 0x40049034
   \      0x346   0x6804             LDR      R4,[R0, #+0]
   \      0x348   0xF454 0x64E0      ORRS     R4,R4,#0x700
   \      0x34C   0x6004             STR      R4,[R0, #+0]
   \      0x34E   0xE00E             B.N      ??FTM_PinInit_41
    990                else if(pin == PTB1)
   \                     ??FTM_PinInit_55: (+1)
   \      0x350   0x0010             MOVS     R0,R2
   \      0x352   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x354   0x2821             CMP      R0,#+33
   \      0x356   0xD108             BNE.N    ??FTM_PinInit_56
    991                  PORTB->PCR[1] = PORTB->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   \      0x358   0x.... 0x....      LDR.W    R0,??DataTable15_7  ;; 0x4004a004
   \      0x35C   0x6804             LDR      R4,[R0, #+0]
   \      0x35E   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x362   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x366   0x6004             STR      R4,[R0, #+0]
   \      0x368   0xE001             B.N      ??FTM_PinInit_41
    992                else
    993                  return 0;
   \                     ??FTM_PinInit_56: (+1)
   \      0x36A   0x2000             MOVS     R0,#+0
   \      0x36C   0xE18C             B.N      ??FTM_PinInit_13
    994              default:
    995                return 0;   
   \                     ??FTM_PinInit_41: (+1)
   \      0x36E   0x2000             MOVS     R0,#+0
   \      0x370   0xE18A             B.N      ??FTM_PinInit_13
    996              }
    997            }
    998            else if(ftmx == FTM2)
   \                     ??FTM_PinInit_36: (+1)
   \      0x372   0x.... 0x....      LDR.W    R0,??DataTable10_13  ;; 0x400b8000
   \      0x376   0x4283             CMP      R3,R0
   \      0x378   0xF040 0x8081      BNE.W    ??FTM_PinInit_57
    999            {
   1000              switch(chn)
   \      0x37C   0x0008             MOVS     R0,R1
   \      0x37E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x380   0x2800             CMP      R0,#+0
   \      0x382   0xD006             BEQ.N    ??FTM_PinInit_58
   \      0x384   0x2801             CMP      R0,#+1
   \      0x386   0xD021             BEQ.N    ??FTM_PinInit_59
   \      0x388   0x2808             CMP      R0,#+8
   \      0x38A   0xD03C             BEQ.N    ??FTM_PinInit_60
   \      0x38C   0x2809             CMP      R0,#+9
   \      0x38E   0xD057             BEQ.N    ??FTM_PinInit_61
   \      0x390   0xE073             B.N      ??FTM_PinInit_62
   1001              {
   1002              case FTM_Ch0:
   1003                if(pin == PTA10)
   \                     ??FTM_PinInit_58: (+1)
   \      0x392   0x0010             MOVS     R0,R2
   \      0x394   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x396   0x280A             CMP      R0,#+10
   \      0x398   0xD108             BNE.N    ??FTM_PinInit_63
   1004                  PORTA->PCR[10] = PORTA->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \      0x39A   0x.... 0x....      LDR.W    R0,??DataTable15_8  ;; 0x40049028
   \      0x39E   0x6804             LDR      R4,[R0, #+0]
   \      0x3A0   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x3A4   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x3A8   0x6004             STR      R4,[R0, #+0]
   \      0x3AA   0xE00E             B.N      ??FTM_PinInit_64
   1005                else if(pin == PTB18)
   \                     ??FTM_PinInit_63: (+1)
   \      0x3AC   0x0010             MOVS     R0,R2
   \      0x3AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x3B0   0x2832             CMP      R0,#+50
   \      0x3B2   0xD108             BNE.N    ??FTM_PinInit_65
   1006                  PORTB->PCR[18] = PORTB->PCR[18] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \      0x3B4   0x.... 0x....      LDR.W    R0,??DataTable15_9  ;; 0x4004a048
   \      0x3B8   0x6804             LDR      R4,[R0, #+0]
   \      0x3BA   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x3BE   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x3C2   0x6004             STR      R4,[R0, #+0]
   \      0x3C4   0xE001             B.N      ??FTM_PinInit_64
   1007                else
   1008                  return 0;
   \                     ??FTM_PinInit_65: (+1)
   \      0x3C6   0x2000             MOVS     R0,#+0
   \      0x3C8   0xE15E             B.N      ??FTM_PinInit_13
   1009                break;
   \                     ??FTM_PinInit_64: (+1)
   \      0x3CA   0xE15C             B.N      ??FTM_PinInit_14
   1010              case FTM_Ch1:
   1011                if(pin == PTA11)
   \                     ??FTM_PinInit_59: (+1)
   \      0x3CC   0x0010             MOVS     R0,R2
   \      0x3CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x3D0   0x280B             CMP      R0,#+11
   \      0x3D2   0xD108             BNE.N    ??FTM_PinInit_66
   1012                  PORTA->PCR[11] = PORTA->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \      0x3D4   0x.... 0x....      LDR.W    R0,??DataTable15_10  ;; 0x4004902c
   \      0x3D8   0x6804             LDR      R4,[R0, #+0]
   \      0x3DA   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x3DE   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x3E2   0x6004             STR      R4,[R0, #+0]
   \      0x3E4   0xE00E             B.N      ??FTM_PinInit_67
   1013                else if(pin == PTB19)
   \                     ??FTM_PinInit_66: (+1)
   \      0x3E6   0x0010             MOVS     R0,R2
   \      0x3E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x3EA   0x2833             CMP      R0,#+51
   \      0x3EC   0xD108             BNE.N    ??FTM_PinInit_68
   1014                  PORTB->PCR[19] = PORTB->PCR[19] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \      0x3EE   0x.... 0x....      LDR.W    R0,??DataTable15_11  ;; 0x4004a04c
   \      0x3F2   0x6804             LDR      R4,[R0, #+0]
   \      0x3F4   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x3F8   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x3FC   0x6004             STR      R4,[R0, #+0]
   \      0x3FE   0xE001             B.N      ??FTM_PinInit_67
   1015                else
   1016                  return 0;
   \                     ??FTM_PinInit_68: (+1)
   \      0x400   0x2000             MOVS     R0,#+0
   \      0x402   0xE141             B.N      ??FTM_PinInit_13
   1017                break;
   \                     ??FTM_PinInit_67: (+1)
   \      0x404   0xE13F             B.N      ??FTM_PinInit_14
   1018              case FTM_PhA:
   1019                if(pin == PTA10)
   \                     ??FTM_PinInit_60: (+1)
   \      0x406   0x0010             MOVS     R0,R2
   \      0x408   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x40A   0x280A             CMP      R0,#+10
   \      0x40C   0xD108             BNE.N    ??FTM_PinInit_69
   1020                  PORTA->PCR[10] = PORTA->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x40E   0x.... 0x....      LDR.W    R0,??DataTable15_8  ;; 0x40049028
   \      0x412   0x6804             LDR      R4,[R0, #+0]
   \      0x414   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x418   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x41C   0x6004             STR      R4,[R0, #+0]
   \      0x41E   0xE00E             B.N      ??FTM_PinInit_70
   1021                else if(pin == PTB18)
   \                     ??FTM_PinInit_69: (+1)
   \      0x420   0x0010             MOVS     R0,R2
   \      0x422   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x424   0x2832             CMP      R0,#+50
   \      0x426   0xD108             BNE.N    ??FTM_PinInit_71
   1022                  PORTB->PCR[18] = PORTB->PCR[18] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   \      0x428   0x.... 0x....      LDR.W    R0,??DataTable15_9  ;; 0x4004a048
   \      0x42C   0x6804             LDR      R4,[R0, #+0]
   \      0x42E   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x432   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x436   0x6004             STR      R4,[R0, #+0]
   \      0x438   0xE001             B.N      ??FTM_PinInit_70
   1023                else
   1024                  return 0;
   \                     ??FTM_PinInit_71: (+1)
   \      0x43A   0x2000             MOVS     R0,#+0
   \      0x43C   0xE124             B.N      ??FTM_PinInit_13
   1025                break;
   \                     ??FTM_PinInit_70: (+1)
   \      0x43E   0xE122             B.N      ??FTM_PinInit_14
   1026              case FTM_PhB:
   1027                if(pin == PTA11)
   \                     ??FTM_PinInit_61: (+1)
   \      0x440   0x0010             MOVS     R0,R2
   \      0x442   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x444   0x280B             CMP      R0,#+11
   \      0x446   0xD108             BNE.N    ??FTM_PinInit_72
   1028                  PORTA->PCR[11] = PORTA->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x448   0x.... 0x....      LDR.W    R0,??DataTable15_10  ;; 0x4004902c
   \      0x44C   0x6804             LDR      R4,[R0, #+0]
   \      0x44E   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x452   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x456   0x6004             STR      R4,[R0, #+0]
   \      0x458   0xE00E             B.N      ??FTM_PinInit_73
   1029                else if(pin == PTB19)
   \                     ??FTM_PinInit_72: (+1)
   \      0x45A   0x0010             MOVS     R0,R2
   \      0x45C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x45E   0x2833             CMP      R0,#+51
   \      0x460   0xD108             BNE.N    ??FTM_PinInit_74
   1030                  PORTB->PCR[19] = PORTB->PCR[19] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   \      0x462   0x.... 0x....      LDR.W    R0,??DataTable15_11  ;; 0x4004a04c
   \      0x466   0x6804             LDR      R4,[R0, #+0]
   \      0x468   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x46C   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x470   0x6004             STR      R4,[R0, #+0]
   \      0x472   0xE001             B.N      ??FTM_PinInit_73
   1031                else
   1032                  return 0;
   \                     ??FTM_PinInit_74: (+1)
   \      0x474   0x2000             MOVS     R0,#+0
   \      0x476   0xE107             B.N      ??FTM_PinInit_13
   1033                break;
   \                     ??FTM_PinInit_73: (+1)
   \      0x478   0xE105             B.N      ??FTM_PinInit_14
   1034              default:
   1035                return 0;   
   \                     ??FTM_PinInit_62: (+1)
   \      0x47A   0x2000             MOVS     R0,#+0
   \      0x47C   0xE104             B.N      ??FTM_PinInit_13
   1036              }
   1037            }
   1038            
   1039          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
   1040            else if(ftmx == FTM3)
   \                     ??FTM_PinInit_57: (+1)
   \      0x47E   0x.... 0x....      LDR.W    R0,??DataTable15_12  ;; 0x400b9000
   \      0x482   0x4283             CMP      R3,R0
   \      0x484   0xF040 0x80FD      BNE.W    ??FTM_PinInit_75
   1041            {
   1042              switch(chn)
   \      0x488   0x0008             MOVS     R0,R1
   \      0x48A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x48C   0x2800             CMP      R0,#+0
   \      0x48E   0xD00E             BEQ.N    ??FTM_PinInit_76
   \      0x490   0x2802             CMP      R0,#+2
   \      0x492   0xD046             BEQ.N    ??FTM_PinInit_77
   \      0x494   0xD328             BCC.N    ??FTM_PinInit_78
   \      0x496   0x2804             CMP      R0,#+4
   \      0x498   0xD07D             BEQ.N    ??FTM_PinInit_79
   \      0x49A   0xD35F             BCC.N    ??FTM_PinInit_80
   \      0x49C   0x2806             CMP      R0,#+6
   \      0x49E   0xF000 0x80B4      BEQ.W    ??FTM_PinInit_81
   \      0x4A2   0xF0C0 0x8095      BCC.W    ??FTM_PinInit_82
   \      0x4A6   0x2807             CMP      R0,#+7
   \      0x4A8   0xF000 0x80CC      BEQ.W    ??FTM_PinInit_83
   \      0x4AC   0xE0E7             B.N      ??FTM_PinInit_84
   1043              {
   1044              case FTM_Ch0:
   1045                if(pin == PTE5)
   \                     ??FTM_PinInit_76: (+1)
   \      0x4AE   0x0010             MOVS     R0,R2
   \      0x4B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x4B2   0x2881             CMP      R0,#+129
   \      0x4B4   0xD108             BNE.N    ??FTM_PinInit_85
   1046                  PORTE->PCR[5] = PORTE->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x4B6   0x.... 0x....      LDR.W    R0,??DataTable15_13  ;; 0x4004d014
   \      0x4BA   0x6804             LDR      R4,[R0, #+0]
   \      0x4BC   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x4C0   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x4C4   0x6004             STR      R4,[R0, #+0]
   \      0x4C6   0xE00E             B.N      ??FTM_PinInit_86
   1047                else if(pin == PTD0)
   \                     ??FTM_PinInit_85: (+1)
   \      0x4C8   0x0010             MOVS     R0,R2
   \      0x4CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x4CC   0x285C             CMP      R0,#+92
   \      0x4CE   0xD108             BNE.N    ??FTM_PinInit_87
   1048                  PORTD->PCR[0] = PORTD->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \      0x4D0   0x.... 0x....      LDR.W    R0,??DataTable15_14  ;; 0x4004c000
   \      0x4D4   0x6804             LDR      R4,[R0, #+0]
   \      0x4D6   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x4DA   0xF454 0x6480      ORRS     R4,R4,#0x400
   \      0x4DE   0x6004             STR      R4,[R0, #+0]
   \      0x4E0   0xE001             B.N      ??FTM_PinInit_86
   1049                else
   1050                  return 0;
   \                     ??FTM_PinInit_87: (+1)
   \      0x4E2   0x2000             MOVS     R0,#+0
   \      0x4E4   0xE0D0             B.N      ??FTM_PinInit_13
   1051                break;
   \                     ??FTM_PinInit_86: (+1)
   \      0x4E6   0xE0CE             B.N      ??FTM_PinInit_14
   1052              case FTM_Ch1:
   1053                if(pin == PTE6)
   \                     ??FTM_PinInit_78: (+1)
   \      0x4E8   0x0010             MOVS     R0,R2
   \      0x4EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x4EC   0x2882             CMP      R0,#+130
   \      0x4EE   0xD108             BNE.N    ??FTM_PinInit_88
   1054                  PORTE->PCR[6] = PORTE->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x4F0   0x.... 0x....      LDR.W    R0,??DataTable15_15  ;; 0x4004d018
   \      0x4F4   0x6804             LDR      R4,[R0, #+0]
   \      0x4F6   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x4FA   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x4FE   0x6004             STR      R4,[R0, #+0]
   \      0x500   0xE00E             B.N      ??FTM_PinInit_89
   1055                else if(pin == PTD1)
   \                     ??FTM_PinInit_88: (+1)
   \      0x502   0x0010             MOVS     R0,R2
   \      0x504   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x506   0x285D             CMP      R0,#+93
   \      0x508   0xD108             BNE.N    ??FTM_PinInit_90
   1056                  PORTD->PCR[1] = PORTD->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \      0x50A   0x.... 0x....      LDR.W    R0,??DataTable15_16  ;; 0x4004c004
   \      0x50E   0x6804             LDR      R4,[R0, #+0]
   \      0x510   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x514   0xF454 0x6480      ORRS     R4,R4,#0x400
   \      0x518   0x6004             STR      R4,[R0, #+0]
   \      0x51A   0xE001             B.N      ??FTM_PinInit_89
   1057                else
   1058                  return 0;
   \                     ??FTM_PinInit_90: (+1)
   \      0x51C   0x2000             MOVS     R0,#+0
   \      0x51E   0xE0B3             B.N      ??FTM_PinInit_13
   1059                break;
   \                     ??FTM_PinInit_89: (+1)
   \      0x520   0xE0B1             B.N      ??FTM_PinInit_14
   1060              case FTM_Ch2:
   1061                if(pin == PTE7)
   \                     ??FTM_PinInit_77: (+1)
   \      0x522   0x0010             MOVS     R0,R2
   \      0x524   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x526   0x2883             CMP      R0,#+131
   \      0x528   0xD108             BNE.N    ??FTM_PinInit_91
   1062                  PORTE->PCR[7] = PORTE->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x52A   0x.... 0x....      LDR.W    R0,??DataTable15_17  ;; 0x4004d01c
   \      0x52E   0x6804             LDR      R4,[R0, #+0]
   \      0x530   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x534   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x538   0x6004             STR      R4,[R0, #+0]
   \      0x53A   0xE00E             B.N      ??FTM_PinInit_92
   1063                else if(pin == PTD2)
   \                     ??FTM_PinInit_91: (+1)
   \      0x53C   0x0010             MOVS     R0,R2
   \      0x53E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x540   0x285E             CMP      R0,#+94
   \      0x542   0xD108             BNE.N    ??FTM_PinInit_93
   1064                  PORTD->PCR[2] = PORTD->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \      0x544   0x.... 0x....      LDR.W    R0,??DataTable15_18  ;; 0x4004c008
   \      0x548   0x6804             LDR      R4,[R0, #+0]
   \      0x54A   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x54E   0xF454 0x6480      ORRS     R4,R4,#0x400
   \      0x552   0x6004             STR      R4,[R0, #+0]
   \      0x554   0xE001             B.N      ??FTM_PinInit_92
   1065                else
   1066                  return 0;
   \                     ??FTM_PinInit_93: (+1)
   \      0x556   0x2000             MOVS     R0,#+0
   \      0x558   0xE096             B.N      ??FTM_PinInit_13
   1067                break;
   \                     ??FTM_PinInit_92: (+1)
   \      0x55A   0xE094             B.N      ??FTM_PinInit_14
   1068              case FTM_Ch3:
   1069                if(pin == PTE8)
   \                     ??FTM_PinInit_80: (+1)
   \      0x55C   0x0010             MOVS     R0,R2
   \      0x55E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x560   0x2884             CMP      R0,#+132
   \      0x562   0xD108             BNE.N    ??FTM_PinInit_94
   1070                  PORTE->PCR[8] = PORTE->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x564   0x.... 0x....      LDR.W    R0,??DataTable15_19  ;; 0x4004d020
   \      0x568   0x6804             LDR      R4,[R0, #+0]
   \      0x56A   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x56E   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x572   0x6004             STR      R4,[R0, #+0]
   \      0x574   0xE00E             B.N      ??FTM_PinInit_95
   1071                else if(pin == PTD3)
   \                     ??FTM_PinInit_94: (+1)
   \      0x576   0x0010             MOVS     R0,R2
   \      0x578   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x57A   0x285F             CMP      R0,#+95
   \      0x57C   0xD108             BNE.N    ??FTM_PinInit_96
   1072                  PORTD->PCR[3] = PORTD->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   \      0x57E   0x.... 0x....      LDR.W    R0,??DataTable15_20  ;; 0x4004c00c
   \      0x582   0x6804             LDR      R4,[R0, #+0]
   \      0x584   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x588   0xF454 0x6480      ORRS     R4,R4,#0x400
   \      0x58C   0x6004             STR      R4,[R0, #+0]
   \      0x58E   0xE001             B.N      ??FTM_PinInit_95
   1073                else
   1074                  return 0;
   \                     ??FTM_PinInit_96: (+1)
   \      0x590   0x2000             MOVS     R0,#+0
   \      0x592   0xE079             B.N      ??FTM_PinInit_13
   1075                break;
   \                     ??FTM_PinInit_95: (+1)
   \      0x594   0xE077             B.N      ??FTM_PinInit_14
   1076              case FTM_Ch4:
   1077                if(pin == PTE9)
   \                     ??FTM_PinInit_79: (+1)
   \      0x596   0x0010             MOVS     R0,R2
   \      0x598   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x59A   0x2885             CMP      R0,#+133
   \      0x59C   0xD108             BNE.N    ??FTM_PinInit_97
   1078                  PORTE->PCR[9] = PORTE->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x59E   0x.... 0x....      LDR.W    R0,??DataTable15_21  ;; 0x4004d024
   \      0x5A2   0x6804             LDR      R4,[R0, #+0]
   \      0x5A4   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x5A8   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x5AC   0x6004             STR      R4,[R0, #+0]
   \      0x5AE   0xE00E             B.N      ??FTM_PinInit_98
   1079                else if(pin == PTC8)
   \                     ??FTM_PinInit_97: (+1)
   \      0x5B0   0x0010             MOVS     R0,R2
   \      0x5B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x5B4   0x2844             CMP      R0,#+68
   \      0x5B6   0xD108             BNE.N    ??FTM_PinInit_99
   1080                  PORTC->PCR[8] = PORTC->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \      0x5B8   0x.... 0x....      LDR.W    R0,??DataTable15_22  ;; 0x4004b020
   \      0x5BC   0x6804             LDR      R4,[R0, #+0]
   \      0x5BE   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x5C2   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x5C6   0x6004             STR      R4,[R0, #+0]
   \      0x5C8   0xE001             B.N      ??FTM_PinInit_98
   1081                else
   1082                  return 0;
   \                     ??FTM_PinInit_99: (+1)
   \      0x5CA   0x2000             MOVS     R0,#+0
   \      0x5CC   0xE05C             B.N      ??FTM_PinInit_13
   1083                break;
   \                     ??FTM_PinInit_98: (+1)
   \      0x5CE   0xE05A             B.N      ??FTM_PinInit_14
   1084              case FTM_Ch5:
   1085                if(pin == PTE10)
   \                     ??FTM_PinInit_82: (+1)
   \      0x5D0   0x0010             MOVS     R0,R2
   \      0x5D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x5D4   0x2886             CMP      R0,#+134
   \      0x5D6   0xD108             BNE.N    ??FTM_PinInit_100
   1086                  PORTE->PCR[10] = PORTE->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x5D8   0x.... 0x....      LDR.W    R0,??DataTable15_23  ;; 0x4004d028
   \      0x5DC   0x6804             LDR      R4,[R0, #+0]
   \      0x5DE   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x5E2   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x5E6   0x6004             STR      R4,[R0, #+0]
   \      0x5E8   0xE00E             B.N      ??FTM_PinInit_101
   1087                else if(pin == PTC9)
   \                     ??FTM_PinInit_100: (+1)
   \      0x5EA   0x0010             MOVS     R0,R2
   \      0x5EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x5EE   0x2845             CMP      R0,#+69
   \      0x5F0   0xD108             BNE.N    ??FTM_PinInit_102
   1088                  PORTC->PCR[9] = PORTC->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \      0x5F2   0x.... 0x....      LDR.W    R0,??DataTable15_24  ;; 0x4004b024
   \      0x5F6   0x6804             LDR      R4,[R0, #+0]
   \      0x5F8   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x5FC   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x600   0x6004             STR      R4,[R0, #+0]
   \      0x602   0xE001             B.N      ??FTM_PinInit_101
   1089                else
   1090                  return 0;
   \                     ??FTM_PinInit_102: (+1)
   \      0x604   0x2000             MOVS     R0,#+0
   \      0x606   0xE03F             B.N      ??FTM_PinInit_13
   1091                break;
   \                     ??FTM_PinInit_101: (+1)
   \      0x608   0xE03D             B.N      ??FTM_PinInit_14
   1092              case FTM_Ch6:
   1093                if(pin == PTE11)
   \                     ??FTM_PinInit_81: (+1)
   \      0x60A   0x0010             MOVS     R0,R2
   \      0x60C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x60E   0x2887             CMP      R0,#+135
   \      0x610   0xD108             BNE.N    ??FTM_PinInit_103
   1094                  PORTE->PCR[11] = PORTE->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x612   0x.... 0x....      LDR.W    R0,??DataTable15_25  ;; 0x4004d02c
   \      0x616   0x6804             LDR      R4,[R0, #+0]
   \      0x618   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x61C   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x620   0x6004             STR      R4,[R0, #+0]
   \      0x622   0xE00E             B.N      ??FTM_PinInit_104
   1095                else if(pin == PTC10)
   \                     ??FTM_PinInit_103: (+1)
   \      0x624   0x0010             MOVS     R0,R2
   \      0x626   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x628   0x2846             CMP      R0,#+70
   \      0x62A   0xD108             BNE.N    ??FTM_PinInit_105
   1096                  PORTC->PCR[10] = PORTC->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \      0x62C   0x.... 0x....      LDR.W    R0,??DataTable15_26  ;; 0x4004b028
   \      0x630   0x6804             LDR      R4,[R0, #+0]
   \      0x632   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x636   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x63A   0x6004             STR      R4,[R0, #+0]
   \      0x63C   0xE001             B.N      ??FTM_PinInit_104
   1097                else
   1098                  return 0;
   \                     ??FTM_PinInit_105: (+1)
   \      0x63E   0x2000             MOVS     R0,#+0
   \      0x640   0xE022             B.N      ??FTM_PinInit_13
   1099                break;
   \                     ??FTM_PinInit_104: (+1)
   \      0x642   0xE020             B.N      ??FTM_PinInit_14
   1100              case FTM_Ch7:
   1101                if(pin == PTE12)
   \                     ??FTM_PinInit_83: (+1)
   \      0x644   0x0010             MOVS     R0,R2
   \      0x646   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x648   0x2888             CMP      R0,#+136
   \      0x64A   0xD108             BNE.N    ??FTM_PinInit_106
   1102                  PORTE->PCR[12] = PORTE->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   \      0x64C   0x.... 0x....      LDR.W    R0,??DataTable15_27  ;; 0x4004d030
   \      0x650   0x6804             LDR      R4,[R0, #+0]
   \      0x652   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x656   0xF454 0x64C0      ORRS     R4,R4,#0x600
   \      0x65A   0x6004             STR      R4,[R0, #+0]
   \      0x65C   0xE00E             B.N      ??FTM_PinInit_107
   1103                else if(pin == PTC11)
   \                     ??FTM_PinInit_106: (+1)
   \      0x65E   0x0010             MOVS     R0,R2
   \      0x660   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x662   0x2847             CMP      R0,#+71
   \      0x664   0xD108             BNE.N    ??FTM_PinInit_108
   1104                  PORTC->PCR[11] = PORTC->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   \      0x666   0x.... 0x....      LDR.W    R0,??DataTable15_28  ;; 0x4004b02c
   \      0x66A   0x6804             LDR      R4,[R0, #+0]
   \      0x66C   0xF434 0x64E0      BICS     R4,R4,#0x700
   \      0x670   0xF454 0x7440      ORRS     R4,R4,#0x300
   \      0x674   0x6004             STR      R4,[R0, #+0]
   \      0x676   0xE001             B.N      ??FTM_PinInit_107
   1105                else
   1106                  return 0;
   \                     ??FTM_PinInit_108: (+1)
   \      0x678   0x2000             MOVS     R0,#+0
   \      0x67A   0xE005             B.N      ??FTM_PinInit_13
   1107                break;
   \                     ??FTM_PinInit_107: (+1)
   \      0x67C   0xE003             B.N      ??FTM_PinInit_14
   1108              default:
   1109                return 0;     
   \                     ??FTM_PinInit_84: (+1)
   \      0x67E   0x2000             MOVS     R0,#+0
   \      0x680   0xE002             B.N      ??FTM_PinInit_13
   1110              }
   1111            }
   1112          #endif
   1113            else
   1114            {
   1115              return 0;
   \                     ??FTM_PinInit_75: (+1)
   \      0x682   0x2000             MOVS     R0,#+0
   \      0x684   0xE000             B.N      ??FTM_PinInit_13
   1116            }
   1117            return 1;
   \                     ??FTM_PinInit_14: (+1)
   \      0x686   0x2001             MOVS     R0,#+1
   \                     ??FTM_PinInit_13: (+1)
   \      0x688   0xBC10             POP      {R4}
   \      0x68A   0x4770             BX       LR               ;; return
   1118          }
   1119          
   1120          /*
   1121           * FTM_PinInit
   1122           * 反初始化通道n指定引脚的FTM复用功能，内部调用
   1123           */

   \                                 In section .text, align 2, keep-with-next
   1124          static uint8 FTM_PinDeinit(FTM_Type *ftmx, FtmChnEnum_Type chn)
   1125          {
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init13FTM_PinDeinitEP8FTM_Type10FtmChnEnum: (+1)
   \        0x0   0x0002             MOVS     R2,R0
   1126            //根据ftmx禁用相应pin的ftm功能，回复到默认功能
   1127            if(ftmx == FTM0)
   \        0x2   0x.... 0x....      LDR.W    R0,??DataTable15_29  ;; 0x40038000
   \        0x6   0x4282             CMP      R2,R0
   \        0x8   0xF040 0x80BC      BNE.W    ??FTM_PinDeinit_0
   1128            {
   1129              switch(chn)
   \        0xC   0x0008             MOVS     R0,R1
   \        0xE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD00D             BEQ.N    ??FTM_PinDeinit_1
   \       0x14   0x2802             CMP      R0,#+2
   \       0x16   0xD035             BEQ.N    ??FTM_PinDeinit_2
   \       0x18   0xD31F             BCC.N    ??FTM_PinDeinit_3
   \       0x1A   0x2804             CMP      R0,#+4
   \       0x1C   0xD05C             BEQ.N    ??FTM_PinDeinit_4
   \       0x1E   0xD346             BCC.N    ??FTM_PinDeinit_5
   \       0x20   0x2806             CMP      R0,#+6
   \       0x22   0xF000 0x8083      BEQ.W    ??FTM_PinDeinit_6
   \       0x26   0xD36C             BCC.N    ??FTM_PinDeinit_7
   \       0x28   0x2807             CMP      R0,#+7
   \       0x2A   0xF000 0x8094      BEQ.W    ??FTM_PinDeinit_8
   \       0x2E   0xE0A7             B.N      ??FTM_PinDeinit_9
   1130              {
   1131              case FTM_Ch0:
   1132                if((PORTA->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_1: (+1)
   \       0x30   0x.... 0x....      LDR.W    R0,??DataTable15_30  ;; 0x4004900c
   \       0x34   0x6803             LDR      R3,[R0, #+0]
   \       0x36   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \       0x3A   0xF5B3 0x7F40      CMP      R3,#+768
   \       0x3E   0xD101             BNE.N    ??FTM_PinDeinit_10
   1133                  PORTA->PCR[3] = PORT_PCR_MUX(0); 
   \       0x40   0x2300             MOVS     R3,#+0
   \       0x42   0x6003             STR      R3,[R0, #+0]
   1134                if((PORTC->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_10: (+1)
   \       0x44   0x.... 0x....      LDR.W    R0,??DataTable15_31  ;; 0x4004b004
   \       0x48   0x6803             LDR      R3,[R0, #+0]
   \       0x4A   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \       0x4E   0xF5B3 0x6F80      CMP      R3,#+1024
   \       0x52   0xD101             BNE.N    ??FTM_PinDeinit_11
   1135                  PORTC->PCR[1] = PORT_PCR_MUX(0);
   \       0x54   0x2300             MOVS     R3,#+0
   \       0x56   0x6003             STR      R3,[R0, #+0]
   1136                break;
   \                     ??FTM_PinDeinit_11: (+1)
   \       0x58   0xE22E             B.N      ??FTM_PinDeinit_12
   1137              case FTM_Ch1:
   1138                if((PORTA->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_3: (+1)
   \       0x5A   0x.... 0x....      LDR.W    R0,??DataTable15_32  ;; 0x40049010
   \       0x5E   0x6803             LDR      R3,[R0, #+0]
   \       0x60   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \       0x64   0xF5B3 0x7F40      CMP      R3,#+768
   \       0x68   0xD101             BNE.N    ??FTM_PinDeinit_13
   1139                  PORTA->PCR[4] = PORT_PCR_MUX(0); 
   \       0x6A   0x2300             MOVS     R3,#+0
   \       0x6C   0x6003             STR      R3,[R0, #+0]
   1140                if((PORTC->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_13: (+1)
   \       0x6E   0x.... 0x....      LDR.W    R0,??DataTable15_33  ;; 0x4004b008
   \       0x72   0x6803             LDR      R3,[R0, #+0]
   \       0x74   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \       0x78   0xF5B3 0x6F80      CMP      R3,#+1024
   \       0x7C   0xD101             BNE.N    ??FTM_PinDeinit_14
   1141                  PORTC->PCR[2] = PORT_PCR_MUX(0);
   \       0x7E   0x2300             MOVS     R3,#+0
   \       0x80   0x6003             STR      R3,[R0, #+0]
   1142                break;
   \                     ??FTM_PinDeinit_14: (+1)
   \       0x82   0xE219             B.N      ??FTM_PinDeinit_12
   1143              case FTM_Ch2:
   1144                if((PORTA->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_2: (+1)
   \       0x84   0x.... 0x....      LDR.W    R0,??DataTable15_34  ;; 0x40049014
   \       0x88   0x6803             LDR      R3,[R0, #+0]
   \       0x8A   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \       0x8E   0xF5B3 0x7F40      CMP      R3,#+768
   \       0x92   0xD101             BNE.N    ??FTM_PinDeinit_15
   1145                  PORTA->PCR[5] = PORT_PCR_MUX(0); 
   \       0x94   0x2300             MOVS     R3,#+0
   \       0x96   0x6003             STR      R3,[R0, #+0]
   1146                if((PORTC->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_15: (+1)
   \       0x98   0x.... 0x....      LDR.W    R0,??DataTable15_35  ;; 0x4004b00c
   \       0x9C   0x6803             LDR      R3,[R0, #+0]
   \       0x9E   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \       0xA2   0xF5B3 0x6F80      CMP      R3,#+1024
   \       0xA6   0xD101             BNE.N    ??FTM_PinDeinit_16
   1147                  PORTC->PCR[3] = PORT_PCR_MUX(0);
   \       0xA8   0x2300             MOVS     R3,#+0
   \       0xAA   0x6003             STR      R3,[R0, #+0]
   1148                break;
   \                     ??FTM_PinDeinit_16: (+1)
   \       0xAC   0xE204             B.N      ??FTM_PinDeinit_12
   1149              case FTM_Ch3:
   1150                if((PORTA->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_5: (+1)
   \       0xAE   0x.... 0x....      LDR.W    R0,??DataTable15_36  ;; 0x40049018
   \       0xB2   0x6803             LDR      R3,[R0, #+0]
   \       0xB4   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \       0xB8   0xF5B3 0x7F40      CMP      R3,#+768
   \       0xBC   0xD101             BNE.N    ??FTM_PinDeinit_17
   1151                  PORTA->PCR[6] = PORT_PCR_MUX(0); 
   \       0xBE   0x2300             MOVS     R3,#+0
   \       0xC0   0x6003             STR      R3,[R0, #+0]
   1152                if((PORTC->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_17: (+1)
   \       0xC2   0x.... 0x....      LDR.W    R0,??DataTable15_37  ;; 0x4004b010
   \       0xC6   0x6803             LDR      R3,[R0, #+0]
   \       0xC8   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \       0xCC   0xF5B3 0x6F80      CMP      R3,#+1024
   \       0xD0   0xD101             BNE.N    ??FTM_PinDeinit_18
   1153                  PORTC->PCR[4] = PORT_PCR_MUX(0);
   \       0xD2   0x2300             MOVS     R3,#+0
   \       0xD4   0x6003             STR      R3,[R0, #+0]
   1154                break;
   \                     ??FTM_PinDeinit_18: (+1)
   \       0xD6   0xE1EF             B.N      ??FTM_PinDeinit_12
   1155              case FTM_Ch4:
   1156                if((PORTA->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_4: (+1)
   \       0xD8   0x.... 0x....      LDR.W    R0,??DataTable15_38  ;; 0x4004901c
   \       0xDC   0x6803             LDR      R3,[R0, #+0]
   \       0xDE   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \       0xE2   0xF5B3 0x7F40      CMP      R3,#+768
   \       0xE6   0xD101             BNE.N    ??FTM_PinDeinit_19
   1157                  PORTA->PCR[7] = PORT_PCR_MUX(0); 
   \       0xE8   0x2300             MOVS     R3,#+0
   \       0xEA   0x6003             STR      R3,[R0, #+0]
   1158                if((PORTD->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_19: (+1)
   \       0xEC   0x.... 0x....      LDR.W    R0,??DataTable15_39  ;; 0x4004c010
   \       0xF0   0x6803             LDR      R3,[R0, #+0]
   \       0xF2   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \       0xF6   0xF5B3 0x6F80      CMP      R3,#+1024
   \       0xFA   0xD101             BNE.N    ??FTM_PinDeinit_20
   1159                  PORTD->PCR[4] = PORT_PCR_MUX(0);
   \       0xFC   0x2300             MOVS     R3,#+0
   \       0xFE   0x6003             STR      R3,[R0, #+0]
   1160                break;
   \                     ??FTM_PinDeinit_20: (+1)
   \      0x100   0xE1DA             B.N      ??FTM_PinDeinit_12
   1161              case FTM_Ch5:
   1162                if((PORTA->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_7: (+1)
   \      0x102   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x40049000
   \      0x106   0x6803             LDR      R3,[R0, #+0]
   \      0x108   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x10C   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x110   0xD101             BNE.N    ??FTM_PinDeinit_21
   1163                  PORTA->PCR[0] = PORT_PCR_MUX(0); 
   \      0x112   0x2300             MOVS     R3,#+0
   \      0x114   0x6003             STR      R3,[R0, #+0]
   1164                if((PORTD->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_21: (+1)
   \      0x116   0x.... 0x....      LDR.W    R0,??DataTable11_1  ;; 0x4004c014
   \      0x11A   0x6803             LDR      R3,[R0, #+0]
   \      0x11C   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x120   0xF5B3 0x6F80      CMP      R3,#+1024
   \      0x124   0xD101             BNE.N    ??FTM_PinDeinit_22
   1165                  PORTD->PCR[5] = PORT_PCR_MUX(0);
   \      0x126   0x2300             MOVS     R3,#+0
   \      0x128   0x6003             STR      R3,[R0, #+0]
   1166                break;
   \                     ??FTM_PinDeinit_22: (+1)
   \      0x12A   0xE1C5             B.N      ??FTM_PinDeinit_12
   1167              case FTM_Ch6:
   1168                if((PORTA->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_6: (+1)
   \      0x12C   0x.... 0x....      LDR.W    R0,??DataTable11_2  ;; 0x40049004
   \      0x130   0x6803             LDR      R3,[R0, #+0]
   \      0x132   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x136   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x13A   0xD101             BNE.N    ??FTM_PinDeinit_23
   1169                  PORTA->PCR[1] = PORT_PCR_MUX(0); 
   \      0x13C   0x2300             MOVS     R3,#+0
   \      0x13E   0x6003             STR      R3,[R0, #+0]
   1170                if((PORTD->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_23: (+1)
   \      0x140   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x4004c018
   \      0x144   0x6803             LDR      R3,[R0, #+0]
   \      0x146   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x14A   0xF5B3 0x6F80      CMP      R3,#+1024
   \      0x14E   0xD101             BNE.N    ??FTM_PinDeinit_24
   1171                  PORTD->PCR[6] = PORT_PCR_MUX(0);
   \      0x150   0x2300             MOVS     R3,#+0
   \      0x152   0x6003             STR      R3,[R0, #+0]
   1172                break;
   \                     ??FTM_PinDeinit_24: (+1)
   \      0x154   0xE1B0             B.N      ??FTM_PinDeinit_12
   1173              case FTM_Ch7:
   1174                if((PORTA->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_8: (+1)
   \      0x156   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40049008
   \      0x15A   0x6803             LDR      R3,[R0, #+0]
   \      0x15C   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x160   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x164   0xD101             BNE.N    ??FTM_PinDeinit_25
   1175                  PORTA->PCR[2] = PORT_PCR_MUX(0); 
   \      0x166   0x2300             MOVS     R3,#+0
   \      0x168   0x6003             STR      R3,[R0, #+0]
   1176                if((PORTD->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_25: (+1)
   \      0x16A   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x4004c01c
   \      0x16E   0x6803             LDR      R3,[R0, #+0]
   \      0x170   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x174   0xF5B3 0x6F80      CMP      R3,#+1024
   \      0x178   0xD101             BNE.N    ??FTM_PinDeinit_26
   1177                  PORTD->PCR[7] = PORT_PCR_MUX(0);      
   \      0x17A   0x2300             MOVS     R3,#+0
   \      0x17C   0x6003             STR      R3,[R0, #+0]
   1178                break;
   \                     ??FTM_PinDeinit_26: (+1)
   \      0x17E   0xE19B             B.N      ??FTM_PinDeinit_12
   1179              default:
   1180                return 0;     
   \                     ??FTM_PinDeinit_9: (+1)
   \      0x180   0x2000             MOVS     R0,#+0
   \      0x182   0xE19A             B.N      ??FTM_PinDeinit_27
   1181              }
   1182            }
   1183            else if(ftmx == FTM1)
   \                     ??FTM_PinDeinit_0: (+1)
   \      0x184   0x.... 0x....      LDR.W    R0,??DataTable15_40  ;; 0x40039000
   \      0x188   0x4282             CMP      R2,R0
   \      0x18A   0xF040 0x8087      BNE.W    ??FTM_PinDeinit_28
   1184            {
   1185              switch(chn)
   \      0x18E   0x0008             MOVS     R0,R1
   \      0x190   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x192   0x2800             CMP      R0,#+0
   \      0x194   0xD006             BEQ.N    ??FTM_PinDeinit_29
   \      0x196   0x2801             CMP      R0,#+1
   \      0x198   0xD023             BEQ.N    ??FTM_PinDeinit_30
   \      0x19A   0x2808             CMP      R0,#+8
   \      0x19C   0xD040             BEQ.N    ??FTM_PinDeinit_31
   \      0x19E   0x2809             CMP      R0,#+9
   \      0x1A0   0xD05D             BEQ.N    ??FTM_PinDeinit_32
   \      0x1A2   0xE079             B.N      ??FTM_PinDeinit_33
   1186              {
   1187              case FTM_Ch0:
   1188                if((PORTA->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_29: (+1)
   \      0x1A4   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40049020
   \      0x1A8   0x6803             LDR      R3,[R0, #+0]
   \      0x1AA   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x1AE   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x1B2   0xD101             BNE.N    ??FTM_PinDeinit_34
   1189                  PORTA->PCR[8] = PORT_PCR_MUX(0); 
   \      0x1B4   0x2300             MOVS     R3,#+0
   \      0x1B6   0x6003             STR      R3,[R0, #+0]
   1190                if((PORTA->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_34: (+1)
   \      0x1B8   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x40049030
   \      0x1BC   0x6803             LDR      R3,[R0, #+0]
   \      0x1BE   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x1C2   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x1C6   0xD101             BNE.N    ??FTM_PinDeinit_35
   1191                  PORTA->PCR[12] = PORT_PCR_MUX(0);
   \      0x1C8   0x2300             MOVS     R3,#+0
   \      0x1CA   0x6003             STR      R3,[R0, #+0]
   1192                if((PORTB->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_35: (+1)
   \      0x1CC   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4004a000
   \      0x1D0   0x6803             LDR      R3,[R0, #+0]
   \      0x1D2   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x1D6   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x1DA   0xD101             BNE.N    ??FTM_PinDeinit_36
   1193                  PORTB->PCR[0] = PORT_PCR_MUX(0);
   \      0x1DC   0x2300             MOVS     R3,#+0
   \      0x1DE   0x6003             STR      R3,[R0, #+0]
   1194                break;
   \                     ??FTM_PinDeinit_36: (+1)
   \      0x1E0   0xE16A             B.N      ??FTM_PinDeinit_12
   1195              case FTM_Ch1:
   1196                if((PORTA->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_30: (+1)
   \      0x1E2   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x40049024
   \      0x1E6   0x6803             LDR      R3,[R0, #+0]
   \      0x1E8   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x1EC   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x1F0   0xD101             BNE.N    ??FTM_PinDeinit_37
   1197                  PORTA->PCR[9] = PORT_PCR_MUX(0); 
   \      0x1F2   0x2300             MOVS     R3,#+0
   \      0x1F4   0x6003             STR      R3,[R0, #+0]
   1198                if((PORTA->PCR[13]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_37: (+1)
   \      0x1F6   0x.... 0x....      LDR.W    R0,??DataTable15_6  ;; 0x40049034
   \      0x1FA   0x6803             LDR      R3,[R0, #+0]
   \      0x1FC   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x200   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x204   0xD101             BNE.N    ??FTM_PinDeinit_38
   1199                  PORTA->PCR[13] = PORT_PCR_MUX(0);
   \      0x206   0x2300             MOVS     R3,#+0
   \      0x208   0x6003             STR      R3,[R0, #+0]
   1200                if((PORTB->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_38: (+1)
   \      0x20A   0x.... 0x....      LDR.W    R0,??DataTable15_7  ;; 0x4004a004
   \      0x20E   0x6803             LDR      R3,[R0, #+0]
   \      0x210   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x214   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x218   0xD101             BNE.N    ??FTM_PinDeinit_39
   1201                  PORTB->PCR[1] = PORT_PCR_MUX(0);
   \      0x21A   0x2300             MOVS     R3,#+0
   \      0x21C   0x6003             STR      R3,[R0, #+0]
   1202                break;
   \                     ??FTM_PinDeinit_39: (+1)
   \      0x21E   0xE14B             B.N      ??FTM_PinDeinit_12
   1203              case FTM_PhA:
   1204                if((PORTA->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_31: (+1)
   \      0x220   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40049020
   \      0x224   0x6803             LDR      R3,[R0, #+0]
   \      0x226   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x22A   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x22E   0xD101             BNE.N    ??FTM_PinDeinit_40
   1205                  PORTA->PCR[8] = PORT_PCR_MUX(0); 
   \      0x230   0x2300             MOVS     R3,#+0
   \      0x232   0x6003             STR      R3,[R0, #+0]
   1206                if((PORTA->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(7))
   \                     ??FTM_PinDeinit_40: (+1)
   \      0x234   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x40049030
   \      0x238   0x6803             LDR      R3,[R0, #+0]
   \      0x23A   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x23E   0xF5B3 0x6FE0      CMP      R3,#+1792
   \      0x242   0xD101             BNE.N    ??FTM_PinDeinit_41
   1207                  PORTA->PCR[12] = PORT_PCR_MUX(0);
   \      0x244   0x2300             MOVS     R3,#+0
   \      0x246   0x6003             STR      R3,[R0, #+0]
   1208                if((PORTB->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_41: (+1)
   \      0x248   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4004a000
   \      0x24C   0x6803             LDR      R3,[R0, #+0]
   \      0x24E   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x252   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x256   0xD101             BNE.N    ??FTM_PinDeinit_42
   1209                  PORTB->PCR[0] = PORT_PCR_MUX(0);
   \      0x258   0x2300             MOVS     R3,#+0
   \      0x25A   0x6003             STR      R3,[R0, #+0]
   1210                break;
   \                     ??FTM_PinDeinit_42: (+1)
   \      0x25C   0xE12C             B.N      ??FTM_PinDeinit_12
   1211              case FTM_PhB:
   1212                if((PORTA->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_32: (+1)
   \      0x25E   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x40049024
   \      0x262   0x6803             LDR      R3,[R0, #+0]
   \      0x264   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x268   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x26C   0xD101             BNE.N    ??FTM_PinDeinit_43
   1213                  PORTA->PCR[9] = PORT_PCR_MUX(0); 
   \      0x26E   0x2300             MOVS     R3,#+0
   \      0x270   0x6003             STR      R3,[R0, #+0]
   1214                if((PORTA->PCR[13]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(7))
   \                     ??FTM_PinDeinit_43: (+1)
   \      0x272   0x....             LDR.N    R0,??DataTable15_6  ;; 0x40049034
   \      0x274   0x6803             LDR      R3,[R0, #+0]
   \      0x276   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x27A   0xF5B3 0x6FE0      CMP      R3,#+1792
   \      0x27E   0xD101             BNE.N    ??FTM_PinDeinit_44
   1215                  PORTA->PCR[13] = PORT_PCR_MUX(0);
   \      0x280   0x2300             MOVS     R3,#+0
   \      0x282   0x6003             STR      R3,[R0, #+0]
   1216                if((PORTB->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_44: (+1)
   \      0x284   0x....             LDR.N    R0,??DataTable15_7  ;; 0x4004a004
   \      0x286   0x6803             LDR      R3,[R0, #+0]
   \      0x288   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x28C   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x290   0xD101             BNE.N    ??FTM_PinDeinit_45
   1217                  PORTB->PCR[1] = PORT_PCR_MUX(0);
   \      0x292   0x2300             MOVS     R3,#+0
   \      0x294   0x6003             STR      R3,[R0, #+0]
   1218                break;
   \                     ??FTM_PinDeinit_45: (+1)
   \      0x296   0xE10F             B.N      ??FTM_PinDeinit_12
   1219              default:
   1220                return 0;   
   \                     ??FTM_PinDeinit_33: (+1)
   \      0x298   0x2000             MOVS     R0,#+0
   \      0x29A   0xE10E             B.N      ??FTM_PinDeinit_27
   1221              }
   1222            }
   1223            else if(ftmx == FTM2)
   \                     ??FTM_PinDeinit_28: (+1)
   \      0x29C   0x.... 0x....      LDR.W    R0,??DataTable15_41  ;; 0x400b8000
   \      0x2A0   0x4282             CMP      R2,R0
   \      0x2A2   0xD158             BNE.N    ??FTM_PinDeinit_46
   1224            {
   1225              switch(chn)
   \      0x2A4   0x0008             MOVS     R0,R1
   \      0x2A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x2A8   0x2800             CMP      R0,#+0
   \      0x2AA   0xD006             BEQ.N    ??FTM_PinDeinit_47
   \      0x2AC   0x2801             CMP      R0,#+1
   \      0x2AE   0xD017             BEQ.N    ??FTM_PinDeinit_48
   \      0x2B0   0x2808             CMP      R0,#+8
   \      0x2B2   0xD028             BEQ.N    ??FTM_PinDeinit_49
   \      0x2B4   0x2809             CMP      R0,#+9
   \      0x2B6   0xD039             BEQ.N    ??FTM_PinDeinit_50
   \      0x2B8   0xE04B             B.N      ??FTM_PinDeinit_51
   1226              {
   1227              case FTM_Ch0:
   1228                if((PORTA->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_47: (+1)
   \      0x2BA   0x....             LDR.N    R0,??DataTable15_8  ;; 0x40049028
   \      0x2BC   0x6803             LDR      R3,[R0, #+0]
   \      0x2BE   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x2C2   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x2C6   0xD101             BNE.N    ??FTM_PinDeinit_52
   1229                  PORTA->PCR[10] = PORT_PCR_MUX(0); 
   \      0x2C8   0x2300             MOVS     R3,#+0
   \      0x2CA   0x6003             STR      R3,[R0, #+0]
   1230                if((PORTB->PCR[18]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_52: (+1)
   \      0x2CC   0x....             LDR.N    R0,??DataTable15_9  ;; 0x4004a048
   \      0x2CE   0x6803             LDR      R3,[R0, #+0]
   \      0x2D0   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x2D4   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x2D8   0xD101             BNE.N    ??FTM_PinDeinit_53
   1231                  PORTB->PCR[18] = PORT_PCR_MUX(0);
   \      0x2DA   0x2300             MOVS     R3,#+0
   \      0x2DC   0x6003             STR      R3,[R0, #+0]
   1232                break;
   \                     ??FTM_PinDeinit_53: (+1)
   \      0x2DE   0xE0EB             B.N      ??FTM_PinDeinit_12
   1233              case FTM_Ch1:
   1234                if((PORTA->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_48: (+1)
   \      0x2E0   0x....             LDR.N    R0,??DataTable15_10  ;; 0x4004902c
   \      0x2E2   0x6803             LDR      R3,[R0, #+0]
   \      0x2E4   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x2E8   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x2EC   0xD101             BNE.N    ??FTM_PinDeinit_54
   1235                  PORTA->PCR[11] = PORT_PCR_MUX(0); 
   \      0x2EE   0x2300             MOVS     R3,#+0
   \      0x2F0   0x6003             STR      R3,[R0, #+0]
   1236                if((PORTB->PCR[19]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_54: (+1)
   \      0x2F2   0x....             LDR.N    R0,??DataTable15_11  ;; 0x4004a04c
   \      0x2F4   0x6803             LDR      R3,[R0, #+0]
   \      0x2F6   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x2FA   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x2FE   0xD101             BNE.N    ??FTM_PinDeinit_55
   1237                  PORTB->PCR[19] = PORT_PCR_MUX(0);
   \      0x300   0x2300             MOVS     R3,#+0
   \      0x302   0x6003             STR      R3,[R0, #+0]
   1238                break;
   \                     ??FTM_PinDeinit_55: (+1)
   \      0x304   0xE0D8             B.N      ??FTM_PinDeinit_12
   1239              case FTM_PhA:
   1240                if((PORTA->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_49: (+1)
   \      0x306   0x....             LDR.N    R0,??DataTable15_8  ;; 0x40049028
   \      0x308   0x6803             LDR      R3,[R0, #+0]
   \      0x30A   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x30E   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x312   0xD101             BNE.N    ??FTM_PinDeinit_56
   1241                  PORTA->PCR[10] = PORT_PCR_MUX(0); 
   \      0x314   0x2300             MOVS     R3,#+0
   \      0x316   0x6003             STR      R3,[R0, #+0]
   1242                if((PORTB->PCR[18]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_56: (+1)
   \      0x318   0x....             LDR.N    R0,??DataTable15_9  ;; 0x4004a048
   \      0x31A   0x6803             LDR      R3,[R0, #+0]
   \      0x31C   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x320   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x324   0xD101             BNE.N    ??FTM_PinDeinit_57
   1243                  PORTB->PCR[18] = PORT_PCR_MUX(0);
   \      0x326   0x2300             MOVS     R3,#+0
   \      0x328   0x6003             STR      R3,[R0, #+0]
   1244                break;
   \                     ??FTM_PinDeinit_57: (+1)
   \      0x32A   0xE0C5             B.N      ??FTM_PinDeinit_12
   1245              case FTM_PhB:
   1246                if((PORTA->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_50: (+1)
   \      0x32C   0x....             LDR.N    R0,??DataTable15_10  ;; 0x4004902c
   \      0x32E   0x6803             LDR      R3,[R0, #+0]
   \      0x330   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x334   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x338   0xD101             BNE.N    ??FTM_PinDeinit_58
   1247                  PORTA->PCR[11] = PORT_PCR_MUX(0); 
   \      0x33A   0x2300             MOVS     R3,#+0
   \      0x33C   0x6003             STR      R3,[R0, #+0]
   1248                if((PORTB->PCR[19]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_58: (+1)
   \      0x33E   0x....             LDR.N    R0,??DataTable15_11  ;; 0x4004a04c
   \      0x340   0x6803             LDR      R3,[R0, #+0]
   \      0x342   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x346   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x34A   0xD101             BNE.N    ??FTM_PinDeinit_59
   1249                  PORTB->PCR[19] = PORT_PCR_MUX(0);
   \      0x34C   0x2300             MOVS     R3,#+0
   \      0x34E   0x6003             STR      R3,[R0, #+0]
   1250                break;
   \                     ??FTM_PinDeinit_59: (+1)
   \      0x350   0xE0B2             B.N      ??FTM_PinDeinit_12
   1251              default:
   1252                return 0;   
   \                     ??FTM_PinDeinit_51: (+1)
   \      0x352   0x2000             MOVS     R0,#+0
   \      0x354   0xE0B1             B.N      ??FTM_PinDeinit_27
   1253              }
   1254            }
   1255          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
   1256            else if(ftmx == FTM3)
   \                     ??FTM_PinDeinit_46: (+1)
   \      0x356   0x....             LDR.N    R0,??DataTable15_12  ;; 0x400b9000
   \      0x358   0x4282             CMP      R2,R0
   \      0x35A   0xF040 0x80AB      BNE.W    ??FTM_PinDeinit_60
   1257            {
   1258              switch(chn)
   \      0x35E   0x0008             MOVS     R0,R1
   \      0x360   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x362   0x2800             CMP      R0,#+0
   \      0x364   0xD00C             BEQ.N    ??FTM_PinDeinit_61
   \      0x366   0x2802             CMP      R0,#+2
   \      0x368   0xD030             BEQ.N    ??FTM_PinDeinit_62
   \      0x36A   0xD31C             BCC.N    ??FTM_PinDeinit_63
   \      0x36C   0x2804             CMP      R0,#+4
   \      0x36E   0xD053             BEQ.N    ??FTM_PinDeinit_64
   \      0x370   0xD33F             BCC.N    ??FTM_PinDeinit_65
   \      0x372   0x2806             CMP      R0,#+6
   \      0x374   0xD076             BEQ.N    ??FTM_PinDeinit_66
   \      0x376   0xD362             BCC.N    ??FTM_PinDeinit_67
   \      0x378   0x2807             CMP      R0,#+7
   \      0x37A   0xF000 0x8086      BEQ.W    ??FTM_PinDeinit_68
   \      0x37E   0xE097             B.N      ??FTM_PinDeinit_69
   1259              {
   1260              case FTM_Ch0:
   1261                if((PORTE->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_61: (+1)
   \      0x380   0x....             LDR.N    R0,??DataTable15_13  ;; 0x4004d014
   \      0x382   0x6803             LDR      R3,[R0, #+0]
   \      0x384   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x388   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x38C   0xD101             BNE.N    ??FTM_PinDeinit_70
   1262                  PORTE->PCR[5] = PORT_PCR_MUX(0); 
   \      0x38E   0x2300             MOVS     R3,#+0
   \      0x390   0x6003             STR      R3,[R0, #+0]
   1263                if((PORTD->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_70: (+1)
   \      0x392   0x....             LDR.N    R0,??DataTable15_14  ;; 0x4004c000
   \      0x394   0x6803             LDR      R3,[R0, #+0]
   \      0x396   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x39A   0xF5B3 0x6F80      CMP      R3,#+1024
   \      0x39E   0xD101             BNE.N    ??FTM_PinDeinit_71
   1264                  PORTD->PCR[0] = PORT_PCR_MUX(0);
   \      0x3A0   0x2300             MOVS     R3,#+0
   \      0x3A2   0x6003             STR      R3,[R0, #+0]
   1265                break;
   \                     ??FTM_PinDeinit_71: (+1)
   \      0x3A4   0xE088             B.N      ??FTM_PinDeinit_12
   1266              case FTM_Ch1:
   1267                if((PORTE->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_63: (+1)
   \      0x3A6   0x....             LDR.N    R0,??DataTable15_15  ;; 0x4004d018
   \      0x3A8   0x6803             LDR      R3,[R0, #+0]
   \      0x3AA   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x3AE   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x3B2   0xD101             BNE.N    ??FTM_PinDeinit_72
   1268                  PORTE->PCR[6] = PORT_PCR_MUX(0); 
   \      0x3B4   0x2300             MOVS     R3,#+0
   \      0x3B6   0x6003             STR      R3,[R0, #+0]
   1269                if((PORTD->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_72: (+1)
   \      0x3B8   0x....             LDR.N    R0,??DataTable15_16  ;; 0x4004c004
   \      0x3BA   0x6803             LDR      R3,[R0, #+0]
   \      0x3BC   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x3C0   0xF5B3 0x6F80      CMP      R3,#+1024
   \      0x3C4   0xD101             BNE.N    ??FTM_PinDeinit_73
   1270                  PORTD->PCR[1] = PORT_PCR_MUX(0);
   \      0x3C6   0x2300             MOVS     R3,#+0
   \      0x3C8   0x6003             STR      R3,[R0, #+0]
   1271                break;
   \                     ??FTM_PinDeinit_73: (+1)
   \      0x3CA   0xE075             B.N      ??FTM_PinDeinit_12
   1272              case FTM_Ch2:
   1273                if((PORTE->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_62: (+1)
   \      0x3CC   0x....             LDR.N    R0,??DataTable15_17  ;; 0x4004d01c
   \      0x3CE   0x6803             LDR      R3,[R0, #+0]
   \      0x3D0   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x3D4   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x3D8   0xD101             BNE.N    ??FTM_PinDeinit_74
   1274                  PORTE->PCR[7] = PORT_PCR_MUX(0); 
   \      0x3DA   0x2300             MOVS     R3,#+0
   \      0x3DC   0x6003             STR      R3,[R0, #+0]
   1275                if((PORTD->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_74: (+1)
   \      0x3DE   0x....             LDR.N    R0,??DataTable15_18  ;; 0x4004c008
   \      0x3E0   0x6803             LDR      R3,[R0, #+0]
   \      0x3E2   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x3E6   0xF5B3 0x6F80      CMP      R3,#+1024
   \      0x3EA   0xD101             BNE.N    ??FTM_PinDeinit_75
   1276                  PORTD->PCR[2] = PORT_PCR_MUX(0);
   \      0x3EC   0x2300             MOVS     R3,#+0
   \      0x3EE   0x6003             STR      R3,[R0, #+0]
   1277                break;
   \                     ??FTM_PinDeinit_75: (+1)
   \      0x3F0   0xE062             B.N      ??FTM_PinDeinit_12
   1278              case FTM_Ch3:
   1279                if((PORTE->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_65: (+1)
   \      0x3F2   0x....             LDR.N    R0,??DataTable15_19  ;; 0x4004d020
   \      0x3F4   0x6803             LDR      R3,[R0, #+0]
   \      0x3F6   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x3FA   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x3FE   0xD101             BNE.N    ??FTM_PinDeinit_76
   1280                  PORTE->PCR[8] = PORT_PCR_MUX(0); 
   \      0x400   0x2300             MOVS     R3,#+0
   \      0x402   0x6003             STR      R3,[R0, #+0]
   1281                if((PORTD->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??FTM_PinDeinit_76: (+1)
   \      0x404   0x....             LDR.N    R0,??DataTable15_20  ;; 0x4004c00c
   \      0x406   0x6803             LDR      R3,[R0, #+0]
   \      0x408   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x40C   0xF5B3 0x6F80      CMP      R3,#+1024
   \      0x410   0xD101             BNE.N    ??FTM_PinDeinit_77
   1282                  PORTD->PCR[3] = PORT_PCR_MUX(0);
   \      0x412   0x2300             MOVS     R3,#+0
   \      0x414   0x6003             STR      R3,[R0, #+0]
   1283                break;
   \                     ??FTM_PinDeinit_77: (+1)
   \      0x416   0xE04F             B.N      ??FTM_PinDeinit_12
   1284              case FTM_Ch4:
   1285                if((PORTE->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_64: (+1)
   \      0x418   0x....             LDR.N    R0,??DataTable15_21  ;; 0x4004d024
   \      0x41A   0x6803             LDR      R3,[R0, #+0]
   \      0x41C   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x420   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x424   0xD101             BNE.N    ??FTM_PinDeinit_78
   1286                  PORTE->PCR[9] = PORT_PCR_MUX(0); 
   \      0x426   0x2300             MOVS     R3,#+0
   \      0x428   0x6003             STR      R3,[R0, #+0]
   1287                if((PORTC->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_78: (+1)
   \      0x42A   0x....             LDR.N    R0,??DataTable15_22  ;; 0x4004b020
   \      0x42C   0x6803             LDR      R3,[R0, #+0]
   \      0x42E   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x432   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x436   0xD101             BNE.N    ??FTM_PinDeinit_79
   1288                  PORTC->PCR[8] = PORT_PCR_MUX(0);
   \      0x438   0x2300             MOVS     R3,#+0
   \      0x43A   0x6003             STR      R3,[R0, #+0]
   1289                break;
   \                     ??FTM_PinDeinit_79: (+1)
   \      0x43C   0xE03C             B.N      ??FTM_PinDeinit_12
   1290              case FTM_Ch5:
   1291                if((PORTE->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_67: (+1)
   \      0x43E   0x....             LDR.N    R0,??DataTable15_23  ;; 0x4004d028
   \      0x440   0x6803             LDR      R3,[R0, #+0]
   \      0x442   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x446   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x44A   0xD101             BNE.N    ??FTM_PinDeinit_80
   1292                  PORTE->PCR[10] = PORT_PCR_MUX(0); 
   \      0x44C   0x2300             MOVS     R3,#+0
   \      0x44E   0x6003             STR      R3,[R0, #+0]
   1293                if((PORTC->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_80: (+1)
   \      0x450   0x....             LDR.N    R0,??DataTable15_24  ;; 0x4004b024
   \      0x452   0x6803             LDR      R3,[R0, #+0]
   \      0x454   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x458   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x45C   0xD101             BNE.N    ??FTM_PinDeinit_81
   1294                  PORTC->PCR[9] = PORT_PCR_MUX(0);
   \      0x45E   0x2300             MOVS     R3,#+0
   \      0x460   0x6003             STR      R3,[R0, #+0]
   1295                break;
   \                     ??FTM_PinDeinit_81: (+1)
   \      0x462   0xE029             B.N      ??FTM_PinDeinit_12
   1296              case FTM_Ch6:
   1297                if((PORTE->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_66: (+1)
   \      0x464   0x....             LDR.N    R0,??DataTable15_25  ;; 0x4004d02c
   \      0x466   0x6803             LDR      R3,[R0, #+0]
   \      0x468   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x46C   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x470   0xD101             BNE.N    ??FTM_PinDeinit_82
   1298                  PORTE->PCR[11] = PORT_PCR_MUX(0); 
   \      0x472   0x2300             MOVS     R3,#+0
   \      0x474   0x6003             STR      R3,[R0, #+0]
   1299                if((PORTC->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_82: (+1)
   \      0x476   0x....             LDR.N    R0,??DataTable15_26  ;; 0x4004b028
   \      0x478   0x6803             LDR      R3,[R0, #+0]
   \      0x47A   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x47E   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x482   0xD101             BNE.N    ??FTM_PinDeinit_83
   1300                  PORTC->PCR[10] = PORT_PCR_MUX(0);
   \      0x484   0x2300             MOVS     R3,#+0
   \      0x486   0x6003             STR      R3,[R0, #+0]
   1301                break;
   \                     ??FTM_PinDeinit_83: (+1)
   \      0x488   0xE016             B.N      ??FTM_PinDeinit_12
   1302              case FTM_Ch7:
   1303                if((PORTE->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   \                     ??FTM_PinDeinit_68: (+1)
   \      0x48A   0x....             LDR.N    R0,??DataTable15_27  ;; 0x4004d030
   \      0x48C   0x6803             LDR      R3,[R0, #+0]
   \      0x48E   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x492   0xF5B3 0x6FC0      CMP      R3,#+1536
   \      0x496   0xD101             BNE.N    ??FTM_PinDeinit_84
   1304                  PORTE->PCR[12] = PORT_PCR_MUX(0); 
   \      0x498   0x2300             MOVS     R3,#+0
   \      0x49A   0x6003             STR      R3,[R0, #+0]
   1305                if((PORTC->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??FTM_PinDeinit_84: (+1)
   \      0x49C   0x....             LDR.N    R0,??DataTable15_28  ;; 0x4004b02c
   \      0x49E   0x6803             LDR      R3,[R0, #+0]
   \      0x4A0   0xF413 0x63E0      ANDS     R3,R3,#0x700
   \      0x4A4   0xF5B3 0x7F40      CMP      R3,#+768
   \      0x4A8   0xD101             BNE.N    ??FTM_PinDeinit_85
   1306                  PORTC->PCR[11] = PORT_PCR_MUX(0);
   \      0x4AA   0x2300             MOVS     R3,#+0
   \      0x4AC   0x6003             STR      R3,[R0, #+0]
   1307                break;
   \                     ??FTM_PinDeinit_85: (+1)
   \      0x4AE   0xE003             B.N      ??FTM_PinDeinit_12
   1308              default:
   1309                return 0;     
   \                     ??FTM_PinDeinit_69: (+1)
   \      0x4B0   0x2000             MOVS     R0,#+0
   \      0x4B2   0xE002             B.N      ??FTM_PinDeinit_27
   1310              }
   1311            }
   1312          #endif
   1313            else
   1314            {
   1315              return 0;
   \                     ??FTM_PinDeinit_60: (+1)
   \      0x4B4   0x2000             MOVS     R0,#+0
   \      0x4B6   0xE000             B.N      ??FTM_PinDeinit_27
   1316            }
   1317            return 1;
   \                     ??FTM_PinDeinit_12: (+1)
   \      0x4B8   0x2001             MOVS     R0,#+1
   \                     ??FTM_PinDeinit_27: (+1)
   \      0x4BA   0x4770             BX       LR               ;; return
   1318          }
   1319          
   1320          /*
   1321           * FTM_QD_Init
   1322           * FTM模块正交解码模式初始化，内部调用
   1323           */

   \                                 In section .text, align 2, keep-with-next
   1324          static uint8 FTM_QD_Init(FTM_InitTypeDef ftm_init_structure)
   1325          {
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init11FTM_QD_InitE15FTM_InitTypeDef: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   1326            uint8 mode = ftm_init_structure.FTM_QdMode;
   \        0x2   0xF89D 0x1012      LDRB     R1,[SP, #+18]
   1327            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \        0x6   0x9A00             LDR      R2,[SP, #+0]
   1328           
   1329            ftmx->MODE |= FTM_MODE_FTMEN_MASK;    //FTM2EN=1   
   \        0x8   0x6D50             LDR      R0,[R2, #+84]
   \        0xA   0xF050 0x0001      ORRS     R0,R0,#0x1
   \        0xE   0x6550             STR      R0,[R2, #+84]
   1330            
   1331            ftmx->CNTIN = 0;//FTM0计数器初始值为0  
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x64D0             STR      R0,[R2, #+76]
   1332            ftmx->CNT=0;  
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x6050             STR      R0,[R2, #+4]
   1333            ftmx->MOD = 0xFFFF;//结束值  
   \       0x18   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x1C   0x6090             STR      R0,[R2, #+8]
   1334            
   1335            ftmx->QDCTRL |= mode;     //解码模式选择
   \       0x1E   0xF8D2 0x3080      LDR      R3,[R2, #+128]
   \       0x22   0x0008             MOVS     R0,R1
   \       0x24   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x26   0x4303             ORRS     R3,R0,R3
   \       0x28   0xF8C2 0x3080      STR      R3,[R2, #+128]
   1336            ftmx->QDCTRL |= FTM_QDCTRL_QUADEN_MASK;       //使能正交解码模式 
   \       0x2C   0xF8D2 0x0080      LDR      R0,[R2, #+128]
   \       0x30   0xF050 0x0001      ORRS     R0,R0,#0x1
   \       0x34   0xF8C2 0x0080      STR      R0,[R2, #+128]
   1337          
   1338            return 1;
   \       0x38   0x2001             MOVS     R0,#+1
   \       0x3A   0xB004             ADD      SP,SP,#+16
   \       0x3C   0x4770             BX       LR               ;; return
   1339          }
   1340          

   \                                 In section .text, align 2, keep-with-next
   1341          static uint8 FTM_DEC_Init(FTM_InitTypeDef ftm_init_structure)
   1342          {
   \                     _ZN26_INTERNAL_5_FTM_c_FTM_Init12FTM_DEC_InitE15FTM_InitTypeDef: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   1343            
   1344            return 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0xB004             ADD      SP,SP,#+16
   \        0x6   0x4770             BX       LR               ;; return
   1345          }
   1346          
   1347          /*
   1348           * FTM0--FTM1中断处理函数
   1349           * 与启动文件startup_K60.s中的中断向量表关联
   1350           * 用户无需修改，程序自动进入对应通道中断函数
   1351           */

   \                                 In section .text, align 2, keep-with-next
   1352          void FTM0_IRQHandler(void)
   1353          {
   \                     FTM0_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1354          #if (UCOS_II > 0u)
   1355            OS_CPU_SR  cpu_sr = 0u;
   1356            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1357            OSIntEnter();
   1358            OS_EXIT_CRITICAL();
   1359          #endif
   1360            
   1361            FTM_ISR[0]();
   \        0x2   0x....             LDR.N    R0,??DataTable15_42
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x4780             BLX      R0
   1362            
   1363          #if (UCOS_II > 0u)
   1364            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1365          #endif
   1366          }
   \                     ??FTM0_IRQHandler_0: (+1)
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
   1367          

   \                                 In section .text, align 2, keep-with-next
   1368          void FTM1_IRQHandler(void)
   1369          {
   \                     FTM1_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1370          #if (UCOS_II > 0u)
   1371            OS_CPU_SR  cpu_sr = 0u;
   1372            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1373            OSIntEnter();
   1374            OS_EXIT_CRITICAL();
   1375          #endif
   1376            
   1377            FTM_ISR[1]();
   \        0x2   0x....             LDR.N    R0,??DataTable15_42
   \        0x4   0x6840             LDR      R0,[R0, #+4]
   \        0x6   0x4780             BLX      R0
   1378            
   1379          #if (UCOS_II > 0u)
   1380            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1381          #endif
   1382          }
   \                     ??FTM1_IRQHandler_0: (+1)
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
   1383          

   \                                 In section .text, align 2, keep-with-next
   1384          void FTM2_IRQHandler(void)
   1385          {
   \                     FTM2_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1386          #if (UCOS_II > 0u)
   1387            OS_CPU_SR  cpu_sr = 0u;
   1388            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1389            OSIntEnter();
   1390            OS_EXIT_CRITICAL();
   1391          #endif
   1392            
   1393            FTM_ISR[2]();
   \        0x2   0x....             LDR.N    R0,??DataTable15_42
   \        0x4   0x6880             LDR      R0,[R0, #+8]
   \        0x6   0x4780             BLX      R0
   1394            
   1395          #if (UCOS_II > 0u)
   1396            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1397          #endif
   1398          }
   \                     ??FTM2_IRQHandler_0: (+1)
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
   1399          
   1400          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)

   \                                 In section .text, align 2, keep-with-next
   1401          void FTM3_IRQHandler(void)
   1402          {
   \                     FTM3_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   1403          #if (UCOS_II > 0u)
   1404            OS_CPU_SR  cpu_sr = 0u;
   1405            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1406            OSIntEnter();
   1407            OS_EXIT_CRITICAL();
   1408          #endif
   1409            
   1410            FTM_ISR[3]();
   \        0x2   0x....             LDR.N    R0,??DataTable15_42
   \        0x4   0x68C0             LDR      R0,[R0, #+12]
   \        0x6   0x4780             BLX      R0
   1411            
   1412          #if (UCOS_II > 0u)
   1413            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1414          #endif
   1415          }
   \                     ??FTM3_IRQHandler_0: (+1)
   \        0x8   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \        0x0   0x4003'8000        DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \        0x0   0x4004'803C        DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \        0x0   0x4003'9000        DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \        0x0   0x400B'8000        DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \        0x0   0x4004'8030        DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \        0x0   0x400B'9000        DC32     0x400b9000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \        0x0   0x....'....        DC32     FTM_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \        0x0   0x....'....        DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \        0x0   0x4003'8000        DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \        0x0   0x4004'900C        DC32     0x4004900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \        0x0   0x4004'B004        DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \        0x0   0x4004'9010        DC32     0x40049010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \        0x0   0x4004'B008        DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \        0x0   0x4004'9014        DC32     0x40049014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \        0x0   0x4004'B00C        DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \        0x0   0x4004'9018        DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \        0x0   0x4004'B010        DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \        0x0   0x4004'901C        DC32     0x4004901c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \        0x0   0x4004'C010        DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \        0x0   0x4003'9000        DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \        0x0   0x400B'8000        DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x4004'9000        DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0x4004'C014        DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0x4004'9004        DC32     0x40049004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0x4004'C018        DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0x4004'9008        DC32     0x40049008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \        0x0   0x4004'C01C        DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \        0x0   0x4004'9020        DC32     0x40049020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \        0x0   0x4004'9030        DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \        0x0   0x4004'A000        DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \        0x0   0x4004'9024        DC32     0x40049024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \        0x0   0x4004'9034        DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \        0x0   0x4004'A004        DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \        0x0   0x4004'9028        DC32     0x40049028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \        0x0   0x4004'A048        DC32     0x4004a048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \        0x0   0x4004'902C        DC32     0x4004902c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \        0x0   0x4004'A04C        DC32     0x4004a04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \        0x0   0x400B'9000        DC32     0x400b9000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \        0x0   0x4004'D014        DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \        0x0   0x4004'C000        DC32     0x4004c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \        0x0   0x4004'D018        DC32     0x4004d018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \        0x0   0x4004'C004        DC32     0x4004c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_17:
   \        0x0   0x4004'D01C        DC32     0x4004d01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_18:
   \        0x0   0x4004'C008        DC32     0x4004c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_19:
   \        0x0   0x4004'D020        DC32     0x4004d020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_20:
   \        0x0   0x4004'C00C        DC32     0x4004c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_21:
   \        0x0   0x4004'D024        DC32     0x4004d024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_22:
   \        0x0   0x4004'B020        DC32     0x4004b020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_23:
   \        0x0   0x4004'D028        DC32     0x4004d028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_24:
   \        0x0   0x4004'B024        DC32     0x4004b024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_25:
   \        0x0   0x4004'D02C        DC32     0x4004d02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_26:
   \        0x0   0x4004'B028        DC32     0x4004b028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_27:
   \        0x0   0x4004'D030        DC32     0x4004d030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_28:
   \        0x0   0x4004'B02C        DC32     0x4004b02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_29:
   \        0x0   0x4003'8000        DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_30:
   \        0x0   0x4004'900C        DC32     0x4004900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_31:
   \        0x0   0x4004'B004        DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_32:
   \        0x0   0x4004'9010        DC32     0x40049010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_33:
   \        0x0   0x4004'B008        DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_34:
   \        0x0   0x4004'9014        DC32     0x40049014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_35:
   \        0x0   0x4004'B00C        DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_36:
   \        0x0   0x4004'9018        DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_37:
   \        0x0   0x4004'B010        DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_38:
   \        0x0   0x4004'901C        DC32     0x4004901c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_39:
   \        0x0   0x4004'C010        DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_40:
   \        0x0   0x4003'9000        DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_41:
   \        0x0   0x400B'8000        DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_42:
   \        0x0   0x....'....        DC32     FTM_ISR

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \        0x8   0x5C 0x78          DC8 5CH, 78H, 73H, 6BH, 31H, 39H, 39H, 34H
   \              0x73 0x6B    
   \              0x31 0x39    
   \              0x39 0x34    
   \       0x10   0x30 0x39          DC8 30H, 39H, 31H, 30H, 5CH, 44H, 65H, 73H
   \              0x31 0x30    
   \              0x5C 0x44    
   \              0x65 0x73    
   \       0x18   0x6B 0x74          DC8 6BH, 74H, 6FH, 70H, 5CH, 66H, 6CH, 69H
   \              0x6F 0x70    
   \              0x5C 0x66    
   \              0x6C 0x69    
   \       0x20   0x67 0x68          DC8 67H, 68H, 74H, 43H, 6FH, 6EH, 74H, 72H
   \              0x74 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \       0x28   0x6F 0x6C          DC8 6FH, 6CH, 6CH, 65H, 72H, 2DH, 31H, 5CH
   \              0x6C 0x65    
   \              0x72 0x2D    
   \              0x31 0x5C    
   \       0x30   0x66 0x6C          DC8 66H, 6CH, 69H, 67H, 68H, 74H, 43H, 6FH
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x43 0x6F    
   \       0x38   0x6E 0x74          DC8 6EH, 74H, 72H, 6FH, 6CH, 6CH, 65H, 72H
   \              0x72 0x6F    
   \              0x6C 0x6C    
   \              0x65 0x72    
   \       0x40   0x2D 0x31          DC8 2DH, 31H, 5CH, 70H, 72H, 6FH, 67H, 72H
   \              0x5C 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \       0x48   0x61 0x6D          DC8 61H, 6DH, 5CH, 6CH, 69H, 62H, 5CH, 4CH
   \              0x5C 0x6C    
   \              0x69 0x62    
   \              0x5C 0x4C    
   \       0x50   0x50 0x4C          DC8 50H, 4CH, 44H, 5CH, 48H, 57H, 5CH, 46H
   \              0x44 0x5C    
   \              0x48 0x57    
   \              0x5C 0x46    
   \       0x58   0x54 0x4D          DC8 54H, 4DH, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \       0x5D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1416          #endif
   1417          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   FTM0_IRQHandler
         8   -- Indirect call
       8   FTM1_IRQHandler
         8   -- Indirect call
       8   FTM2_IRQHandler
         8   -- Indirect call
       8   FTM3_IRQHandler
         8   -- Indirect call
      16   FTM_DEC_Init(FTM_InitTypeDef)
      48   FTM_Deinit
        32   -> FTM_DisableIrq
        48   -> __aeabi_memcpy4
      16   FTM_DisableChn
        16   -> FTM_PinDeinit(FTM_Type *, FtmChnEnum)
      32   FTM_DisableIrq
        32   -> __NVIC_DisableIRQ(IRQn)
      32   FTM_EnableIrq
        32   -> __NVIC_EnableIRQ(IRQn)
      24   FTM_IC_Enable
        24   -> FTM_PinInit(FTM_Type *, FtmChnEnum, PortPinsEnum)
      40   FTM_IC_Init(FTM_InitTypeDef)
        40   -> assert_failed
      56   FTM_Init
        40   -> FTM_DEC_Init(FTM_InitTypeDef)
        40   -> FTM_IC_Init(FTM_InitTypeDef)
        40   -> FTM_PWM_Init(FTM_InitTypeDef)
        40   -> FTM_QD_Init(FTM_InitTypeDef)
        56   -> __aeabi_memcpy4
        40   -> assert_failed
      24   FTM_PWM_ChangeDuty
        24   -> assert_failed
      32   FTM_PWM_Enable
        32   -> FTM_PinInit(FTM_Type *, FtmChnEnum, PortPinsEnum)
        32   -> assert_failed
      40   FTM_PWM_Init(FTM_InitTypeDef)
        40   -> assert_failed
       0   FTM_PinDeinit(FTM_Type *, FtmChnEnum)
       4   FTM_PinInit(FTM_Type *, FtmChnEnum, PortPinsEnum)
       8   FTM_QD_Disable
         8   -> FTM_PinDeinit(FTM_Type *, FtmChnEnum)
      16   FTM_QD_Enable
        16   -> FTM_PinInit(FTM_Type *, FtmChnEnum, PortPinsEnum)
      16   FTM_QD_Init(FTM_InitTypeDef)
       0   __NVIC_DisableIRQ(IRQn)
       0   __NVIC_EnableIRQ(IRQn)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable13
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_18
       4  ??DataTable15_19
       4  ??DataTable15_2
       4  ??DataTable15_20
       4  ??DataTable15_21
       4  ??DataTable15_22
       4  ??DataTable15_23
       4  ??DataTable15_24
       4  ??DataTable15_25
       4  ??DataTable15_26
       4  ??DataTable15_27
       4  ??DataTable15_28
       4  ??DataTable15_29
       4  ??DataTable15_3
       4  ??DataTable15_30
       4  ??DataTable15_31
       4  ??DataTable15_32
       4  ??DataTable15_33
       4  ??DataTable15_34
       4  ??DataTable15_35
       4  ??DataTable15_36
       4  ??DataTable15_37
       4  ??DataTable15_38
       4  ??DataTable15_39
       4  ??DataTable15_4
       4  ??DataTable15_40
       4  ??DataTable15_41
       4  ??DataTable15_42
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      96  ?_0
      10  FTM0_IRQHandler
      10  FTM1_IRQHandler
      10  FTM2_IRQHandler
      10  FTM3_IRQHandler
       8  FTM_DEC_Init(FTM_InitTypeDef)
     128  FTM_Deinit
      44  FTM_DisableChn
      68  FTM_DisableIrq
      68  FTM_EnableIrq
     206  FTM_IC_Enable
     166  FTM_IC_Init(FTM_InitTypeDef)
      16  FTM_ISR
     308  FTM_Init
      82  FTM_PWM_ChangeDuty
     130  FTM_PWM_Enable
     324  FTM_PWM_Init(FTM_InitTypeDef)
    1212  FTM_PinDeinit(FTM_Type *, FtmChnEnum)
    1676  FTM_PinInit(FTM_Type *, FtmChnEnum, PortPinsEnum)
      64  FTM_QD_Disable
      76  FTM_QD_Enable
      62  FTM_QD_Init(FTM_InitTypeDef)
      40  __NVIC_DisableIRQ(IRQn)
      32  __NVIC_EnableIRQ(IRQn)
      72  -- Other

 
    72 bytes in section .ARM.exidx
    16 bytes in section .bss
    96 bytes in section .rodata
 5 018 bytes in section .text
 
 5 018 bytes of CODE  memory
   168 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: none
