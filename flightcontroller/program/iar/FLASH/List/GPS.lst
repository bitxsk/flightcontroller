###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         30/Jul/2018  16:03:59
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\GPS.cpp
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW328E.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\GPS.cpp
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\inc\c\DLib_Config_Full.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Core\Include\ -I
#        D:\iar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4 --text_out utf8
#        --utf8_text_in)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List\GPS.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj\GPS.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\GPS.cpp
      1          #include "GPS.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp CJumpFilter::CJumpFilter()
   \                     _ZN11CJumpFilterC1Ev: (+1)
   \        0x0   0x4903             LDR.N    R1,??CJumpFilter_0  ;; 0x42c80000
   \        0x2   0x6081             STR      R1,[R0, #+8]
   \        0x4   0x2132             MOVS     R1,#+50
   \        0x6   0x6281             STR      R1,[R0, #+40]
   \        0x8   0xF05F 0x517E      MOVS     R1,#+1065353216
   \        0xC   0x62C1             STR      R1,[R0, #+44]
   \        0xE   0x4770             BX       LR               ;; return
   \                     ??CJumpFilter_0:
   \       0x10   0x42C8'0000        DC32     0x42c80000

   \                                 In section .text, align 4
   \   __code __interwork __softfp CoordinateElement::CoordinateElement()
   \                     _ZN17CoordinateElementC1Ev: (+1)
   \        0x0   0x4903             LDR.N    R1,??CoordinateElement_0  ;; 0x3f4ccccd
   \        0x2   0x6101             STR      R1,[R0, #+16]
   \        0x4   0x4903             LDR.N    R1,??CoordinateElement_0+0x4  ;; 0x461c4000
   \        0x6   0x6141             STR      R1,[R0, #+20]
   \        0x8   0x4903             LDR.N    R1,??CoordinateElement_0+0x8  ;; 0xc61c4000
   \        0xA   0x6181             STR      R1,[R0, #+24]
   \        0xC   0x4770             BX       LR               ;; return
   \        0xE   0xBF00             Nop      
   \                     ??CoordinateElement_0:
   \       0x10   0x3F4C'CCCD        DC32     0x3f4ccccd
   \       0x14   0x461C'4000        DC32     0x461c4000
   \       0x18   0xC61C'4000        DC32     0xc61c4000

   \                                 In section .text, align 2
   \   __code __interwork __softfp Coordinate::Coordinate()
   \                     _ZN10CoordinateC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \        0xA   0xF114 0x001C      ADDS     R0,R4,#+28
   \        0xE   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x12   0xF114 0x0038      ADDS     R0,R4,#+56
   \       0x16   0x.... 0x....      BL       _ZN17CoordinateElementC1Ev
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4
   \   __code __interwork __softfp CGPS::CGPS()
   \                     _ZN4CGPSC1Ev: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0xF246 0x2044      MOVW     R0,#+25156
   \        0xC   0x4420             ADD      R0,R4,R0
   \        0xE   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x12   0xF246 0x207C      MOVW     R0,#+25212
   \       0x16   0x4420             ADD      R0,R4,R0
   \       0x18   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x1C   0xF246 0x26B4      MOVW     R6,#+25268
   \       0x20   0xEB04 0x0006      ADD      R0,R4,R6
   \       0x24   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x28   0xF246 0x25EC      MOVW     R5,#+25324
   \       0x2C   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x30   0x.... 0x....      BL       _ZN11CJumpFilterC1Ev
   \       0x34   0xF246 0x3024      MOVW     R0,#+25380
   \       0x38   0x4420             ADD      R0,R4,R0
   \       0x3A   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \       0x3E   0xF246 0x3078      MOVW     R0,#+25464
   \       0x42   0x4420             ADD      R0,R4,R0
   \       0x44   0x.... 0x....      BL       _ZN10CoordinateC1Ev
   \       0x48   0xED9F 0x8A0C      VLDR.W   S16,??CGPS_0     ;; 0x3e19999a
   \       0x4C   0xEEF3 0x8A04      VMOV.F32 S17,#20.0
   \       0x50   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \       0x54   0x2164             MOVS     R1,#+100
   \       0x56   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x5A   0xEB04 0x0006      ADD      R0,R4,R6
   \       0x5E   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfif
   \       0x62   0xEEF0 0x0A68      VMOV.F32 S1,S17
   \       0x66   0x2164             MOVS     R1,#+100
   \       0x68   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x6C   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x70   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfif
   \       0x74   0x0020             MOVS     R0,R4
   \                     ??CGPS_1: (+1)
   \       0x76   0xECBD 0x8B02      VPOP     {D8}
   \       0x7A   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??CGPS_0:
   \       0x7C   0x3E19'999A        DC32     0x3e19999a
      2          #include "string.h"
      3          

   \                                 In section .bss, align 4
      4          CGPS *GPS;
   \                     GPS:
   \        0x0                      DS8 4

   \                                 In section .text, align 2, keep-with-next
      5          void GPS_Init()
      6          {
   \                     _Z8GPS_Initv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0x.... 0x....      LDR.W    R4,??DataTable4
   \        0xA   0x7820             LDRB     R0,[R4, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD105             BNE.N    ??GPS_Init_0
      7            static CGPS GPS_0;
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \       0x14   0x.... 0x....      BL       _ZN4CGPSC1Ev
   \       0x18   0x2001             MOVS     R0,#+1
   \       0x1A   0x7020             STRB     R0,[R4, #+0]
      8            GPS = &GPS_0;
   \                     ??GPS_Init_0: (+1)
   \       0x1C   0x.... 0x....      LDR.W    R4,??DataTable4_2
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \       0x24   0x6020             STR      R0,[R4, #+0]
      9            GPS->DMA_CHn_Rx = DMA_CH4;
   \       0x26   0x2004             MOVS     R0,#+4
   \       0x28   0x6821             LDR      R1,[R4, #+0]
   \       0x2A   0xF881 0x0020      STRB     R0,[R1, #+32]
     10            
     11          //  GPS->latitude_reference  = 3.0849812550000002E+1; //Èü³¡ÆÁÄ» µ¥µã¾«¶È
     12          //  GPS->longitude_reference = 1.1961452616666665E+2;
     13          //  GPS->altitude0           = 2.3269999999999999E+1;
     14          
     15          //  GPS->latitude_reference  = 3.084906361666666544E+1;
     16          //  GPS->longitude_reference = 1.1961322839999999E+2;
     17          //  GPS->altitude0           = 3.2796999999999997E+1;
     18            GPS->positionFilterX.setParameter(10, 100);
   \       0x2E   0xEEB2 0x8A04      VMOV.F32 S16,#10.0
   \       0x32   0x2164             MOVS     R1,#+100
   \       0x34   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x38   0x6820             LDR      R0,[R4, #+0]
   \       0x3A   0xF246 0x2244      MOVW     R2,#+25156
   \       0x3E   0x4410             ADD      R0,R0,R2
   \       0x40   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     19            GPS->positionFilterY.setParameter(10, 100);
   \       0x44   0x2164             MOVS     R1,#+100
   \       0x46   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \       0x4A   0x6820             LDR      R0,[R4, #+0]
   \       0x4C   0xF246 0x227C      MOVW     R2,#+25212
   \       0x50   0x4410             ADD      R0,R0,R2
   \       0x52   0x.... 0x....      BL       _ZN11CJumpFilter12setParameterEfi
     20            
     21            GPS->positionFilterX.maxValue = 20;
   \       0x56   0xEEB3 0x0A04      VMOV.F32 S0,#20.0
   \       0x5A   0x6820             LDR      R0,[R4, #+0]
   \       0x5C   0xF246 0x2150      MOVW     R1,#+25168
   \       0x60   0x4408             ADD      R0,R0,R1
   \       0x62   0xED80 0x0A00      VSTR     S0,[R0, #0]
     22            GPS->positionFilterX.minValue = -20;
   \       0x66   0xEEFB 0x0A04      VMOV.F32 S1,#-20.0
   \       0x6A   0x6820             LDR      R0,[R4, #+0]
   \       0x6C   0xF246 0x2154      MOVW     R1,#+25172
   \       0x70   0x4408             ADD      R0,R0,R1
   \       0x72   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
     23            
     24            GPS->positionFilterY.maxValue = 20;
   \       0x76   0x6820             LDR      R0,[R4, #+0]
   \       0x78   0xF246 0x2188      MOVW     R1,#+25224
   \       0x7C   0x4408             ADD      R0,R0,R1
   \       0x7E   0xED80 0x0A00      VSTR     S0,[R0, #0]
     25            GPS->positionFilterY.minValue = -20;
   \       0x82   0x6820             LDR      R0,[R4, #+0]
   \       0x84   0xF246 0x218C      MOVW     R1,#+25228
   \       0x88   0x4408             ADD      R0,R0,R1
   \       0x8A   0xEDC0 0x0A00      VSTR     S1,[R0, #0]
     26          }
   \                     ??GPS_Init_1: (+1)
   \       0x8E   0xECBD 0x8B02      VPOP     {D8}
   \       0x92   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 8
   \                     `GPS_Init()::GPS_0`:
   \        0x0                      DS8 25856
     27          
     28          
     29          /*************»ñµÃ¶ÔÓ¦ÐòºÅ¶ººÅºóµÄÊý¾ÝÎ»ÖÃ*****************/

   \                                 In section .text, align 2, keep-with-next
     30          int CGPS::GetComma(int num,char *str)
     31          {
   \                     _ZN4CGPS8GetCommaEiPc: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
     32            int i,j = 0;
   \        0x8   0x2700             MOVS     R7,#+0
     33            int len = strlen(str);
   \        0xA   0x0030             MOVS     R0,R6
   \        0xC   0x.... 0x....      BL       strlen
   \       0x10   0x0002             MOVS     R2,R0
     34            for(i=0;i<len;i++)
   \       0x12   0x2100             MOVS     R1,#+0
   \                     ??GetComma_0: (+1)
   \       0x14   0x4291             CMP      R1,R2
   \       0x16   0xDA0A             BGE.N    ??GetComma_1
     35            {
     36              //for(;str[i]!='$';i++)
     37              //{}
     38              if(str[i]==',')
   \       0x18   0x5C70             LDRB     R0,[R6, R1]
   \       0x1A   0x282C             CMP      R0,#+44
   \       0x1C   0xD100             BNE.N    ??GetComma_2
     39              {
     40                j++;
   \       0x1E   0x1C7F             ADDS     R7,R7,#+1
     41              }
     42              
     43              if(j==num)
   \                     ??GetComma_2: (+1)
   \       0x20   0x42AF             CMP      R7,R5
   \       0x22   0xD102             BNE.N    ??GetComma_3
     44                return i+1;
   \       0x24   0x1C49             ADDS     R1,R1,#+1
   \       0x26   0x0008             MOVS     R0,R1
   \       0x28   0xE002             B.N      ??GetComma_4
     45            }
   \                     ??GetComma_3: (+1)
   \       0x2A   0x1C49             ADDS     R1,R1,#+1
   \       0x2C   0xE7F2             B.N      ??GetComma_0
     46            return 0;
   \                     ??GetComma_1: (+1)
   \       0x2E   0x2000             MOVS     R0,#+0
   \                     ??GetComma_4: (+1)
   \       0x30   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     47          }
     48          
     49          
     50          /******************½âÎöÊý¾Ý***************/

   \                                 In section .text, align 2, keep-with-next
     51          void CGPS::updateUart()
     52          {
   \                     _ZN4CGPS10updateUartEv: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x0004             MOVS     R4,R0
     53            velFilter_x1.checkIsNewData(t);
   \        0x6   0x.... 0x....      LDR.W    R11,??DataTable4_3
   \        0xA   0xF8DB 0x1000      LDR      R1,[R11, #+0]
   \        0xE   0xF246 0x20B4      MOVW     R0,#+25268
   \       0x12   0x4420             ADD      R0,R4,R0
   \       0x14   0x.... 0x....      BL       _ZN11CJumpFilter14checkIsNewDataEi
     54            velFilter_y1.checkIsNewData(t);
   \       0x18   0xF8DB 0x1000      LDR      R1,[R11, #+0]
   \       0x1C   0xF246 0x20EC      MOVW     R0,#+25324
   \       0x20   0x4420             ADD      R0,R4,R0
   \       0x22   0x.... 0x....      BL       _ZN11CJumpFilter14checkIsNewDataEi
     55            
     56            
     57            bool newPackage = false;
   \       0x26   0x2500             MOVS     R5,#+0
     58            
     59            int i = 0, i0 = 0;
   \       0x28   0xF05F 0x0A00      MOVS     R10,#+0
   \       0x2C   0x2600             MOVS     R6,#+0
     60            int address0 = (DMA0->TCD[DMA_CHn_Rx].DADDR) - (uint32)(&GPS_BUF[0]);
   \       0x2E   0x.... 0x....      LDR.W    R7,??DataTable4_4  ;; 0x40009000
   \       0x32   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \       0x36   0x0140             LSLS     R0,R0,#+5
   \       0x38   0x4438             ADD      R0,R7,R0
   \       0x3A   0x6900             LDR      R0,[R0, #+16]
   \       0x3C   0xF114 0x0821      ADDS     R8,R4,#+33
   \       0x40   0xEBB0 0x0808      SUBS     R8,R0,R8
     61            
     62            int moveLength = 0;
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0x9000             STR      R0,[SP, #+0]
     63            
     64            bool loopFlag = false;
   \       0x48   0xF05F 0x0900      MOVS     R9,#+0
     65            //byteInterval = t - byte_lastTime;
     66            if(byte_lastAddress != address0)
   \       0x4C   0x68A0             LDR      R0,[R4, #+8]
   \       0x4E   0x4540             CMP      R0,R8
   \       0x50   0xD004             BEQ.N    ??updateUart_0
     67            {
     68              byte_lastTime = t;
   \       0x52   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \       0x56   0x6060             STR      R0,[R4, #+4]
     69              byte_lastAddress = address0;
   \       0x58   0xF8C4 0x8008      STR      R8,[R4, #+8]
     70            }
     71            for(; i < address0; i++)
   \                     ??updateUart_0: (+1)
   \       0x5C   0x45C2             CMP      R10,R8
   \       0x5E   0xDA3F             BGE.N    ??updateUart_1
     72            {
     73              for(; GPS_BUF[i] != '\n'; i++)
   \                     ??updateUart_2: (+1)
   \       0x60   0xEB04 0x000A      ADD      R0,R4,R10
   \       0x64   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \       0x68   0x280A             CMP      R0,#+10
   \       0x6A   0xD021             BEQ.N    ??updateUart_3
     74              {
     75                if((GPS_BUF[i] == '$')&&(GPS_BUF[i+1] == 'G')&&(GPS_BUF[i+2] == 'N')&&(GPS_BUF[i+3] == 'G'))
   \       0x6C   0xEB04 0x000A      ADD      R0,R4,R10
   \       0x70   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \       0x74   0x2824             CMP      R0,#+36
   \       0x76   0xD113             BNE.N    ??updateUart_4
   \       0x78   0xEB04 0x000A      ADD      R0,R4,R10
   \       0x7C   0xF890 0x0022      LDRB     R0,[R0, #+34]
   \       0x80   0x2847             CMP      R0,#+71
   \       0x82   0xD10D             BNE.N    ??updateUart_4
   \       0x84   0xEB04 0x000A      ADD      R0,R4,R10
   \       0x88   0xF890 0x0023      LDRB     R0,[R0, #+35]
   \       0x8C   0x284E             CMP      R0,#+78
   \       0x8E   0xD107             BNE.N    ??updateUart_4
   \       0x90   0xEB04 0x000A      ADD      R0,R4,R10
   \       0x94   0xF890 0x0024      LDRB     R0,[R0, #+36]
   \       0x98   0x2847             CMP      R0,#+71
   \       0x9A   0xD101             BNE.N    ??updateUart_4
     76                {
     77                  start = i;
   \       0x9C   0xF8C4 0xA00C      STR      R10,[R4, #+12]
     78                }
     79                
     80                
     81                if(i >= address0)
   \                     ??updateUart_4: (+1)
   \       0xA0   0x45C2             CMP      R10,R8
   \       0xA2   0xDB02             BLT.N    ??updateUart_5
     82                {
     83                  
     84                  loopFlag = true;
   \       0xA4   0x2001             MOVS     R0,#+1
   \       0xA6   0x4681             MOV      R9,R0
     85                  break;
   \       0xA8   0xE002             B.N      ??updateUart_3
     86                }
     87              }
   \                     ??updateUart_5: (+1)
   \       0xAA   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \       0xAE   0xE7D7             B.N      ??updateUart_2
     88              
     89              if(loopFlag)
   \                     ??updateUart_3: (+1)
   \       0xB0   0x4648             MOV      R0,R9
   \       0xB2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD113             BNE.N    ??updateUart_1
     90              {
     91                break;
     92              }
     93              
     94              //    char checkSum = 0; //×¢ÒâÃ¿¸ö°üµÄcheckSum¶¼ÒªÇåÁã
     95              //    for(int k = i - (packageLength - 1); k < i - 1; k++)
     96              //    {
     97              //      checkSum += uartData[k];
     98              //    }
     99              //    if(checkSum != uartData[i-1])
    100              //    {
    101              //      continue;
    102              //    }
    103              //byte_lastTime = t;
    104              i0 = i + 1; 
   \                     ??updateUart_6: (+1)
   \       0xB8   0xF11A 0x0001      ADDS     R0,R10,#+1
   \       0xBC   0x0006             MOVS     R6,R0
    105              end = i;
   \       0xBE   0xF8C4 0xA010      STR      R10,[R4, #+16]
    106              
    107              // unpack(start, i);
    108              if(end-start > 1)unpack(start, i);
   \       0xC2   0x6921             LDR      R1,[R4, #+16]
   \       0xC4   0x68E0             LDR      R0,[R4, #+12]
   \       0xC6   0x1A09             SUBS     R1,R1,R0
   \       0xC8   0x2902             CMP      R1,#+2
   \       0xCA   0xDB04             BLT.N    ??updateUart_7
   \       0xCC   0x4652             MOV      R2,R10
   \       0xCE   0x68E1             LDR      R1,[R4, #+12]
   \       0xD0   0x0020             MOVS     R0,R4
   \       0xD2   0x.... 0x....      BL       _ZN4CGPS6unpackEii
    109              
    110              byte_lastAddress = address0;
   \                     ??updateUart_7: (+1)
   \       0xD6   0xF8C4 0x8008      STR      R8,[R4, #+8]
    111            }
   \       0xDA   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \       0xDE   0xE7BD             B.N      ??updateUart_0
    112            moveLength = (DMA0->TCD[DMA_CHn_Rx].DADDR - (uint32)&GPS_BUF[0]) - i0;
   \                     ??updateUart_1: (+1)
   \       0xE0   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \       0xE4   0x0140             LSLS     R0,R0,#+5
   \       0xE6   0x4438             ADD      R0,R7,R0
   \       0xE8   0x6901             LDR      R1,[R0, #+16]
   \       0xEA   0xF114 0x0021      ADDS     R0,R4,#+33
   \       0xEE   0x1A08             SUBS     R0,R1,R0
   \       0xF0   0x1B80             SUBS     R0,R0,R6
    113            if(moveLength < 0) moveLength = 0;
   \       0xF2   0x2800             CMP      R0,#+0
   \       0xF4   0xD501             BPL.N    ??updateUart_8
   \       0xF6   0x2100             MOVS     R1,#+0
   \       0xF8   0x0008             MOVS     R0,R1
    114            
    115            DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&GPS_BUF[0] + moveLength);
   \                     ??updateUart_8: (+1)
   \       0xFA   0xF894 0x1020      LDRB     R1,[R4, #+32]
   \       0xFE   0x0149             LSLS     R1,R1,#+5
   \      0x100   0x4439             ADD      R1,R7,R1
   \      0x102   0xF114 0x0221      ADDS     R2,R4,#+33
   \      0x106   0x1882             ADDS     R2,R0,R2
   \      0x108   0x610A             STR      R2,[R1, #+16]
    116            for(i = 0; i < moveLength; i++)
   \      0x10A   0x2100             MOVS     R1,#+0
   \                     ??updateUart_9: (+1)
   \      0x10C   0x4281             CMP      R1,R0
   \      0x10E   0xDA09             BGE.N    ??updateUart_10
    117            {
    118              GPS_BUF[i] = GPS_BUF[i0 + i];
   \      0x110   0x198A             ADDS     R2,R1,R6
   \      0x112   0x4422             ADD      R2,R4,R2
   \      0x114   0xF892 0x2021      LDRB     R2,[R2, #+33]
   \      0x118   0xEB04 0x0301      ADD      R3,R4,R1
   \      0x11C   0xF883 0x2021      STRB     R2,[R3, #+33]
    119            }
   \      0x120   0x1C49             ADDS     R1,R1,#+1
   \      0x122   0xE7F3             B.N      ??updateUart_9
    120            // memset(GPS_BUF + moveLength, 0, 500 * sizeof(char));
    121            if(address0 > 500)
   \                     ??updateUart_10: (+1)
   \      0x124   0xF240 0x12F5      MOVW     R2,#+501
   \      0x128   0x4590             CMP      R8,R2
   \      0x12A   0xDB06             BLT.N    ??updateUart_11
    122            {
    123              DMA_LoadDstAddr(DMA_CHn_Rx, (uint32)&GPS_BUF[0]);
   \      0x12C   0xF894 0x2020      LDRB     R2,[R4, #+32]
   \      0x130   0x0152             LSLS     R2,R2,#+5
   \      0x132   0x443A             ADD      R2,R7,R2
   \      0x134   0xF114 0x0321      ADDS     R3,R4,#+33
   \      0x138   0x6113             STR      R3,[R2, #+16]
    124            }
    125            
    126            
    127            
    128          }
   \                     ??updateUart_11: (+1)
   \                     ??updateUart_12: (+1)
   \      0x13A   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    129          //½«»ñÈ¡ÎÄ±¾ÐÅÏ¢×ª»»ÎªdoubleÐÍ
    130          

   \                                 In section .text, align 2, keep-with-next
    131          double CGPS::get_double_number(char *s)
    132          {
   \                     _ZN4CGPS17get_double_numberEPc: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB0A0             SUB      SP,SP,#+128
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
    133            char buf[128];
    134            int i;
    135            double rev;
    136            i=GetComma(1,s);
   \        0x8   0x002A             MOVS     R2,R5
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \       0x12   0x0006             MOVS     R6,R0
    137            strncpy(buf,s,i);
   \       0x14   0x0032             MOVS     R2,R6
   \       0x16   0x0029             MOVS     R1,R5
   \       0x18   0x4668             MOV      R0,SP
   \       0x1A   0x.... 0x....      BL       strncpy
    138            buf[i]=0;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0x4669             MOV      R1,SP
   \       0x22   0x5588             STRB     R0,[R1, R6]
    139            rev=atof(buf);
   \       0x24   0x4668             MOV      R0,SP
   \       0x26   0x.... 0x....      BL       atof
    140            
    141            return rev;
   \       0x2A   0xB020             ADD      SP,SP,#+128
   \       0x2C   0xBD70             POP      {R4-R6,PC}       ;; return
    142          }
    143          

   \                                 In section .text, align 2, keep-with-next
    144          double CGPS::get_locate(double temp)
    145          {
   \                     _ZN4CGPS10get_locateEd: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xED2D 0x8B04      VPUSH    {D8-D9}
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \        0xC   0xEEF0 0x8A60      VMOV.F32 S17,S1
    146            int m;
    147            double  n;
    148            m=(int)temp/100;
   \       0x10   0xEC51 0x0B18      VMOV     R0,R1,D8
   \       0x14   0x.... 0x....      BL       __aeabi_d2iz
   \       0x18   0x2164             MOVS     R1,#+100
   \       0x1A   0xFB90 0xF5F1      SDIV     R5,R0,R1
    149            n=(temp-m*100)/60;
   \       0x1E   0x2064             MOVS     R0,#+100
   \       0x20   0xFB00 0xF005      MUL      R0,R0,R5
   \       0x24   0x.... 0x....      BL       __aeabi_i2d
   \       0x28   0x0002             MOVS     R2,R0
   \       0x2A   0x000B             MOVS     R3,R1
   \       0x2C   0xEC51 0x0B18      VMOV     R0,R1,D8
   \       0x30   0x.... 0x....      BL       __aeabi_dsub
   \       0x34   0x2200             MOVS     R2,#+0
   \       0x36   0x....             LDR.N    R3,??DataTable4_5  ;; 0x404e0000
   \       0x38   0x.... 0x....      BL       __aeabi_ddiv
   \       0x3C   0xEC41 0x0B19      VMOV     D9,R0,R1
    150            n=n+m;
   \       0x40   0x0028             MOVS     R0,R5
   \       0x42   0x.... 0x....      BL       __aeabi_i2d
   \       0x46   0xEC53 0x2B19      VMOV     R2,R3,D9
   \       0x4A   0x.... 0x....      BL       __aeabi_dadd
   \       0x4E   0xEC41 0x0B10      VMOV     D0,R0,R1
    151            return n;
   \       0x52   0xECBD 0x8B04      VPOP     {D8-D9}
   \       0x56   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    152            
    153          }
    154          
    155          

   \                                 In section .text, align 2, keep-with-next
    156          void CGPS::unpack(int start, int end)
    157          {
   \                     _ZN4CGPS6unpackEii: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xED2D 0x8B02      VPUSH    {D8}
   \        0x8   0xB082             SUB      SP,SP,#+8
   \        0xA   0x0004             MOVS     R4,R0
   \        0xC   0x000D             MOVS     R5,R1
   \        0xE   0x4693             MOV      R11,R2
    158            //int tmp;
    159            
    160            c = GPS_BUF[start+5];
   \       0x10   0xF246 0x2028      MOVW     R0,#+25128
   \       0x14   0xEB04 0x0105      ADD      R1,R4,R5
   \       0x18   0xF891 0x1026      LDRB     R1,[R1, #+38]
   \       0x1C   0x5421             STRB     R1,[R4, R0]
    161            if(c=='A')
   \       0x1E   0x5C20             LDRB     R0,[R4, R0]
   \       0x20   0x2841             CMP      R0,#+65
   \       0x22   0xF040 0x8188      BNE.W    ??unpack_0
    162            {
    163              //"GNGGA"
    164              D.hour   =(GPS_BUF[start+ 7]-'0')*10+(GPS_BUF[start+ 8]-'0');
   \       0x26   0x210A             MOVS     R1,#+10
   \       0x28   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x2C   0xF890 0x2028      LDRB     R2,[R0, #+40]
   \       0x30   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x34   0xF890 0x0029      LDRB     R0,[R0, #+41]
   \       0x38   0xFB01 0x0202      MLA      R2,R1,R2,R0
   \       0x3C   0xF5B2 0x7204      SUBS     R2,R2,#+528
   \       0x40   0xF246 0x10D0      MOVW     R0,#+25040
   \       0x44   0x5022             STR      R2,[R4, R0]
    165              D.minute =(GPS_BUF[start+ 9]-'0')*10+(GPS_BUF[start+10]-'0');
   \       0x46   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x4A   0xF890 0x202A      LDRB     R2,[R0, #+42]
   \       0x4E   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x52   0xF890 0x002B      LDRB     R0,[R0, #+43]
   \       0x56   0xFB01 0x0202      MLA      R2,R1,R2,R0
   \       0x5A   0xF5B2 0x7204      SUBS     R2,R2,#+528
   \       0x5E   0xF246 0x10D4      MOVW     R0,#+25044
   \       0x62   0x5022             STR      R2,[R4, R0]
    166              D.second =(GPS_BUF[start+11]-'0')*10+(GPS_BUF[start+12]-'0');
   \       0x64   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x68   0xF890 0x202C      LDRB     R2,[R0, #+44]
   \       0x6C   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x70   0xF890 0x002D      LDRB     R0,[R0, #+45]
   \       0x74   0xFB01 0x0102      MLA      R1,R1,R2,R0
   \       0x78   0xF5B1 0x7104      SUBS     R1,R1,#+528
   \       0x7C   0xF246 0x10D8      MOVW     R0,#+25048
   \       0x80   0x5021             STR      R1,[R4, R0]
    167              //tmp = GetComma(9,GPS_BUF);
    168              //D.day    =(GPS_BUF[tmp+0]-'0')*10+(GPS_BUF[tmp+1]-'0');
    169              //D.month  =(GPS_BUF[tmp+2]-'0')*10+(GPS_BUF[tmp+3]-'0');
    170              //D.year   =(GPS_BUF[tmp+4]-'0')*10+(GPS_BUF[tmp+5]-'0')+2000;
    171              
    172           //   status   = GPS_BUF[GetComma(6, GPS_BUF)];
    173              status   = '1';
   \       0x82   0xF246 0x2029      MOVW     R0,#+25129
   \       0x86   0x2131             MOVS     R1,#+49
   \       0x88   0x5421             STRB     R1,[R4, R0]
    174              if(status == '1' || status == '4' || status == '5')
   \       0x8A   0x5C21             LDRB     R1,[R4, R0]
   \       0x8C   0x2931             CMP      R1,#+49
   \       0x8E   0xD005             BEQ.N    ??unpack_1
   \       0x90   0x5C21             LDRB     R1,[R4, R0]
   \       0x92   0x2934             CMP      R1,#+52
   \       0x94   0xD002             BEQ.N    ??unpack_1
   \       0x96   0x5C20             LDRB     R0,[R4, R0]
   \       0x98   0x2835             CMP      R0,#+53
   \       0x9A   0xD162             BNE.N    ??unpack_2
    175              {
    176                latitude = get_locate(get_double_number(&GPS_BUF[GetComma(2, GPS_BUF)]));
   \                     ??unpack_1: (+1)
   \       0x9C   0xF114 0x0221      ADDS     R2,R4,#+33
   \       0xA0   0x2102             MOVS     R1,#+2
   \       0xA2   0x0020             MOVS     R0,R4
   \       0xA4   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \       0xA8   0x4420             ADD      R0,R4,R0
   \       0xAA   0xF110 0x0121      ADDS     R1,R0,#+33
   \       0xAE   0x0020             MOVS     R0,R4
   \       0xB0   0x.... 0x....      BL       _ZN4CGPS17get_double_numberEPc
   \       0xB4   0x0020             MOVS     R0,R4
   \       0xB6   0x.... 0x....      BL       _ZN4CGPS10get_locateEd
   \       0xBA   0xF246 0x10E8      MOVW     R0,#+25064
   \       0xBE   0x4420             ADD      R0,R4,R0
   \       0xC0   0xED80 0x0B00      VSTR     D0,[R0, #0]
    177                NS       = GPS_BUF[GetComma(3, GPS_BUF)];
   \       0xC4   0xF114 0x0221      ADDS     R2,R4,#+33
   \       0xC8   0x2103             MOVS     R1,#+3
   \       0xCA   0x0020             MOVS     R0,R4
   \       0xCC   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \       0xD0   0x4420             ADD      R0,R4,R0
   \       0xD2   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \       0xD6   0xF246 0x212A      MOVW     R1,#+25130
   \       0xDA   0x5460             STRB     R0,[R4, R1]
    178                longitude= get_locate(get_double_number(&GPS_BUF[GetComma(4, GPS_BUF)]));
   \       0xDC   0xF114 0x0221      ADDS     R2,R4,#+33
   \       0xE0   0x2104             MOVS     R1,#+4
   \       0xE2   0x0020             MOVS     R0,R4
   \       0xE4   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \       0xE8   0x4420             ADD      R0,R4,R0
   \       0xEA   0xF110 0x0121      ADDS     R1,R0,#+33
   \       0xEE   0x0020             MOVS     R0,R4
   \       0xF0   0x.... 0x....      BL       _ZN4CGPS17get_double_numberEPc
   \       0xF4   0x0020             MOVS     R0,R4
   \       0xF6   0x.... 0x....      BL       _ZN4CGPS10get_locateEd
   \       0xFA   0xF246 0x10F0      MOVW     R0,#+25072
   \       0xFE   0x4420             ADD      R0,R4,R0
   \      0x100   0xED80 0x0B00      VSTR     D0,[R0, #0]
    179                EW       = GPS_BUF[GetComma(5, GPS_BUF)];
   \      0x104   0xF114 0x0221      ADDS     R2,R4,#+33
   \      0x108   0x2105             MOVS     R1,#+5
   \      0x10A   0x0020             MOVS     R0,R4
   \      0x10C   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \      0x110   0x4420             ADD      R0,R4,R0
   \      0x112   0xF890 0x0021      LDRB     R0,[R0, #+33]
   \      0x116   0xF246 0x212B      MOVW     R1,#+25131
   \      0x11A   0x5460             STRB     R0,[R4, R1]
    180                satqua   = get_double_number(&GPS_BUF[GetComma(7, GPS_BUF)]);
   \      0x11C   0xF114 0x0221      ADDS     R2,R4,#+33
   \      0x120   0x2107             MOVS     R1,#+7
   \      0x122   0x0020             MOVS     R0,R4
   \      0x124   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \      0x128   0x4420             ADD      R0,R4,R0
   \      0x12A   0xF110 0x0121      ADDS     R1,R0,#+33
   \      0x12E   0x0020             MOVS     R0,R4
   \      0x130   0x.... 0x....      BL       _ZN4CGPS17get_double_numberEPc
   \      0x134   0xF246 0x2030      MOVW     R0,#+25136
   \      0x138   0x4420             ADD      R0,R4,R0
   \      0x13A   0xED80 0x0B00      VSTR     D0,[R0, #0]
    181                altitude = get_double_number(&GPS_BUF[GetComma(9, GPS_BUF)]);
   \      0x13E   0xF114 0x0221      ADDS     R2,R4,#+33
   \      0x142   0x2109             MOVS     R1,#+9
   \      0x144   0x0020             MOVS     R0,R4
   \      0x146   0x.... 0x....      BL       _ZN4CGPS8GetCommaEiPc
   \      0x14A   0x4420             ADD      R0,R4,R0
   \      0x14C   0xF110 0x0121      ADDS     R1,R0,#+33
   \      0x150   0x0020             MOVS     R0,R4
   \      0x152   0x.... 0x....      BL       _ZN4CGPS17get_double_numberEPc
   \      0x156   0xF246 0x10F8      MOVW     R0,#+25080
   \      0x15A   0x4420             ADD      R0,R4,R0
   \      0x15C   0xED80 0x0B00      VSTR     D0,[R0, #0]
   \      0x160   0xE001             B.N      ??unpack_3
    182              }
    183              else
    184              {
    185                valid = false;
   \                     ??unpack_2: (+1)
   \      0x162   0x2000             MOVS     R0,#+0
   \      0x164   0x7520             STRB     R0,[R4, #+20]
    186              }
    187              
    188              //UTC2BTC(&GPS->D);//ÊÀ½çÊ±¼ä 
    189              GPS->dy = (GPS->latitude - GPS->latitude_reference) * 111133;
   \                     ??unpack_3: (+1)
   \      0x166   0xF246 0x2A20      MOVW     R10,#+25120
   \      0x16A   0x....             LDR.N    R6,??DataTable4_2
   \      0x16C   0x6830             LDR      R0,[R6, #+0]
   \      0x16E   0xF246 0x11E8      MOVW     R1,#+25064
   \      0x172   0x4408             ADD      R0,R0,R1
   \      0x174   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \      0x178   0x6832             LDR      R2,[R6, #+0]
   \      0x17A   0xF246 0x2308      MOVW     R3,#+25096
   \      0x17E   0x441A             ADD      R2,R2,R3
   \      0x180   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \      0x184   0x.... 0x....      BL       __aeabi_dsub
   \      0x188   0x2200             MOVS     R2,#+0
   \      0x18A   0x....             LDR.N    R3,??DataTable4_6  ;; 0x40fb21d0
   \      0x18C   0x.... 0x....      BL       __aeabi_dmul
   \      0x190   0x6832             LDR      R2,[R6, #+0]
   \      0x192   0x4452             ADD      R2,R2,R10
   \      0x194   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
    190              GPS->dx = (GPS->longitude - GPS->longitude_reference) * 111319 * arm_cos_f32((GPS->longitude - GPS->longitude_reference) / 57.2957795);
   \      0x198   0xF246 0x2810      MOVW     R8,#+25104
   \      0x19C   0xF246 0x17F0      MOVW     R7,#+25072
   \      0x1A0   0x6830             LDR      R0,[R6, #+0]
   \      0x1A2   0x4438             ADD      R0,R0,R7
   \      0x1A4   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \      0x1A8   0x6832             LDR      R2,[R6, #+0]
   \      0x1AA   0x4442             ADD      R2,R2,R8
   \      0x1AC   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \      0x1B0   0x.... 0x....      BL       __aeabi_dsub
   \      0x1B4   0x....             LDR.N    R2,??DataTable4_7  ;; 0x1a47a9e3
   \      0x1B6   0x....             LDR.N    R3,??DataTable4_8  ;; 0x404ca5dc
   \      0x1B8   0x.... 0x....      BL       __aeabi_ddiv
   \      0x1BC   0x.... 0x....      BL       __aeabi_d2f
   \      0x1C0   0xEE00 0x0A10      VMOV     S0,R0
   \      0x1C4   0x.... 0x....      BL       arm_cos_f32
   \      0x1C8   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \      0x1CC   0xF246 0x2918      MOVW     R9,#+25112
   \      0x1D0   0x6830             LDR      R0,[R6, #+0]
   \      0x1D2   0x4438             ADD      R0,R0,R7
   \      0x1D4   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \      0x1D8   0x6832             LDR      R2,[R6, #+0]
   \      0x1DA   0x4442             ADD      R2,R2,R8
   \      0x1DC   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \      0x1E0   0x.... 0x....      BL       __aeabi_dsub
   \      0x1E4   0x2200             MOVS     R2,#+0
   \      0x1E6   0x....             LDR.N    R3,??DataTable4_9  ;; 0x40fb2d70
   \      0x1E8   0x.... 0x....      BL       __aeabi_dmul
   \      0x1EC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \      0x1F0   0xEE18 0x0A10      VMOV     R0,S16
   \      0x1F4   0x.... 0x....      BL       __aeabi_f2d
   \      0x1F8   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \      0x1FC   0x.... 0x....      BL       __aeabi_dmul
   \      0x200   0x6832             LDR      R2,[R6, #+0]
   \      0x202   0x444A             ADD      R2,R2,R9
   \      0x204   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
    191              
    192              
    193              dx_local = positionFilterX.newData3(dy * arm_cos_f32(angle / 57.2957795) - dx * arm_sin_f32(angle / 57.2957795), t);
   \      0x208   0xF246 0x2640      MOVW     R6,#+25152
   \      0x20C   0x59A0             LDR      R0,[R4, R6]
   \      0x20E   0x.... 0x....      BL       __aeabi_f2d
   \      0x212   0x....             LDR.N    R2,??DataTable4_7  ;; 0x1a47a9e3
   \      0x214   0x....             LDR.N    R3,??DataTable4_8  ;; 0x404ca5dc
   \      0x216   0x.... 0x....      BL       __aeabi_ddiv
   \      0x21A   0x.... 0x....      BL       __aeabi_d2f
   \      0x21E   0xEE00 0x0A10      VMOV     S0,R0
   \      0x222   0x.... 0x....      BL       arm_cos_f32
   \      0x226   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \      0x22A   0x59A0             LDR      R0,[R4, R6]
   \      0x22C   0x.... 0x....      BL       __aeabi_f2d
   \      0x230   0x....             LDR.N    R2,??DataTable4_7  ;; 0x1a47a9e3
   \      0x232   0x....             LDR.N    R3,??DataTable4_8  ;; 0x404ca5dc
   \      0x234   0x.... 0x....      BL       __aeabi_ddiv
   \      0x238   0x.... 0x....      BL       __aeabi_d2f
   \      0x23C   0xEE00 0x0A10      VMOV     S0,R0
   \      0x240   0x.... 0x....      BL       arm_sin_f32
   \      0x244   0xEEF0 0x8A40      VMOV.F32 S17,S0
   \      0x248   0x....             LDR.N    R7,??DataTable4_3
   \      0x24A   0x6839             LDR      R1,[R7, #+0]
   \      0x24C   0x4688             MOV      R8,R1
   \      0x24E   0xEE18 0x0A10      VMOV     R0,S16
   \      0x252   0x.... 0x....      BL       __aeabi_f2d
   \      0x256   0xEB04 0x020A      ADD      R2,R4,R10
   \      0x25A   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \      0x25E   0x.... 0x....      BL       __aeabi_dmul
   \      0x262   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \      0x266   0xEE18 0x0A90      VMOV     R0,S17
   \      0x26A   0x.... 0x....      BL       __aeabi_f2d
   \      0x26E   0xEB04 0x0209      ADD      R2,R4,R9
   \      0x272   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \      0x276   0x.... 0x....      BL       __aeabi_dmul
   \      0x27A   0x0002             MOVS     R2,R0
   \      0x27C   0x000B             MOVS     R3,R1
   \      0x27E   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \      0x282   0x.... 0x....      BL       __aeabi_dsub
   \      0x286   0x.... 0x....      BL       __aeabi_d2f
   \      0x28A   0xEE00 0x0A10      VMOV     S0,R0
   \      0x28E   0x4641             MOV      R1,R8
   \      0x290   0xF246 0x2044      MOVW     R0,#+25156
   \      0x294   0x4420             ADD      R0,R4,R0
   \      0x296   0x.... 0x....      BL       _ZN11CJumpFilter8newData3Efi
   \      0x29A   0xF246 0x2038      MOVW     R0,#+25144
   \      0x29E   0x4420             ADD      R0,R4,R0
   \      0x2A0   0xED80 0x0A00      VSTR     S0,[R0, #0]
    194              dy_local = positionFilterY.newData3(dy * arm_sin_f32(angle / 57.2957795) + dx * arm_cos_f32(angle / 57.2957795), t);
   \      0x2A4   0x59A0             LDR      R0,[R4, R6]
   \      0x2A6   0x.... 0x....      BL       __aeabi_f2d
   \      0x2AA   0x....             LDR.N    R2,??DataTable4_7  ;; 0x1a47a9e3
   \      0x2AC   0x....             LDR.N    R3,??DataTable4_8  ;; 0x404ca5dc
   \      0x2AE   0x.... 0x....      BL       __aeabi_ddiv
   \      0x2B2   0x.... 0x....      BL       __aeabi_d2f
   \      0x2B6   0xEE00 0x0A10      VMOV     S0,R0
   \      0x2BA   0x.... 0x....      BL       arm_sin_f32
   \      0x2BE   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \      0x2C2   0x59A0             LDR      R0,[R4, R6]
   \      0x2C4   0x.... 0x....      BL       __aeabi_f2d
   \      0x2C8   0x....             LDR.N    R2,??DataTable4_7  ;; 0x1a47a9e3
   \      0x2CA   0x....             LDR.N    R3,??DataTable4_8  ;; 0x404ca5dc
   \      0x2CC   0x.... 0x....      BL       __aeabi_ddiv
   \      0x2D0   0x.... 0x....      BL       __aeabi_d2f
   \      0x2D4   0xEE00 0x0A10      VMOV     S0,R0
   \      0x2D8   0x.... 0x....      BL       arm_cos_f32
   \      0x2DC   0xEEF0 0x8A40      VMOV.F32 S17,S0
   \      0x2E0   0x6839             LDR      R1,[R7, #+0]
   \      0x2E2   0x4688             MOV      R8,R1
   \      0x2E4   0xEE18 0x0A10      VMOV     R0,S16
   \      0x2E8   0x.... 0x....      BL       __aeabi_f2d
   \      0x2EC   0xEB04 0x020A      ADD      R2,R4,R10
   \      0x2F0   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \      0x2F4   0x.... 0x....      BL       __aeabi_dmul
   \      0x2F8   0x0006             MOVS     R6,R0
   \      0x2FA   0x000F             MOVS     R7,R1
   \      0x2FC   0xEE18 0x0A90      VMOV     R0,S17
   \      0x300   0x.... 0x....      BL       __aeabi_f2d
   \      0x304   0xEB04 0x0209      ADD      R2,R4,R9
   \      0x308   0xE9D2 0x2300      LDRD     R2,R3,[R2, #+0]
   \      0x30C   0x.... 0x....      BL       __aeabi_dmul
   \      0x310   0x0032             MOVS     R2,R6
   \      0x312   0x003B             MOVS     R3,R7
   \      0x314   0x.... 0x....      BL       __aeabi_dadd
   \      0x318   0x.... 0x....      BL       __aeabi_d2f
   \      0x31C   0xEE00 0x0A10      VMOV     S0,R0
   \      0x320   0x4641             MOV      R1,R8
   \      0x322   0xF246 0x207C      MOVW     R0,#+25212
   \      0x326   0x4420             ADD      R0,R4,R0
   \      0x328   0x.... 0x....      BL       _ZN11CJumpFilter8newData3Efi
   \      0x32C   0xF246 0x203C      MOVW     R0,#+25148
   \      0x330   0x4420             ADD      R0,R4,R0
   \      0x332   0xED80 0x0A00      VSTR     S0,[R0, #0]
    195            }
    196          }
   \                     ??unpack_0: (+1)
   \                     ??unpack_4: (+1)
   \      0x336   0xB002             ADD      SP,SP,#+8
   \      0x338   0xECBD 0x8B02      VPOP     {D8}
   \      0x33C   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    197          

   \                                 In section .text, align 2, keep-with-next
    198          void CGPS::TX_::startDMA_Transmit()
    199          {
   \                     _ZN4CGPS3TX_17startDMA_TransmitEv: (+1)
   \        0x0   0xB410             PUSH     {R4}
    200            //µ÷ÕûÔ´µØÖ·
    201            DMA0->TCD[DMA_CH5].SADDR = DMA_SADDR_SADDR(GPS->TX.data);
   \        0x2   0x....             LDR.N    R1,??DataTable4_2
   \        0x4   0x680A             LDR      R2,[R1, #+0]
   \        0x6   0xF246 0x33CC      MOVW     R3,#+25548
   \        0xA   0x441A             ADD      R2,R2,R3
   \        0xC   0x....             LDR.N    R3,??DataTable4_10  ;; 0x400090a0
   \        0xE   0x601A             STR      R2,[R3, #+0]
    202            
    203            //ÉèÖÃÖ÷Ñ­»·¼ÆÊýÆ÷ current major loop count
    204            DMA0->TCD[DMA_CH5].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(GPS->TX.index);
   \       0x10   0xF246 0x42F8      MOVW     R2,#+25848
   \       0x14   0x680B             LDR      R3,[R1, #+0]
   \       0x16   0x589B             LDR      R3,[R3, R2]
   \       0x18   0x045B             LSLS     R3,R3,#+17       ;; ZeroExtS R3,R3,#+17,#+17
   \       0x1A   0x0C5B             LSRS     R3,R3,#+17
   \       0x1C   0x....             LDR.N    R4,??DataTable4_11  ;; 0x400090b6
   \       0x1E   0x8023             STRH     R3,[R4, #+0]
    205            
    206            //ÆðÊ¼Ñ­»·¼ÆÊýÆ÷£¬µ±Ö÷Ñ­»·¼ÆÊýÆ÷ÎªÁãµÄÊ±ºò£¬½«×°ÔØÆðÊ¼Ñ­»·¼ÆÊýÆ÷µÄÖµ
    207            DMA0->TCD[DMA_CH5].BITER_ELINKNO = DMA_CITER_ELINKNO_CITER(GPS->TX.index);
   \       0x20   0x6809             LDR      R1,[R1, #+0]
   \       0x22   0x5889             LDR      R1,[R1, R2]
   \       0x24   0x0449             LSLS     R1,R1,#+17       ;; ZeroExtS R1,R1,#+17,#+17
   \       0x26   0x0C49             LSRS     R1,R1,#+17
   \       0x28   0x....             LDR.N    R2,??DataTable4_12  ;; 0x400090be
   \       0x2A   0x8011             STRH     R1,[R2, #+0]
    208            
    209            DMA_EnableReq(DMA_CH5);
   \       0x2C   0x....             LDR.N    R1,??DataTable4_13  ;; 0x4000800c
   \       0x2E   0x680A             LDR      R2,[R1, #+0]
   \       0x30   0xF052 0x0220      ORRS     R2,R2,#0x20
   \       0x34   0x600A             STR      R2,[R1, #+0]
    210            
    211          }
   \       0x36   0xBC10             POP      {R4}
   \       0x38   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x....'....        DC32     `GPS_Init()::static guard for GPS_0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x....'....        DC32     `GPS_Init()::GPS_0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x....'....        DC32     GPS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x4000'9000        DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x404E'0000        DC32     0x404e0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x40FB'21D0        DC32     0x40fb21d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x1A47'A9E3        DC32     0x1a47a9e3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0x404C'A5DC        DC32     0x404ca5dc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \        0x0   0x40FB'2D70        DC32     0x40fb2d70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \        0x0   0x4000'90A0        DC32     0x400090a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \        0x0   0x4000'90B6        DC32     0x400090b6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \        0x0   0x4000'90BE        DC32     0x400090be

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \        0x0   0x4000'800C        DC32     0x4000800c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   CGPS::CGPS()
        24   -> CJumpFilter::CJumpFilter()
        24   -> CJumpFilter::setParameter(float, int, float)
        24   -> Coordinate::Coordinate()
      24   CGPS::GetComma(int, char *)
        24   -> strlen
       4   CGPS::TX_::startDMA_Transmit()
     144   CGPS::get_double_number(char *)
       144   -> CGPS::GetComma(int, char *)
       144   -> atof
       144   -> strncpy
      32   CGPS::get_locate(double)
        32   -> __aeabi_d2iz
        32   -> __aeabi_dadd
        32   -> __aeabi_ddiv
        32   -> __aeabi_dsub
        32   -> __aeabi_i2d
      56   CGPS::unpack(int, int)
        56   -> CGPS::GetComma(int, char *)
        56   -> CGPS::get_double_number(char *)
        56   -> CGPS::get_locate(double)
        56   -> CJumpFilter::newData3(float, int)
        56   -> __aeabi_d2f
        56   -> __aeabi_dadd
        56   -> __aeabi_ddiv
        56   -> __aeabi_dmul
        56   -> __aeabi_dsub
        56   -> __aeabi_f2d
        56   -> arm_cos_f32
        56   -> arm_sin_f32
      40   CGPS::updateUart()
        40   -> CGPS::unpack(int, int)
        40   -> CJumpFilter::checkIsNewData(int)
       0   CJumpFilter::CJumpFilter()
       8   Coordinate::Coordinate()
         8   -> CoordinateElement::CoordinateElement()
       0   CoordinateElement::CoordinateElement()
      16   GPS_Init()
        16   -> CGPS::CGPS()
        16   -> CJumpFilter::setParameter(float, int)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
     128  CGPS::CGPS()
      50  CGPS::GetComma(int, char *)
      58  CGPS::TX_::startDMA_Transmit()
      46  CGPS::get_double_number(char *)
      88  CGPS::get_locate(double)
     832  CGPS::unpack(int, int)
     318  CGPS::updateUart()
      20  CJumpFilter::CJumpFilter()
      30  Coordinate::Coordinate()
      28  CoordinateElement::CoordinateElement()
       4  GPS
   25856  GPS_0
     148  GPS_Init()
      45  -- Other

 
     32 bytes in section .ARM.exidx
     12 bytes in section .ARM.extab
 25 861 bytes in section .bss
  1 802 bytes in section .text
 
  1 596 bytes of CODE  memory (+ 206 bytes shared)
     44 bytes of CONST memory
 25 861 bytes of DATA  memory

Errors: none
Warnings: 1
