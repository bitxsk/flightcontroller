###############################################################################
#
# IAR ANSI C/C++ Compiler V8.30.1.114/W32 for ARM         30/Jul/2018  16:04:08
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\waterGun.cpp
#    Command line =  
#        -f C:\Users\XSK199~1\AppData\Local\Temp\EW5491.tmp
#        (C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\waterGun.cpp
#        -D K60 -D USE_K60F15 -D ARM_MATH_CM4 -D __FPU_PRESENT=1 -D
#        __FPU_USED=1 -lCN
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -lB
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List
#        -o
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        D:\iar\arm\inc\c\DLib_Config_Full.h -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\app\Sensor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\CPU\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\HW\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\DEV\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\FatFs\option\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\common\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\driver\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\descriptor\
#        -I
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\..\lib\USB\class\
#        -On --c++ -I D:\iar\arm\CMSIS\Core\Include\ -I
#        D:\iar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4 --text_out utf8
#        --utf8_text_in)
#    Locale       =  C
#    List file    =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\List\waterGun.lst
#    Object file  =  
#        C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\iar\FLASH\Obj\waterGun.o
#
###############################################################################

C:\Users\xsk19940910\Desktop\flightController-1\flightController-1\program\app\waterGun.cpp
      1          #include "waterGun.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void GPIO_Output_b(GPIO_Type *, uint32, uint8)
   \                     GPIO_Output_b: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x6803             LDR      R3,[R0, #+0]
   \        0x4   0x2401             MOVS     R4,#+1
   \        0x6   0x408C             LSLS     R4,R4,R1
   \        0x8   0x43A3             BICS     R3,R3,R4
   \        0xA   0x0014             MOVS     R4,R2
   \        0xC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \        0xE   0x408C             LSLS     R4,R4,R1
   \       0x10   0x4323             ORRS     R3,R4,R3
   \       0x12   0x6003             STR      R3,[R0, #+0]
   \       0x14   0xBC10             POP      {R4}
   \       0x16   0x4770             BX       LR               ;; return
      2          

   \                                 In section .bss, align 4
      3          CWaterGun *waterGun;
   \                     waterGun:
   \        0x0                      DS8 4
      4          
      5          

   \                                 In section .text, align 2, keep-with-next
      6          void WaterGun_Init()
      7          {
      8            static CWaterGun waterGun_0;
      9            waterGun = &waterGun_0;
   \                     _Z13WaterGun_Initv: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable3_1
   \        0x2   0x....             LDR.N    R1,??DataTable3_2
   \        0x4   0x6001             STR      R1,[R0, #+0]
     10            
     11            waterGun->servoMiddle1 = 3000;
   \        0x6   0xF640 0x31B8      MOVW     R1,#+3000
   \        0xA   0x6802             LDR      R2,[R0, #+0]
   \        0xC   0x6011             STR      R1,[R2, #+0]
     12            waterGun->servoMiddle2 = 3000;
   \        0xE   0x6802             LDR      R2,[R0, #+0]
   \       0x10   0x6051             STR      R1,[R2, #+4]
     13            waterGun->servoMax1 = 6000; //»úÐµ½á¹¹ÏÞÖÆ·¶Î§×î´óÖµ
   \       0x12   0xF241 0x7170      MOVW     R1,#+6000
   \       0x16   0x6802             LDR      R2,[R0, #+0]
   \       0x18   0x6091             STR      R1,[R2, #+8]
     14            waterGun->servoMax2 = 6000;
   \       0x1A   0x6802             LDR      R2,[R0, #+0]
   \       0x1C   0x60D1             STR      R1,[R2, #+12]
     15            waterGun->servoMin1 = 2000;
   \       0x1E   0xF44F 0x61FA      MOV      R1,#+2000
   \       0x22   0x6802             LDR      R2,[R0, #+0]
   \       0x24   0x6111             STR      R1,[R2, #+16]
     16            waterGun->servoMin2 = 2000;
   \       0x26   0x6802             LDR      R2,[R0, #+0]
   \       0x28   0x6151             STR      R1,[R2, #+20]
     17            
     18            waterGun->horizontalSpeed = 800; //Õ¼¿Õ±È±ä»¯Ã¿Ãë
   \       0x2A   0xF44F 0x7148      MOV      R1,#+800
   \       0x2E   0x6802             LDR      R2,[R0, #+0]
   \       0x30   0x6191             STR      R1,[R2, #+24]
     19          //  waterGun->verticalSpeed = 800; //¸ù¾ÝºáÏòËÙ¶ÈÓë´ÎÊý¼ÆËãµÃ³ö
     20            waterGun->horizontalAngleP = 300; //Êµ¼ÊÅçÈ÷±ß½çÆ«ÒÆÁ¿
   \       0x32   0xF44F 0x7196      MOV      R1,#+300
   \       0x36   0x6802             LDR      R2,[R0, #+0]
   \       0x38   0x6211             STR      R1,[R2, #+32]
     21            waterGun->horizontalAngleM = -300;
   \       0x3A   0x....             LDR.N    R2,??DataTable3_3  ;; 0xfffffed4
   \       0x3C   0x6803             LDR      R3,[R0, #+0]
   \       0x3E   0x625A             STR      R2,[R3, #+36]
     22            waterGun->verticalAngleP = 300;
   \       0x40   0x6803             LDR      R3,[R0, #+0]
   \       0x42   0x6299             STR      R1,[R3, #+40]
     23            waterGun->verticalAngleM = -300;
   \       0x44   0x6801             LDR      R1,[R0, #+0]
   \       0x46   0x62CA             STR      R2,[R1, #+44]
     24            
     25            waterGun->horizontalSprayTime = 5;
   \       0x48   0x2105             MOVS     R1,#+5
   \       0x4A   0x6800             LDR      R0,[R0, #+0]
   \       0x4C   0x6301             STR      R1,[R0, #+48]
     26          }
   \       0x4E   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 8
   \                     `WaterGun_Init()::waterGun_0`:
   \        0x0                      DS8 80
     27          

   \                                 In section .text, align 4, keep-with-next
     28          void CWaterGun::update()
     29          {
   \                     _ZN9CWaterGun6updateEv: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xED2D 0x8B06      VPUSH    {D8-D10}
   \        0x8   0x0006             MOVS     R6,R0
     30            if(working)
   \        0xA   0xF896 0x004A      LDRB     R0,[R6, #+74]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xF000 0x80C6      BEQ.W    ??update_0
     31            {
     32              int horizontalRange = horizontalAngleP - horizontalAngleM;
   \       0x14   0x6A30             LDR      R0,[R6, #+32]
   \       0x16   0x6A77             LDR      R7,[R6, #+36]
   \       0x18   0x1BC7             SUBS     R7,R0,R7
     33              double horizontalPeriod = (double)horizontalRange / (double)horizontalSpeed;
   \       0x1A   0x0038             MOVS     R0,R7
   \       0x1C   0x.... 0x....      BL       __aeabi_i2d
   \       0x20   0x0004             MOVS     R4,R0
   \       0x22   0x000D             MOVS     R5,R1
   \       0x24   0x69B0             LDR      R0,[R6, #+24]
   \       0x26   0x.... 0x....      BL       __aeabi_i2d
   \       0x2A   0x0002             MOVS     R2,R0
   \       0x2C   0x000B             MOVS     R3,R1
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x0029             MOVS     R1,R5
   \       0x32   0x.... 0x....      BL       __aeabi_ddiv
   \       0x36   0xEC41 0x0B18      VMOV     D8,R0,R1
     34              double time = (t - sprayingStartTime) / 1000.0f;
   \       0x3A   0x....             LDR.N    R0,??DataTable3_4
   \       0x3C   0x6801             LDR      R1,[R0, #+0]
   \       0x3E   0x6B70             LDR      R0,[R6, #+52]
   \       0x40   0x1A09             SUBS     R1,R1,R0
   \       0x42   0xEE00 0x1A10      VMOV     S0,R1
   \       0x46   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \       0x4A   0xEDDF 0x....      VLDR.W   S1,??DataTable3  ;; 0x447a0000
   \       0x4E   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \       0x52   0xEE10 0x0A10      VMOV     R0,S0
   \       0x56   0x.... 0x....      BL       __aeabi_f2d
   \       0x5A   0xEC41 0x0B19      VMOV     D9,R0,R1
     35              
     36              if((int)(time / horizontalPeriod ) % 2 == 0)
   \       0x5E   0xEC51 0x0B19      VMOV     R0,R1,D9
   \       0x62   0xEC53 0x2B18      VMOV     R2,R3,D8
   \       0x66   0x.... 0x....      BL       __aeabi_ddiv
   \       0x6A   0x.... 0x....      BL       __aeabi_d2iz
   \       0x6E   0x2102             MOVS     R1,#+2
   \       0x70   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \       0x74   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \       0x78   0x2800             CMP      R0,#+0
   \       0x7A   0xD12C             BNE.N    ??update_1
     37              {
     38                servoControl1 = horizontalAngleM + 
     39                  (time / horizontalPeriod - (int)(time / horizontalPeriod)) * horizontalRange;
   \       0x7C   0x6A70             LDR      R0,[R6, #+36]
   \       0x7E   0x.... 0x....      BL       __aeabi_i2d
   \       0x82   0x4680             MOV      R8,R0
   \       0x84   0x4689             MOV      R9,R1
   \       0x86   0xEC51 0x0B19      VMOV     R0,R1,D9
   \       0x8A   0xEC53 0x2B18      VMOV     R2,R3,D8
   \       0x8E   0x.... 0x....      BL       __aeabi_ddiv
   \       0x92   0x0004             MOVS     R4,R0
   \       0x94   0x000D             MOVS     R5,R1
   \       0x96   0xEC51 0x0B19      VMOV     R0,R1,D9
   \       0x9A   0xEC53 0x2B18      VMOV     R2,R3,D8
   \       0x9E   0x.... 0x....      BL       __aeabi_ddiv
   \       0xA2   0x.... 0x....      BL       __aeabi_d2iz
   \       0xA6   0x.... 0x....      BL       __aeabi_i2d
   \       0xAA   0x0002             MOVS     R2,R0
   \       0xAC   0x000B             MOVS     R3,R1
   \       0xAE   0x0020             MOVS     R0,R4
   \       0xB0   0x0029             MOVS     R1,R5
   \       0xB2   0x.... 0x....      BL       __aeabi_dsub
   \       0xB6   0x0004             MOVS     R4,R0
   \       0xB8   0x000D             MOVS     R5,R1
   \       0xBA   0x0038             MOVS     R0,R7
   \       0xBC   0x.... 0x....      BL       __aeabi_i2d
   \       0xC0   0x0022             MOVS     R2,R4
   \       0xC2   0x002B             MOVS     R3,R5
   \       0xC4   0x.... 0x....      BL       __aeabi_dmul
   \       0xC8   0x4642             MOV      R2,R8
   \       0xCA   0x464B             MOV      R3,R9
   \       0xCC   0x.... 0x....      BL       __aeabi_dadd
   \       0xD0   0xE9C6 0x010E      STRD     R0,R1,[R6, #+56]
   \       0xD4   0xE02B             B.N      ??update_2
     40              }
     41              else
     42              {
     43                 servoControl1 = horizontalAngleP - 
     44                  (time / horizontalPeriod - (int)(time / horizontalPeriod)) * horizontalRange;
   \                     ??update_1: (+1)
   \       0xD6   0x6A30             LDR      R0,[R6, #+32]
   \       0xD8   0x.... 0x....      BL       __aeabi_i2d
   \       0xDC   0x4680             MOV      R8,R0
   \       0xDE   0x4689             MOV      R9,R1
   \       0xE0   0xEC51 0x0B19      VMOV     R0,R1,D9
   \       0xE4   0xEC53 0x2B18      VMOV     R2,R3,D8
   \       0xE8   0x.... 0x....      BL       __aeabi_ddiv
   \       0xEC   0x.... 0x....      BL       __aeabi_d2iz
   \       0xF0   0x.... 0x....      BL       __aeabi_i2d
   \       0xF4   0x0004             MOVS     R4,R0
   \       0xF6   0x000D             MOVS     R5,R1
   \       0xF8   0xEC51 0x0B19      VMOV     R0,R1,D9
   \       0xFC   0xEC53 0x2B18      VMOV     R2,R3,D8
   \      0x100   0x.... 0x....      BL       __aeabi_ddiv
   \      0x104   0x0002             MOVS     R2,R0
   \      0x106   0x000B             MOVS     R3,R1
   \      0x108   0x0020             MOVS     R0,R4
   \      0x10A   0x0029             MOVS     R1,R5
   \      0x10C   0x.... 0x....      BL       __aeabi_dsub
   \      0x110   0x0004             MOVS     R4,R0
   \      0x112   0x000D             MOVS     R5,R1
   \      0x114   0x0038             MOVS     R0,R7
   \      0x116   0x.... 0x....      BL       __aeabi_i2d
   \      0x11A   0x0022             MOVS     R2,R4
   \      0x11C   0x002B             MOVS     R3,R5
   \      0x11E   0x.... 0x....      BL       __aeabi_dmul
   \      0x122   0x4642             MOV      R2,R8
   \      0x124   0x464B             MOV      R3,R9
   \      0x126   0x.... 0x....      BL       __aeabi_dadd
   \      0x12A   0xE9C6 0x010E      STRD     R0,R1,[R6, #+56]
     45              }
     46              
     47              int verticalRange = verticalAngleP - verticalAngleM;
   \                     ??update_2: (+1)
   \      0x12E   0x6AB0             LDR      R0,[R6, #+40]
   \      0x130   0xF8D6 0xA02C      LDR      R10,[R6, #+44]
   \      0x134   0xEBB0 0x0A0A      SUBS     R10,R0,R10
     48              double verticalPeriod = horizontalPeriod * horizontalSprayTime;
   \      0x138   0x6B30             LDR      R0,[R6, #+48]
   \      0x13A   0x.... 0x....      BL       __aeabi_i2d
   \      0x13E   0xEC53 0x2B18      VMOV     R2,R3,D8
   \      0x142   0x.... 0x....      BL       __aeabi_dmul
   \      0x146   0xEC41 0x0B1A      VMOV     D10,R0,R1
     49              
     50              servoControl2 = verticalAngleP - 
     51                  (time / verticalPeriod) * verticalRange;
   \      0x14A   0x6AB0             LDR      R0,[R6, #+40]
   \      0x14C   0x.... 0x....      BL       __aeabi_i2d
   \      0x150   0x4680             MOV      R8,R0
   \      0x152   0x4689             MOV      R9,R1
   \      0x154   0xEC51 0x0B19      VMOV     R0,R1,D9
   \      0x158   0xEC53 0x2B1A      VMOV     R2,R3,D10
   \      0x15C   0x.... 0x....      BL       __aeabi_ddiv
   \      0x160   0x0004             MOVS     R4,R0
   \      0x162   0x000D             MOVS     R5,R1
   \      0x164   0x4650             MOV      R0,R10
   \      0x166   0x.... 0x....      BL       __aeabi_i2d
   \      0x16A   0x0022             MOVS     R2,R4
   \      0x16C   0x002B             MOVS     R3,R5
   \      0x16E   0x.... 0x....      BL       __aeabi_dmul
   \      0x172   0x0002             MOVS     R2,R0
   \      0x174   0x000B             MOVS     R3,R1
   \      0x176   0x4640             MOV      R0,R8
   \      0x178   0x4649             MOV      R1,R9
   \      0x17A   0x.... 0x....      BL       __aeabi_dsub
   \      0x17E   0xE9C6 0x0110      STRD     R0,R1,[R6, #+64]
     52              
     53              if((int)(time / horizontalPeriod) >= horizontalSprayTime)
   \      0x182   0xEC51 0x0B19      VMOV     R0,R1,D9
   \      0x186   0xEC53 0x2B18      VMOV     R2,R3,D8
   \      0x18A   0x.... 0x....      BL       __aeabi_ddiv
   \      0x18E   0x.... 0x....      BL       __aeabi_d2iz
   \      0x192   0x6B31             LDR      R1,[R6, #+48]
   \      0x194   0x4288             CMP      R0,R1
   \      0x196   0xDB0D             BLT.N    ??update_3
     54              {
     55                stopSpraying();
   \      0x198   0x0030             MOVS     R0,R6
   \      0x19A   0x.... 0x....      BL       _ZN9CWaterGun12stopSprayingEv
   \      0x19E   0xE009             B.N      ??update_3
     56              }
     57            }
     58            else
     59            {
     60              servoControl1 = horizontalAngleM;
   \                     ??update_0: (+1)
   \      0x1A0   0x6A70             LDR      R0,[R6, #+36]
   \      0x1A2   0x.... 0x....      BL       __aeabi_i2d
   \      0x1A6   0xE9C6 0x010E      STRD     R0,R1,[R6, #+56]
     61              servoControl2 = verticalAngleP;
   \      0x1AA   0x6AB0             LDR      R0,[R6, #+40]
   \      0x1AC   0x.... 0x....      BL       __aeabi_i2d
   \      0x1B0   0xE9C6 0x0110      STRD     R0,R1,[R6, #+64]
     62            }
     63           
     64          //  FTM_PWM_ChangeDuty(FTM0, FTM_Ch0, limiter(servoMin1, servoMax1, servoMiddle1 + (int)servoControl1));
     65           // FTM_PWM_ChangeDuty(FTM0, FTM_Ch1, limiter(servoMin2, servoMax2, servoMiddle2 + (int)servoControl2));  
     66          }
   \                     ??update_3: (+1)
   \      0x1B4   0xECBD 0x8B06      VPOP     {D8-D10}
   \      0x1B8   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
     67          

   \                                 In section .text, align 2, keep-with-next
     68          void CWaterGun::startSpraying()
     69          {
   \                     _ZN9CWaterGun13startSprayingEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
     70            sprayingStartTime = t;
   \        0x4   0x....             LDR.N    R0,??DataTable3_4
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0x6360             STR      R0,[R4, #+52]
     71            working = true;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xF884 0x004A      STRB     R0,[R4, #+74]
     72            GPIO_Output_b(PTB, 22, 1);
   \       0x10   0x2201             MOVS     R2,#+1
   \       0x12   0x2116             MOVS     R1,#+22
   \       0x14   0x....             LDR.N    R0,??DataTable3_5  ;; 0x400ff040
   \       0x16   0x.... 0x....      BL       GPIO_Output_b
     73          }
   \       0x1A   0xBD10             POP      {R4,PC}          ;; return
     74          

   \                                 In section .text, align 2, keep-with-next
     75          void CWaterGun::stopSpraying()
     76          {
   \                     _ZN9CWaterGun12stopSprayingEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
     77            working = false;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0xF884 0x004A      STRB     R0,[R4, #+74]
     78            done = true;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xF884 0x004B      STRB     R0,[R4, #+75]
     79            GPIO_Output_b(PTB, 22, 0);
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x2116             MOVS     R1,#+22
   \       0x14   0x....             LDR.N    R0,??DataTable3_5  ;; 0x400ff040
   \       0x16   0x.... 0x....      BL       GPIO_Output_b
     80          }
   \       0x1A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x447A'0000        DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     waterGun

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     `WaterGun_Init()::waterGun_0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0xFFFF'FED4        DC32     0xfffffed4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x400F'F040        DC32     0x400ff040
     81          
     82          template<typename T>
     83          T limiter(T lowerLimit, T upperLimit, T data)
     84          {
     85            if(data > upperLimit)
     86            {
     87              data = upperLimit;
     88            }
     89            else if(data < lowerLimit)
     90            {
     91              data = lowerLimit;
     92            }
     93            return data;
     94          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CWaterGun::startSpraying()
         8   -> GPIO_Output_b
       8   CWaterGun::stopSpraying()
         8   -> GPIO_Output_b
      56   CWaterGun::update()
        56   -> CWaterGun::stopSpraying()
        56   -> __aeabi_d2iz
        56   -> __aeabi_dadd
        56   -> __aeabi_ddiv
        56   -> __aeabi_dmul
        56   -> __aeabi_dsub
        56   -> __aeabi_f2d
        56   -> __aeabi_i2d
       4   GPIO_Output_b
       0   WaterGun_Init()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
      28  CWaterGun::startSpraying()
      28  CWaterGun::stopSpraying()
     444  CWaterGun::update()
      24  GPIO_Output_b
      80  WaterGun_Init()
       4  waterGun
      80  waterGun_0

 
  84 bytes in section .bss
 628 bytes in section .text
 
 604 bytes of CODE memory (+ 24 bytes shared)
  84 bytes of DATA memory

Errors: none
Warnings: none
